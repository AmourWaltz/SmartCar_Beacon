///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM      19/Jul/2019  16:52:17
// Copyright 1999-2016 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\app\debug\src\oled.c
//    Command line =  
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\app\debug\src\oled.c" -D LPLD_K60 -lCN
//        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\iar\RAM\List"
//        -lB "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\RAM\List" -o "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\RAM\Obj" --no_cse --no_unroll --no_inline
//        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
//        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
//        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
//        7.5\arm\INC\c\DLib_Config_Normal.h" -I "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\app\" -I "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\CPU\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\common\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\HW\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\DEV\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\FUNC\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\uCOS-II\Ports\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\uCOS-II\Source\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\FatFs\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\FatFs\option\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\common\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\driver\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\descriptor\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\class\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\app\control\inc\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\app\control\src\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\app\debug\inc\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\app\debug\src\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\app\device\inc\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\app\device\src\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\app\driver\inc\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\app\driver\src\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\app\signal\inc\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\app\signal\src\" -I
//        "D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\..\app\system\" -Ol -I "D:\Program Files
//        (x86)\IAR Systems\Embedded Workbench 7.5\arm\CMSIS\Include\"
//    Locale       =  Chinese (Simplified)_China.936
//    List file    =  
//        D:\Freescale\信标\Beacon_C1
//        -NXP\project\Beacon_XBY\iar\RAM\List\oled.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN LPLD_GPIO_Init
        EXTERN LPLD_GPIO_Output_b
        EXTERN __aeabi_memcpy4
        EXTERN guc_camera_image_Ok
        EXTERN guc_corrected_image

        PUBLIC F6x8
        PUBLIC OLED_16X8GB2312
        PUBLIC OLED_ASCII16X8
        PUBLIC SetAddressingMode
        PUBLIC SetChargePump
        PUBLIC SetColumnAddress
        PUBLIC SetCommonConfig
        PUBLIC SetCommonRemap
        PUBLIC SetContrastControl
        PUBLIC SetDisplayClock
        PUBLIC SetDisplayOffset
        PUBLIC SetDisplayOnOff
        PUBLIC SetEntireDisplay
        PUBLIC SetInvcharseDisplay
        PUBLIC SetMultiplexRatio
        PUBLIC SetNop
        PUBLIC SetPageAddress
        PUBLIC SetPrechargePchariod
        PUBLIC SetSegmentRemap
        PUBLIC SetStartColumn
        PUBLIC SetStartLine
        PUBLIC SetStartPage
        PUBLIC SetVCOMH
        PUBLIC gl_gpio_oled_dc
        PUBLIC gl_gpio_oled_rst
        PUBLIC gl_gpio_oled_sclk
        PUBLIC gl_gpio_oled_sdin
        PUBLIC oled_clear
        PUBLIC oled_display_16x8char
        PUBLIC oled_display_16x8char_hl
        PUBLIC oled_display_16x8str
        PUBLIC oled_display_16x8str_hl
        PUBLIC oled_display_6x8char
        PUBLIC oled_display_6x8char_hl
        PUBLIC oled_display_6x8str
        PUBLIC oled_display_6x8str_hl
        PUBLIC oled_display_boolean
        PUBLIC oled_display_chinese
        PUBLIC oled_display_direction
        PUBLIC oled_fill
        PUBLIC oled_gap
        PUBLIC oled_init
        PUBLIC oled_my_show
        PUBLIC oled_one_group
        PUBLIC oled_pin_init
        PUBLIC oled_print_16x8char
        PUBLIC oled_print_16x8short
        PUBLIC oled_print_16x8short_hl
        PUBLIC oled_print_char
        PUBLIC oled_print_char_hl
        PUBLIC oled_print_image
        PUBLIC oled_print_mirror_image
        PUBLIC oled_print_short
        PUBLIC oled_print_short_hl
        PUBLIC oled_print_std_image
        PUBLIC oled_set_pos
        PUBLIC oled_twink
        PUBLIC oled_write_command
        PUBLIC oled_write_data

// D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\debug\src\oled.c
//    1 #include "oled.h"
//    2 #include "include.h"
//    3 /**
//    4  *    6x8字体库
//    5  * */

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
//    6 const uint8 F6x8[][6] =
F6x8:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0
        DC8 7, 0, 7, 0, 0, 20, 127, 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98
        DC8 100, 8, 19, 35, 0, 54, 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28
        DC8 34, 65, 0, 0, 0, 65, 34, 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8
        DC8 8, 0, 0, 0, 160, 96, 0, 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32
        DC8 16, 8, 4, 2, 0, 62, 81, 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97
        DC8 81, 73, 70, 0, 33, 65, 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39
        DC8 69, 69, 69, 57, 0, 60, 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54
        DC8 73, 73, 73, 54, 0, 6, 73, 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86
        DC8 54, 0, 0, 0, 8, 20, 34, 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34
        DC8 20, 8, 0, 2, 1, 81, 9, 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18
        DC8 124, 0, 127, 73, 73, 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65
        DC8 34, 28, 0, 127, 73, 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73
        DC8 73, 122, 0, 127, 8, 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65
        DC8 63, 1, 0, 127, 8, 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12
        DC8 2, 127, 0, 127, 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9
        DC8 9, 6, 0, 62, 65, 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73
        DC8 73, 49, 0, 1, 1, 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64
        DC8 32, 31, 0, 63, 64, 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112
        DC8 8, 7, 0, 97, 81, 73, 69, 67, 0, 0, 127, 65, 65, 0, 0, 2, 4, 8, 16
        DC8 32, 0, 0, 65, 65, 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64
        DC8 0, 0, 1, 2, 4, 0, 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0
        DC8 56, 68, 68, 68, 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24
        DC8 0, 8, 126, 9, 1, 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120
        DC8 0, 0, 68, 125, 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68
        DC8 0, 0, 0, 65, 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4
        DC8 120, 0, 56, 68, 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36
        DC8 24, 252, 0, 124, 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68
        DC8 64, 32, 0, 60, 64, 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64
        DC8 48, 64, 60, 0, 68, 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68
        DC8 100, 84, 76, 68, 20, 20, 20, 20, 20, 20, 255, 0, 0, 0, 0, 0, 0, 16
        DC8 32, 16, 8, 4
//    7 {
//    8     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//0
//    9 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//1
//   10 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//2
//   11 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//3
//   12 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//4
//   13 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//5
//   14 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//6
//   15 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//7
//   16 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//8
//   17 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//9
//   18 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//10
//   19 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//11
//   20 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//12
//   21 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//13
//   22 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//14
//   23 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//15
//   24 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//16
//   25 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//17
//   26 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//18
//   27 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//19
//   28 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//20
//   29 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//21
//   30 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//22
//   31 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//23
//   32 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//24
//   33 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//25
//   34 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//26
//   35 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//27
//   36 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//28
//   37 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//29
//   38 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//30
//   39 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//31
//   40 	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	//32
//   41     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !33
//   42     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "34
//   43     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #35
//   44     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $36
//   45     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %37
//   46     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &38
//   47     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '39
//   48     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (40
//   49     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )41
//   50     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *42
//   51     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +43
//   52     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,44
//   53     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -45
//   54     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .46
//   55     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /47
//   56     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 048
//   57     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 149
//   58     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 250
//   59     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 351
//   60     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 452
//   61     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 553
//   62     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 654
//   63     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 755
//   64     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 856
//   65     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 957
//   66     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :58
//   67     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;59
//   68     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <60
//   69     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =61
//   70     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >62
//   71     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?63
//   72     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @64
//   73     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A65
//   74     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B66
//   75     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C67
//   76     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D68
//   77     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E69
//   78     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F70
//   79     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G71
//   80     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H72
//   81     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I73
//   82     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J74
//   83     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K75
//   84     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L76
//   85     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M77
//   86     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N78
//   87     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O79
//   88     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P80
//   89     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q81
//   90     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R82
//   91     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S83
//   92     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T84
//   93     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U85
//   94     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V86
//   95     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W87
//   96     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X88
//   97     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y89
//   98     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z90
//   99     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [91
//  100     { 0x00, 0x02, 0x04 ,0x08, 0x10, 0x20 },   // '\'92
//  101     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]93
//  102     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^94
//  103     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _95
//  104     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '96
//  105     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a97
//  106     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b98
//  107     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c99
//  108     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d100
//  109     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  110     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  111     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  112     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  113     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  114     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  115     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  116     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  117     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  118     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  119     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  120     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  121     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  122     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  123     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  124     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  125     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  126     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  127     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  128     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  129     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  130     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  131     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 },   // horiz lines
//  132 	{ 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00 },	  // |
//  133 	{ 0x00, 0x10, 0x20, 0x10, 0x08, 0x04 }	  // √
//  134 };
//  135 
//  136 // 16 x 8

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
//  137 const unsigned char OLED_ASCII16X8[][16]=
OLED_ASCII16X8:
        DC8 0, 224, 16, 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16
        DC8 16, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0, 51, 48, 0
        DC8 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 192
        DC8 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63, 4, 4, 0, 0, 112, 136
        DC8 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0, 0, 240, 8, 240, 0, 224
        DC8 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0, 240, 8, 136, 112, 0, 0, 0
        DC8 30, 33, 35, 36, 25, 39, 33, 16, 16, 22, 14, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2, 0, 0, 0, 0, 7, 24, 32, 64, 0
        DC8 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32, 24, 7, 0, 0, 0, 64, 64, 128
        DC8 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2, 2, 0, 0, 0, 0, 240, 0, 0, 0
        DC8 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 176, 112
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 96, 24
        DC8 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16, 8, 8, 16, 224, 0, 0, 15
        DC8 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0, 0, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0, 0, 48, 40, 36, 34, 33
        DC8 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24, 32, 32, 32, 17, 14, 0
        DC8 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36, 36, 63, 36, 0, 0, 248, 8
        DC8 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17, 14, 0, 0, 224, 16, 136
        DC8 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0, 0, 56, 8, 8, 200, 56
        DC8 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8, 8, 136, 112, 0, 0
        DC8 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16, 224, 0, 0, 0, 49
        DC8 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0, 0, 0, 48, 48, 0
        DC8 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0, 0, 0, 0, 0, 0
        DC8 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64, 64, 64, 64, 64
        DC8 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64, 128, 0, 0, 0
        DC8 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0, 0, 0, 48, 54
        DC8 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39, 36, 35, 20
        DC8 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2, 39, 56, 32, 8
        DC8 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32, 17, 14, 0, 192
        DC8 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0, 8, 248, 8, 8, 8
        DC8 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248, 136, 136, 232, 8
        DC8 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136, 136, 232, 8, 16
        DC8 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56, 0, 0, 7, 24, 32
        DC8 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32, 63, 33, 1, 1, 33
        DC8 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0
        DC8 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0, 0, 0, 8, 248, 136
        DC8 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0, 8, 248, 8, 0, 0, 0
        DC8 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248, 248, 0, 248, 248, 8, 0
        DC8 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48, 192, 0, 8, 248, 8, 32, 63
        DC8 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 16, 32, 32
        DC8 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240, 0, 32, 63, 33, 1, 1, 1, 0
        DC8 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24, 36, 36, 56, 80, 79, 0, 8
        DC8 248, 136, 136, 136, 136, 112, 0, 32, 63, 32, 0, 3, 12, 48, 32, 0
        DC8 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33, 33, 34, 28, 0, 24, 8, 8
        DC8 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0, 0, 8, 248, 8, 0, 0, 8
        DC8 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120, 136, 0, 0, 200, 56, 8
        DC8 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0, 8, 248, 0, 3, 60, 7, 0
        DC8 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24, 8, 32, 48, 44, 3, 3, 44
        DC8 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0, 32, 63, 32, 0, 0, 0, 16
        DC8 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32, 32, 24, 0, 0, 0, 0, 254
        DC8 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0, 12, 48, 192, 0, 0, 0, 0
        DC8 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254, 0, 0, 0, 0, 64, 64, 64
        DC8 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128, 128, 128, 128, 0, 2, 2
        DC8 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0, 128, 128, 0, 0, 0, 0
        DC8 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128, 128, 0, 0, 0, 14, 17
        DC8 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136, 248, 0, 0, 14, 17, 32
        DC8 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 34, 34, 34
        DC8 34, 19, 0, 0, 128, 128, 240, 136, 136, 136, 24, 0, 32, 32, 63, 32
        DC8 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0, 0, 107, 148, 148, 148
        DC8 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32
        DC8 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0
        DC8 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128, 128, 128, 127, 0, 0, 8
        DC8 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2, 45, 48, 32, 0, 0, 8, 8
        DC8 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0, 63, 128, 128, 0, 128
        DC8 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32, 0, 0, 128, 128, 128
        DC8 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128, 128, 0, 128, 128, 0
        DC8 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128, 128, 128
        DC8 0, 0, 14, 17, 32, 32, 160, 255, 128, 128, 128, 128, 0, 128, 128
        DC8 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128, 128, 224, 128, 128, 0, 0
        DC8 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0, 0, 128, 128, 0, 0, 31
        DC8 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0, 128, 128, 128, 0, 1
        DC8 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128, 128, 128, 15, 48, 12
        DC8 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128, 128, 0, 0, 32, 49, 46
        DC8 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128, 128, 128, 129, 142
        DC8 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128, 128, 0, 0, 33, 48, 44
        DC8 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0, 0, 0, 0, 0, 63, 64
        DC8 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 2, 2
        DC8 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0, 6, 1, 1, 2, 2, 4
        DC8 4, 0, 0, 0, 0, 0, 0, 0, 0
//  138 {
//  139 	0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,// 0
//  140 	0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,// 1
//  141 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 2
//  142 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 3
//  143 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 4
//  144 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 5
//  145 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 6
//  146 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 7
//  147 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 8
//  148 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 9
//  149 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 10
//  150 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 11
//  151 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 12
//  152 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 13
//  153 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 14
//  154 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 15
//  155 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 16
//  156 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 17
//  157 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 18
//  158 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 19
//  159 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 20
//  160 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 21
//  161 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 22
//  162 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 23
//  163 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 24
//  164 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 25
//  165 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 26
//  166 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 27
//  167 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 28
//  168 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 29
//  169 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 30
//  170 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 31
//  171 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 32
//  172 
//  173 	0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!33
//  174 	0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"34
//  175 	0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#35
//  176 	0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$36
//  177 	0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%37
//  178 	0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&38
//  179 	0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'39
//  180 	0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(40
//  181 	0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)41
//  182 	0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*42
//  183 	0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+43
//  184 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,44
//  185 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-45
//  186 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.46
//  187 	0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///47
//  188 	0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//048
//  189 	0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//149
//  190 	0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//250
//  191 	0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//351
//  192 	0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//452
//  193 	0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//553
//  194 	0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//654
//  195 	0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//755
//  196 	0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//856
//  197 	0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//957
//  198 	0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:58
//  199 	0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;59
//  200 	0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<60
//  201 	0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=61
//  202 	0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>62
//  203 	0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?63
//  204 	0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@64
//  205 	0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A65
//  206 	0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B66
//  207 	0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C67
//  208 	0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D68
//  209 	0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E69
//  210 	0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F70
//  211 	0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G71
//  212 	0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H72
//  213 	0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I73
//  214 	0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J74
//  215 	0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K75
//  216 	0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L76
//  217 	0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M77
//  218 	0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N78
//  219 	0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O79
//  220 	0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P80
//  221 	0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q81
//  222 	0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R82
//  223 	0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S83
//  224 	0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T84
//  225 	0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U85
//  226 	0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V86
//  227 	0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W87
//  228 	0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X88
//  229 	0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y89
//  230 	0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z90
//  231 	0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[91
//  232 	0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\92
//  233 	0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]93
//  234 	0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^94
//  235 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_95
//  236 	0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`96
//  237 	0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a97
//  238 	0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b98
//  239 	0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c99
//  240 	0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d100
//  241 	0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e101
//  242 	0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f102
//  243 	0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g103
//  244 	0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h104
//  245 	0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i105
//  246 	0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j106
//  247 	0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k107
//  248 	0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l108
//  249 	0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m109
//  250 	0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n110
//  251 	0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o111
//  252 	0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p112
//  253 	0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q113
//  254 	0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r114
//  255 	0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s115
//  256 	0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t116
//  257 	0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u117
//  258 	0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v118
//  259 	0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w119
//  260 	0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x120
//  261 	0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y121
//  262 	0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z122
//  263 	0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{123
//  264 	0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|124
//  265 	0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}125
//  266 	0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~126
//  267 
//  268 };
//  269 
//  270 //16*16

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
//  271 const unsigned char OLED_16X8GB2312[][32] =
OLED_16X8GB2312:
        DC8 32, 16, 8, 252, 3, 32, 32, 16, 127, 136, 136, 132, 130, 224, 0, 0
        DC8 4, 4, 4, 5, 4, 4, 4, 255, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 240, 16, 16
        DC8 16, 16, 255, 16, 16, 16, 16, 240, 0, 0, 0, 0, 0, 15, 4, 4, 4, 4
        DC8 255, 4, 4, 4, 4, 15, 0, 0, 0, 36, 36, 164, 254, 163, 34, 0, 34, 204
        DC8 0, 0, 255, 0, 0, 0, 0, 8, 6, 1, 255, 0, 1, 4, 4, 4, 4, 4, 255, 2, 2
        DC8 2, 0, 16, 16, 16, 255, 16, 144, 8, 136, 136, 136, 255, 136, 136
        DC8 136, 8, 0, 4, 68, 130, 127, 1, 128, 128, 64, 67, 44, 16, 40, 70
        DC8 129, 128, 0, 32, 32, 32, 32, 32, 32, 32, 255, 32, 32, 32, 32, 32
        DC8 32, 32, 0, 128, 128, 64, 32, 16, 12, 3, 0, 3, 12, 16, 32, 64, 128
        DC8 128, 0, 64, 48, 17, 150, 144, 144, 145, 150, 144, 144, 152, 20, 19
        DC8 80, 48, 0, 4, 4, 4, 4, 4, 68, 132, 126, 6, 5, 4, 4, 4, 4, 4, 0, 0
        DC8 128, 96, 248, 7, 0, 4, 36, 36, 37, 38, 36, 36, 36, 4, 0, 1, 0, 0
        DC8 255, 0, 0, 0, 249, 73, 73, 73, 73, 73, 249, 0, 0, 16, 16, 208, 255
        DC8 144, 16, 32, 34, 34, 34, 226, 34, 34, 34, 32, 0, 4, 3, 0, 255, 0
        DC8 19, 12, 3, 64, 128, 127, 0, 1, 6, 24, 0, 0, 254, 2, 34, 218, 6, 0
        DC8 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 8, 16, 136, 71, 32, 24, 7, 0
        DC8 7, 24, 32, 64, 128, 0, 64, 66, 204, 0, 0, 254, 130, 146, 146, 254
        DC8 146, 146, 130, 254, 0, 0, 0, 0, 63, 16, 136, 127, 0, 30, 18, 18, 18
        DC8 94, 128, 127, 0, 0, 0, 32, 32, 168, 108, 42, 57, 40, 168, 42, 108
        DC8 168, 32, 32, 0, 0, 2, 130, 129, 144, 146, 74, 73, 69, 36, 34, 16, 8
        DC8 1, 2, 2, 0, 16, 96, 2, 140, 0, 254, 2, 242, 2, 254, 0, 248, 0, 255
        DC8 0, 0, 4, 4, 126, 1, 128, 71, 48, 15, 16, 39, 0, 71, 128, 127, 0, 0
        DC8 64, 64, 66, 204, 0, 144, 144, 144, 144, 144, 255, 16, 17, 22, 16, 0
        DC8 0, 0, 0, 63, 16, 40, 96, 63, 16, 16, 1, 14, 48, 64, 240, 0, 0, 254
        DC8 2, 66, 34, 50, 94, 146, 82, 50, 18, 2, 2, 254, 0, 0, 0, 255, 66, 66
        DC8 66, 81, 85, 100, 105, 65, 66, 66, 66, 255, 0, 0, 0, 128, 96, 248
        DC8 23, 8, 124, 75, 202, 106, 90, 78, 72, 120, 0, 0, 1, 0, 0, 255, 0
        DC8 74, 74, 37, 82, 137, 126, 4, 26, 33, 64, 0, 72, 40, 152, 14, 24
        DC8 170, 72, 0, 254, 66, 130, 98, 254, 0, 0, 0, 68, 52, 15, 149, 100
        DC8 31, 165, 100, 31, 4, 3, 4, 63, 64, 248, 0, 0, 8, 136, 72, 40, 24
        DC8 15, 232, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 9, 9, 9, 9, 9, 255, 9, 9, 9
        DC8 9, 9, 8, 8, 0, 4, 228, 36, 52, 47, 228, 4, 68, 196, 84, 111, 68
        DC8 196, 68, 4, 0, 0, 255, 73, 73, 73, 249, 2, 18, 18, 19, 254, 19, 18
        DC8 18, 2, 0, 32, 32, 255, 32, 36, 244, 84, 84, 84, 255, 84, 85, 86
        DC8 244, 4, 0, 0, 0, 255, 0, 8, 11, 25, 105, 9, 11, 73, 137, 125, 11, 8
        DC8 0, 0, 254, 2, 34, 218, 6, 0, 252, 4, 4, 4, 4, 4, 252, 0, 0, 0, 255
        DC8 8, 16, 8, 7, 0, 255, 65, 65, 65, 65, 65, 255, 0, 0
//  272 {
//  273 	0x20,0x10,0x08,0xFC,0x03,0x20,0x20,0x10,0x7F,0x88,0x88,0x84,0x82,0xE0,0x00,0x00,//华0
//  274 	0x04,0x04,0x04,0x05,0x04,0x04,0x04,0xFF,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,
//  275 	0x00,0x00,0xF0,0x10,0x10,0x10,0x10,0xFF,0x10,0x10,0x10,0x10,0xF0,0x00,0x00,0x00,//中1
//  276 	0x00,0x00,0x0F,0x04,0x04,0x04,0x04,0xFF,0x04,0x04,0x04,0x04,0x0F,0x00,0x00,0x00,
//  277 	0x24,0x24,0xA4,0xFE,0xA3,0x22,0x00,0x22,0xCC,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,//科2
//  278 	0x08,0x06,0x01,0xFF,0x00,0x01,0x04,0x04,0x04,0x04,0x04,0xFF,0x02,0x02,0x02,0x00,
//  279 	0x10,0x10,0x10,0xFF,0x10,0x90,0x08,0x88,0x88,0x88,0xFF,0x88,0x88,0x88,0x08,0x00,//技3
//  280 	0x04,0x44,0x82,0x7F,0x01,0x80,0x80,0x40,0x43,0x2C,0x10,0x28,0x46,0x81,0x80,0x00,
//  281 	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xFF,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,//大4
//  282 	0x80,0x80,0x40,0x20,0x10,0x0C,0x03,0x00,0x03,0x0C,0x10,0x20,0x40,0x80,0x80,0x00,
//  283 	0x40,0x30,0x11,0x96,0x90,0x90,0x91,0x96,0x90,0x90,0x98,0x14,0x13,0x50,0x30,0x00,//学5
//  284 	0x04,0x04,0x04,0x04,0x04,0x44,0x84,0x7E,0x06,0x05,0x04,0x04,0x04,0x04,0x04,0x00,
//  285         0x00,0x80,0x60,0xF8,0x07,0x00,0x04,0x24,0x24,0x25,0x26,0x24,0x24,0x24,0x04,0x00,//信6
//  286         0x01,0x00,0x00,0xFF,0x00,0x00,0x00,0xF9,0x49,0x49,0x49,0x49,0x49,0xF9,0x00,0x00,
//  287         0x10,0x10,0xD0,0xFF,0x90,0x10,0x20,0x22,0x22,0x22,0xE2,0x22,0x22,0x22,0x20,0x00,//标7
//  288         0x04,0x03,0x00,0xFF,0x00,0x13,0x0C,0x03,0x40,0x80,0x7F,0x00,0x01,0x06,0x18,0x00,
//  289         0x00,0xFE,0x02,0x22,0xDA,0x06,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,//队8
//  290         0x00,0xFF,0x08,0x10,0x88,0x47,0x20,0x18,0x07,0x00,0x07,0x18,0x20,0x40,0x80,0x00,
//  291         0x40,0x42,0xCC,0x00,0x00,0xFE,0x82,0x92,0x92,0xFE,0x92,0x92,0x82,0xFE,0x00,0x00,//调9
//  292         0x00,0x00,0x3F,0x10,0x88,0x7F,0x00,0x1E,0x12,0x12,0x12,0x5E,0x80,0x7F,0x00,0x00,
//  293 	0x00,0x20,0x20,0xA8,0x6C,0x2A,0x39,0x28,0xA8,0x2A,0x6C,0xA8,0x20,0x20,0x00,0x00,//参10
//  294         0x02,0x82,0x81,0x90,0x92,0x4A,0x49,0x45,0x24,0x22,0x10,0x08,0x01,0x02,0x02,0x00,
//  295         0x10,0x60,0x02,0x8C,0x00,0xFE,0x02,0xF2,0x02,0xFE,0x00,0xF8,0x00,0xFF,0x00,0x00,//测11
//  296         0x04,0x04,0x7E,0x01,0x80,0x47,0x30,0x0F,0x10,0x27,0x00,0x47,0x80,0x7F,0x00,0x00,
//  297 	0x40,0x40,0x42,0xCC,0x00,0x90,0x90,0x90,0x90,0x90,0xFF,0x10,0x11,0x16,0x10,0x00,//试12
//  298 	0x00,0x00,0x00,0x3F,0x10,0x28,0x60,0x3F,0x10,0x10,0x01,0x0E,0x30,0x40,0xF0,0x00,
//  299         0x00,0xFE,0x02,0x42,0x22,0x32,0x5E,0x92,0x52,0x32,0x12,0x02,0x02,0xFE,0x00,0x00,//图13
//  300         0x00,0xFF,0x42,0x42,0x42,0x51,0x55,0x64,0x69,0x41,0x42,0x42,0x42,0xFF,0x00,0x00,
//  301         0x00,0x80,0x60,0xF8,0x17,0x08,0x7C,0x4B,0xCA,0x6A,0x5A,0x4E,0x48,0x78,0x00,0x00,//像14
//  302         0x01,0x00,0x00,0xFF,0x00,0x4A,0x4A,0x25,0x52,0x89,0x7E,0x04,0x1A,0x21,0x40,0x00,
//  303         0x48,0x28,0x98,0x0E,0x18,0xAA,0x48,0x00,0xFE,0x42,0x82,0x62,0xFE,0x00,0x00,0x00,//飙15
//  304         0x44,0x34,0x0F,0x95,0x64,0x1F,0xA5,0x64,0x1F,0x04,0x03,0x04,0x3F,0x40,0xF8,0x00,
//  305         0x00,0x08,0x88,0x48,0x28,0x18,0x0F,0xE8,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,//车16
//  306         0x08,0x08,0x09,0x09,0x09,0x09,0x09,0xFF,0x09,0x09,0x09,0x09,0x09,0x08,0x08,0x00,
//  307         0x04,0xE4,0x24,0x34,0x2F,0xE4,0x04,0x44,0xC4,0x54,0x6F,0x44,0xC4,0x44,0x04,0x00,//薛17
//  308         0x00,0xFF,0x49,0x49,0x49,0xF9,0x02,0x12,0x12,0x13,0xFE,0x13,0x12,0x12,0x02,0x00,
//  309         0x20,0x20,0xFF,0x20,0x24,0xF4,0x54,0x54,0x54,0xFF,0x54,0x55,0x56,0xF4,0x04,0x00,//博18
//  310         0x00,0x00,0xFF,0x00,0x08,0x0B,0x19,0x69,0x09,0x0B,0x49,0x89,0x7D,0x0B,0x08,0x00,
//  311         0x00,0xFE,0x02,0x22,0xDA,0x06,0x00,0xFC,0x04,0x04,0x04,0x04,0x04,0xFC,0x00,0x00,//阳19
//  312         0x00,0xFF,0x08,0x10,0x08,0x07,0x00,0xFF,0x41,0x41,0x41,0x41,0x41,0xFF,0x00,0x00,
//  313 };
//  314 
//  315 #define   OLED_NUM            4
//  316 
//  317 /**
//  318  *  灯控制块
//  319  */
//  320 typedef struct oled_control_block
//  321 {
//  322     char  state;
//  323     char  openflag;
//  324     char  charrorflag;
//  325 }OCB;
//  326 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
//  327 static OCB ocb_table[OLED_NUM];
ocb_table:
        DS8 12
//  328 

        SECTION `.data`:DATA:REORDER:NOROOT(2)
        DATA
//  329 GPIO_InitTypeDef gl_gpio_oled_sclk = {OLED_SCLK_PORT, OLED_SCLK_PIN, IRQC_DIS, DIR_OUTPUT, OUTPUT_L};
gl_gpio_oled_sclk:
        DC32 400FF100H, 4096, 0
        DC8 1, 0, 0, 0, 0, 0, 0, 0

        SECTION `.data`:DATA:REORDER:NOROOT(2)
        DATA
//  330 GPIO_InitTypeDef gl_gpio_oled_sdin = {OLED_SDIN_PORT, OLED_SDIN_PIN, IRQC_DIS, DIR_OUTPUT, OUTPUT_L};
gl_gpio_oled_sdin:
        DC32 400FF100H, 2048, 0
        DC8 1, 0, 0, 0, 0, 0, 0, 0

        SECTION `.data`:DATA:REORDER:NOROOT(2)
        DATA
//  331 GPIO_InitTypeDef gl_gpio_oled_dc   = {OLED_DC_PORT,   OLED_DC_PIN, IRQC_DIS, DIR_OUTPUT, OUTPUT_L};
gl_gpio_oled_dc:
        DC32 400FF100H, 256, 0
        DC8 1, 0, 0, 0, 0, 0, 0, 0

        SECTION `.data`:DATA:REORDER:NOROOT(2)
        DATA
//  332 GPIO_InitTypeDef gl_gpio_oled_rst  = {OLED_RST_PORT,  OLED_RST_PIN, IRQC_DIS, DIR_OUTPUT, OUTPUT_L};
gl_gpio_oled_rst:
        DC32 400FF100H, 512, 0
        DC8 1, 0, 0, 0, 0, 0, 0, 0
//  333 
//  334 #define   INDEX_OLED(oled_no)    ((uint8)(oled_no))
//  335 #define   get_lgcb(oled_no)      (&(ocb_table[INDEX_OLED(oled_no)]))
//  336 
//  337 #define   OLED_NO_GET(oledchar)    (oledchar & 0x0000ffff)
//  338 #define   OLED_PORT_GET(oledchar)  (PORT_NO_GET(oledchar >> 16))
//  339 #define   OLED_PIN_GET(oledchar)   (PIN_NO_GET(oledchar >> 16))
//  340 
//  341 #define   initSCLK_DDR()   (LPLD_GPIO_Init(gl_gpio_oled_sclk))
//  342 #define   initSDIN_DDR()   (LPLD_GPIO_Init(gl_gpio_oled_sdin))
//  343 #define   initDC_DDR()     (LPLD_GPIO_Init(gl_gpio_oled_dc))
//  344 #define   initRST_DDR()    (LPLD_GPIO_Init(gl_gpio_oled_rst))
//  345 
//  346 #define   OLED_SCLK(x)          LPLD_GPIO_Output_b(OLED_SCLK_PORT,OLED_SCLK_NUM,(x))
//  347 #define   OLED_SDIN(x)          LPLD_GPIO_Output_b(OLED_SDIN_PORT,OLED_SDIN_NUM,(x))
//  348 #define   OLED_DC(x)            LPLD_GPIO_Output_b(OLED_DC_PORT,OLED_DC_NUM,(x))
//  349 #define   OLED_RST(x)           LPLD_GPIO_Output_b(OLED_RST_PORT,OLED_RST_NUM,(x))
//  350 
//  351 //static char oled_open_port(char oledchar); //不知道干嘛的
//  352 
//  353 /**
//  354  *    @brief   oled_pin_init
//  355  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  356 void oled_pin_init(void)
//  357 {
oled_pin_init:
        PUSH     {R7,LR}
//  358     uint8 i;
//  359     OCB *p_lgcb;
//  360 
//  361     for (p_lgcb = ocb_table, i = 0; i < OLED_NUM; p_lgcb++, i++)
        LDR.W    R1,??DataTable12
        MOVS     R0,#+0
        B.N      ??oled_pin_init_0
//  362     {
//  363         p_lgcb->openflag  = false;
??oled_pin_init_1:
        MOVS     R2,#+0
        STRB     R2,[R1, #+1]
//  364         p_lgcb->charrorflag = E_SYS;
        MOVS     R2,#+1
        STRB     R2,[R1, #+2]
//  365     }
        ADDS     R1,R1,#+3
        ADDS     R0,R0,#+1
??oled_pin_init_0:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+4
        BLT.N    ??oled_pin_init_1
//  366 
//  367     /* 打开IO口 */
//  368 
//  369     initSCLK_DDR();
        LDR.W    R1,??DataTable12_1
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//  370     OLED_SCLK(LOW);
        MOVS     R2,#+0
        MOVS     R1,#+12
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  371     initSDIN_DDR();
        LDR.W    R1,??DataTable12_3
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//  372     OLED_SDIN(LOW);
        MOVS     R2,#+0
        MOVS     R1,#+11
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  373     initDC_DDR();
        LDR.W    R1,??DataTable12_4
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//  374     OLED_DC(LOW);
        MOVS     R2,#+0
        MOVS     R1,#+8
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  375     initRST_DDR();
        LDR.W    R1,??DataTable12_5
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//  376     OLED_RST(LOW);
        MOVS     R2,#+0
        MOVS     R1,#+9
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  377 }
        POP      {R0,PC}          ;; return
//  378 
//  379 
//  380 
//  381 
//  382 /**
//  383  *    @brief   打开light端口
//  384  *
//  385  *    @param   oledchar  灯的char号
//  386  *
//  387  *    @return  charcd 错误码
//  388  */
//  389 /*static char oled_open_port(char oledchar)
//  390 {
//  391     OCB *p_lgcb;
//  392     char charcd = 0;
//  393     char oled_no;
//  394 
//  395     oled_no = OLED_NO_GET(oledchar);
//  396 
//  397     if (!(0 <= oled_no && oled_no < OLED_NUM))
//  398     {
//  399         return (E_char);
//  400     }
//  401     p_lgcb = get_lgcb(oled_no);
//  402 
//  403     if (p_lgcb->openflag)
//  404     {
//  405         charcd = E_OBJ;
//  406     }
//  407     else
//  408     {
//  409         gpio_init(OLED_PORT_GET(oledchar), OLED_PIN_GET(oledchar), OUT_PUT,
//  410                 0);
//  411 
//  412         p_lgcb->openflag = true;
//  413         p_lgcb->state = HIGH_POWchar;
//  414 
//  415         charcd = E_OK;
//  416     }
//  417 
//  418     return (charcd);
//  419 }*/
//  420 
//  421 /**
//  422  *    @brief   写一个字节数据
//  423  *
//  424  *    @param   uint8 uc_data
//  425  */
//  426 //低位在一竖的顶部 高位在底部

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  427 void oled_write_data(uint8 uc_data)
//  428 {
oled_write_data:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  429     uint8 i = 8;
        MOVS     R5,#+8
//  430     //gpio_set(OLED_PORT_GET(OLED_DC),OLED_PIN_GET(OLED_DC),1);       //DC = 1,write data
//  431     //gpio_set(OLED_PORT_GET(OLED_SCLK),OLED_PIN_GET(OLED_SCLK),0);
//  432     OLED_DC(HIGH);
        MOVS     R2,#+1
        MOVS     R1,#+8
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  433     OLED_SCLK(LOW);
        MOVS     R2,#+0
        MOVS     R1,#+12
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
        B.N      ??oled_write_data_0
//  434 
//  435     while (i--)
//  436     {
//  437         if (uc_data & 0x80)
//  438         {
//  439         	//gpio_set(OLED_PORT_GET(OLED_SDIN),OLED_PIN_GET(OLED_SDIN),1);
//  440         	OLED_SDIN(HIGH);
//  441         }
//  442         else
//  443         {
//  444         	//gpio_set(OLED_PORT_GET(OLED_SDIN),OLED_PIN_GET(OLED_SDIN),0);
//  445         	OLED_SDIN(LOW);
??oled_write_data_1:
        MOVS     R2,#+0
        MOVS     R1,#+11
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  446         }
//  447         /* 普通I/O口模拟时钟信号 */
//  448         //gpio_set(OLED_PORT_GET(OLED_SCLK),OLED_PIN_GET(OLED_SCLK),1);
//  449         OLED_SCLK(HIGH);
??oled_write_data_2:
        MOVS     R2,#+1
        MOVS     R1,#+12
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  450         asm("nop");
        nop
//  451         //gpio_set(OLED_PORT_GET(OLED_SCLK),OLED_PIN_GET(OLED_SCLK),0);
//  452         OLED_SCLK(LOW);
        MOVS     R2,#+0
        MOVS     R1,#+12
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  453 
//  454         uc_data <<= 1;
        LSLS     R4,R4,#+1
??oled_write_data_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??oled_write_data_3
        LSLS     R0,R4,#+24
        BPL.N    ??oled_write_data_1
        MOVS     R2,#+1
        MOVS     R1,#+11
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
        B.N      ??oled_write_data_2
//  455     }
//  456     return;
??oled_write_data_3:
        POP      {R0,R4,R5,PC}    ;; return
//  457 }
//  458 
//  459 /**
//  460  *    @brief   写一个字节命令
//  461  *
//  462  *    @param   uint8 uc_cmd
//  463  */

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  464 void  oled_write_command(uint8 uc_cmd)
//  465 {
oled_write_command:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  466     uint8 i = 8;
        MOVS     R5,#+8
//  467     //gpio_set(OLED_PORT_GET(OLED_DC),OLED_PIN_GET(OLED_DC),0);       //DC = 0,write command
//  468     //gpio_set(OLED_PORT_GET(OLED_SCLK),OLED_PIN_GET(OLED_SCLK),0);
//  469     OLED_DC(LOW);
        MOVS     R2,#+0
        MOVS     R1,#+8
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  470     OLED_SCLK(LOW);
        MOVS     R2,#+0
        MOVS     R1,#+12
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
        B.N      ??oled_write_command_0
//  471 
//  472     while (i--)
//  473     {
//  474         if (uc_cmd & 0x80)
//  475         {
//  476         	//gpio_set(OLED_PORT_GET(OLED_SDIN),OLED_PIN_GET(OLED_SDIN),1);
//  477             OLED_SDIN(HIGH);
//  478         }
//  479         else
//  480         {
//  481         	//gpio_set(OLED_PORT_GET(OLED_SDIN),OLED_PIN_GET(OLED_SDIN),0);
//  482             OLED_SDIN(LOW);
??oled_write_command_1:
        MOVS     R2,#+0
        MOVS     R1,#+11
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  483         }
//  484         /* 普通I/O口模拟时钟信号 */
//  485         //gpio_set(OLED_PORT_GET(OLED_SCLK),OLED_PIN_GET(OLED_SCLK),1);
//  486         OLED_SCLK(HIGH);
??oled_write_command_2:
        MOVS     R2,#+1
        MOVS     R1,#+12
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  487         asm("nop");
        nop
//  488         //gpio_set(OLED_PORT_GET(OLED_SCLK),OLED_PIN_GET(OLED_SCLK),0);
//  489         OLED_SCLK(LOW);
        MOVS     R2,#+0
        MOVS     R1,#+12
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
//  490         uc_cmd <<= 1;
        LSLS     R4,R4,#+1
??oled_write_command_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??oled_write_command_3
        LSLS     R0,R4,#+24
        BPL.N    ??oled_write_command_1
        MOVS     R2,#+1
        MOVS     R1,#+11
        LDR.W    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
        B.N      ??oled_write_command_2
//  491     }
//  492     return;
??oled_write_command_3:
        POP      {R0,R4,R5,PC}    ;; return
//  493 }
//  494 
//  495 
//  496 /**
//  497  *  @ brief   oled_set_pos
//  498  *
//  499  *  @ param   uc_posx   列
//  500  *            uc_posy   页
//  501  *
//  502  *	@ note    设置坐标
//  503  *
//  504  *	@ return  none
//  505  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  506 void oled_set_pos(uint8 uc_posx, uint8 uc_posy)
//  507 {
oled_set_pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  508     oled_write_command(0xb0 + uc_posy);
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  509     oled_write_command(((uc_posx & 0xf0) >> 4) | 0x10);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  510     oled_write_command((uc_posx & 0x0f) | 0x00);
        ANDS     R0,R4,#0xF
        BL       oled_write_command
//  511 }
        POP      {R4,PC}          ;; return
//  512 
//  513 
//  514 /**
//  515  *  @ brief   SetStartColumn
//  516  *
//  517  *  @ param   a     起始列地址
//  518  *            b     起始行地址
//  519  *
//  520  *	@ note    对于 page Addressing Mode  设定开始的列
//  521  *	          每一页有128列，开始列=16*Highchar Column + Lowchar Column
//  522  *
//  523  *	@ return  none
//  524  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  525 void SetStartColumn(uint8 uc_data)
//  526 {
SetStartColumn:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  527     oled_write_command(0x00+uc_data % 16);   // Set Lowchar Column Start Address for Page Addressing Mode
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,#+16
        SDIV     R1,R4,R0
        MLS      R0,R0,R1,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  528                                              // Default => 0x00
//  529     oled_write_command(0x10+uc_data / 16);   // Set Highchar Column Start Address for Page Addressing Mode
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,#+16
        SDIV     R0,R4,R0
        ADDS     R0,R0,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  530                                              // Default => 0x10
//  531 }
        POP      {R4,PC}          ;; return
//  532 
//  533 /**
//  534  *  @ brief   SetColumnAddress
//  535  *
//  536  *  @ param   a     起始列地址
//  537  *            b     起始行地址
//  538  *
//  539  *	@ note    对于Horizontal Addressing Mode 设置起始列地址与结束列地址
//  540  *	          Set Column Address
//  541  *	          Default => 0x00 (Column Start Address)
//  542  *	          Default => 0x7F (Column End Address)
//  543  *
//  544  *	@ return  none
//  545  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  546 void SetColumnAddress(uint8 a, uint8 b)
//  547 {
SetColumnAddress:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  548     oled_write_command(0x21);        	   // Set Column Address
        MOVS     R0,#+33
        BL       oled_write_command
//  549     oled_write_command(a);           	   // Default => 0x00 (Column Start Address)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  550     oled_write_command(b);           	   // Default => 0x7F (Column End Address)
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  551 }
        POP      {R0,R4,R5,PC}    ;; return
//  552 
//  553 /**
//  554  *  @ brief   SetPageAddress
//  555  *
//  556  *  @ param   a     起始页地址
//  557  *            b     起始页地址
//  558  *
//  559  *	@ note    对于Vchartical Addressing Mode 设置起始页地址与结束页地址
//  560  *	          Set Page Address
//  561  *	          Default => 0xB0 (0x00)
//  562  *	          Default => 0x07 (Page End Address)
//  563  *
//  564  *	@ return  none
//  565  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  566 void SetPageAddress(uint8 a, uint8 b)
//  567 {
SetPageAddress:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  568     oled_write_command(0x22);
        MOVS     R0,#+34
        BL       oled_write_command
//  569     oled_write_command(a);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  570     oled_write_command(b);
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  571 }
        POP      {R0,R4,R5,PC}    ;; return
//  572 
//  573 /**
//  574  *  @ brief   SetNop
//  575  *
//  576  *  @ param   uc_data
//  577  *
//  578  *	@ note    Set Page Start Address for Page Addressing Mode
//  579  *	          Default => 0xB0 (0x00)
//  580  *
//  581  *	@ return  none
//  582  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  583 void SetStartPage(uint8 uc_data)
//  584 {
SetStartPage:
        PUSH     {R7,LR}
//  585     oled_write_command(0xB0|uc_data);
        ORRS     R0,R0,#0xB0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  586 }
        POP      {R0,PC}          ;; return
//  587 
//  588 /**
//  589  *  @ brief   SetNop
//  590  *
//  591  *  @ param   none
//  592  *
//  593  *	@ note    Command for No Opcharation
//  594  *
//  595  *	@ return  none
//  596  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  597 void SetNop(void)
//  598 {
SetNop:
        PUSH     {R7,LR}
//  599     oled_write_command(0xE3);
        MOVS     R0,#+227
        BL       oled_write_command
//  600 }
        POP      {R0,PC}          ;; return
//  601 
//  602 
//  603 /**
//  604  *  @ brief   SetInvcharseDisplay
//  605  *
//  606  *  @ param   uc_data
//  607  *
//  608  *	@ note    全屏写入同一个字符 清屏
//  609  *
//  610  *	@ return  none
//  611  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  612 void oled_fill(char uc_data)
//  613 {
oled_fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  614     uint8 uc_page,uc_column;
//  615 
//  616     for(uc_page = 0; uc_page < 8; uc_page++)
        MOVS     R5,#+0
        B.N      ??oled_fill_0
//  617     {
//  618         for(uc_column = 0; uc_column < 128; uc_column++)
//  619         {
//  620             oled_write_data(uc_data);
??oled_fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_data
//  621         }
        ADDS     R6,R6,#+1
??oled_fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BLT.N    ??oled_fill_1
        ADDS     R5,R5,#+1
??oled_fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??oled_fill_3
        MOVS     R6,#+0
        B.N      ??oled_fill_2
//  622     }
//  623 }
??oled_fill_3:
        POP      {R4-R6,PC}       ;; return
//  624 
//  625 /**
//  626  *  @ brief   SetInvcharseDisplay
//  627  *
//  628  *  @ param   uc_data
//  629  *
//  630  *	@ note    Set Invcharse Display On/Off
//  631  *	          Default => 0xA6
//  632  *	          0xA6 (0x00) => Normal Display
//  633  *	          0xA7 (0x01) => Invcharse Display On
//  634  *
//  635  *	@ return  none
//  636  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  637 void SetInvcharseDisplay(uint8 uc_data)
//  638 {
SetInvcharseDisplay:
        PUSH     {R7,LR}
//  639     oled_write_command(0xA6|uc_data);
        ORRS     R0,R0,#0xA6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  640 }
        POP      {R0,PC}          ;; return
//  641 
//  642 /**
//  643  *  @ brief   SetEntireDisplay
//  644  *
//  645  *  @ param   uc_data
//  646  *
//  647  *	@ note    Set Entire Display On / Off
//  648  *	          Default => 0xA4
//  649  *	          0xA4 (0x00) => Normal Display
//  650  *	          0xA5 (0x01) => Entire Display On
//  651  *
//  652  *	@ return  none
//  653  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  654 void SetEntireDisplay(uint8 uc_data)
//  655 {
SetEntireDisplay:
        PUSH     {R7,LR}
//  656     oled_write_command(0xA4|uc_data);
        ORRS     R0,R0,#0xA4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  657 }
        POP      {R0,PC}          ;; return
//  658 
//  659 /**
//  660  *  @ brief   SetVCOMH
//  661  *
//  662  *  @ param   uc_data
//  663  *
//  664  *	@ note    Set VCOMH Deselect Level
//  665  *	          Default => 0x20 (0.77*VCC)
//  666  *
//  667  *	@ return  none
//  668  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  669 void SetVCOMH(uint8 uc_data)
//  670 {
SetVCOMH:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  671     oled_write_command(0xDB);         // Set VCOMH Deselect Level
        MOVS     R0,#+219
        BL       oled_write_command
//  672     oled_write_command(uc_data);      // Default => 0x20 (0.77*VCC)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  673 }
        POP      {R4,PC}          ;; return
//  674 
//  675 /**
//  676  *  @ brief   SetPrechargePchariod
//  677  *
//  678  *  @ param   uc_data
//  679  *
//  680  *	@ note    Set Pre-Charge Pchariod
//  681  *	          Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
//  682  *	          D[3:0] => Phase 1 Pchariod in 1~15 Display Clocks
//  683  *	          D[7:4] => Phase 2 Pchariod in 1~15 Display Clocks
//  684  *
//  685  *	@ return  none
//  686  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  687 void SetPrechargePchariod(uint8 uc_data)
//  688 {
SetPrechargePchariod:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  689     oled_write_command(0xD9);
        MOVS     R0,#+217
        BL       oled_write_command
//  690     oled_write_command(uc_data);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  691 }
        POP      {R4,PC}          ;; return
//  692 
//  693 /**
//  694  *  @ brief   SetContrastControl
//  695  *
//  696  *  @ param   uc_data
//  697  *
//  698  *	@ note    Set Contrast Control
//  699  *	          Default => 0x7F
//  700  *
//  701  *	@ return  none
//  702  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  703 void SetContrastControl(uint8 uc_data)
//  704 {
SetContrastControl:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  705     oled_write_command(0x81);
        MOVS     R0,#+129
        BL       oled_write_command
//  706     oled_write_command(uc_data);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  707 }
        POP      {R4,PC}          ;; return
//  708 
//  709 /**
//  710  *  @ brief   SetCommonConfig
//  711  *
//  712  *  @ param   uc_data
//  713  *
//  714  *	@ note    Set COM Pins Hardware Configuration
//  715  *	          Default => 0x12 (0x10)
//  716  *	          Altcharnative COM Pin Configuration
//  717  *	          Disable COM Left/Right Re-Map
//  718  *
//  719  *	@ return  none
//  720  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  721 void SetCommonConfig(uint8 uc_data)
//  722 {
SetCommonConfig:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  723     oled_write_command(0xDA);
        MOVS     R0,#+218
        BL       oled_write_command
//  724     oled_write_command(0x02|uc_data);
        ORRS     R0,R4,#0x2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  725 }
        POP      {R4,PC}          ;; return
//  726 
//  727 /**
//  728  *  @ brief   SetCommonRemap
//  729  *
//  730  *  @ param   uc_data
//  731  *
//  732  *	@ note    Set COM Output Scan Direction
//  733  *	          Default => 0xC0
//  734  *	          0xC0 (0x00) => Scan from COM0  to 63
//  735  *	          0xC8 (0x08) => Scan from COM63 to 0
//  736  *
//  737  *	@ return  none
//  738  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  739 void SetCommonRemap(uint8 uc_data)
//  740 {
SetCommonRemap:
        PUSH     {R7,LR}
//  741     oled_write_command(0xC0|uc_data);
        ORRS     R0,R0,#0xC0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  742 }
        POP      {R0,PC}          ;; return
//  743 
//  744 /**
//  745  *  @ brief   SetSegmentRemap
//  746  *
//  747  *  @ param   uc_data
//  748  *
//  749  *	@ note    Set Segment Re-Map
//  750  *	          Default => 0xA0
//  751  *	          0xA0 (0x00) => Column Address 0 Mapped to SEG0
//  752  *	          0xA1 (0x01) => Column Address 0 Mapped to SEG127
//  753  *
//  754  *	@ return  none
//  755  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  756 void SetSegmentRemap(uint8 uc_data)
//  757 {
SetSegmentRemap:
        PUSH     {R7,LR}
//  758     oled_write_command(0xA0|uc_data);
        ORRS     R0,R0,#0xA0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  759 }
        POP      {R0,PC}          ;; return
//  760 
//  761 /**
//  762  *  @ brief   SetAddressingMode
//  763  *
//  764  *  @ param   uc_data
//  765  *
//  766  *	@ note    Set Memory Addressing Mode
//  767  *	          0x00 => Horizontal Addressing Mode
//  768  *	          0x01 => Vchartical Addressing Mode
//  769  *	          0x02 => Page Addressing Mode
//  770  *
//  771  *	@ return  none
//  772  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  773 void SetAddressingMode(uint8 uc_data)
//  774 {
SetAddressingMode:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  775     oled_write_command(0x20);
        MOVS     R0,#+32
        BL       oled_write_command
//  776     oled_write_command(uc_data);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  777 }
        POP      {R4,PC}          ;; return
//  778 
//  779 /**
//  780  *  @ brief   SetChargePump
//  781  *
//  782  *  @ param   uc_data
//  783  *
//  784  *	@ note    Set Charge Pump
//  785  *	          0x10 (0x00) => Disable Charge Pump
//  786  *	          0x14 (0x04) => Enable Charge Pump
//  787  *
//  788  *	@ return  none
//  789  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  790 void SetChargePump(uint8 uc_data)
//  791 {
SetChargePump:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  792     oled_write_command(0x8D);
        MOVS     R0,#+141
        BL       oled_write_command
//  793     oled_write_command(0x10|uc_data);
        ORRS     R0,R4,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  794 }
        POP      {R4,PC}          ;; return
//  795 
//  796 /**
//  797  *  @ brief   SetStartLine
//  798  *
//  799  *  @ param   uc_data
//  800  *
//  801  *	@ note    Set Display Start Line
//  802  *	          Default => 0x40 (0x00)
//  803  *
//  804  *	@ return  none
//  805  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  806 void SetStartLine(uint8 uc_data)
//  807 {
SetStartLine:
        PUSH     {R7,LR}
//  808     oled_write_command(0x40|uc_data);
        ORRS     R0,R0,#0x40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  809 }
        POP      {R0,PC}          ;; return
//  810 
//  811 /**
//  812  *  @ brief   SetDisplayOffset
//  813  *
//  814  *  @ param   uc_data
//  815  *
//  816  *	@ note    Set Display Offset
//  817  *	          Default => 0x00
//  818  *
//  819  *	@ return  none
//  820  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  821 void SetDisplayOffset(uint8 uc_data)
//  822 {
SetDisplayOffset:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  823     oled_write_command(0xD3);
        MOVS     R0,#+211
        BL       oled_write_command
//  824     oled_write_command(uc_data);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  825 }
        POP      {R4,PC}          ;; return
//  826 
//  827 /**
//  828  *  @ brief   SetMultiplexRatio
//  829  *
//  830  *  @ param   uc_data
//  831  *
//  832  *	@ note    Set Multiplex Ratio
//  833  *	          Default => 0x3F (1/64 Duty)
//  834  *
//  835  *	@ return  none
//  836  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  837 void SetMultiplexRatio(uint8 uc_data)
//  838 {
SetMultiplexRatio:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  839     oled_write_command(0xA8);
        MOVS     R0,#+168
        BL       oled_write_command
//  840     oled_write_command(uc_data);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  841 }
        POP      {R4,PC}          ;; return
//  842 
//  843 /**
//  844  *  @ brief   SetDisplayClock
//  845  *
//  846  *  @ param   uc_data
//  847  *
//  848  *	@ note    Set Display Clock Divchare Ratio / Oscillator Frequency
//  849  *	          D[3:0] => Display Clock Divcharchar
//  850               D[7:4] => Oscillator Frequency
//  851  *
//  852  *	@ return  none
//  853  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  854 void SetDisplayClock(uint8 uc_data)
//  855 {
SetDisplayClock:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  856     oled_write_command(0xD5);
        MOVS     R0,#+213
        BL       oled_write_command
//  857     oled_write_command(uc_data);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  858 }
        POP      {R4,PC}          ;; return
//  859 
//  860 /**
//  861  *  @ brief   SetDisplayOnOff
//  862  *
//  863  *  @ param   uc_data
//  864  *
//  865  *	@ note    Set Display On/Off
//  866  *	          0xAE (0x00) => Display Off  Default
//  867               0xAF (0x01) => Display On
//  868  *
//  869  *	@ return  none
//  870  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  871 void SetDisplayOnOff(uint8 uc_data)
//  872 {
SetDisplayOnOff:
        PUSH     {R7,LR}
//  873     oled_write_command(0xAE|uc_data);
        ORRS     R0,R0,#0xAE
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_command
//  874 }
        POP      {R0,PC}          ;; return
//  875 
//  876 
//  877 /**
//  878  *  @ brief   oled_display_6x8char
//  879  *
//  880  *  @ param   uint8 uc_posx  显示的横坐标0~122
//  881  * 			  uint8 uc_posy  页范围0～7
//  882  *    		  uint8 uc_data  显示的字符
//  883  *
//  884  *	@ note    display a charactchar
//  885  *
//  886  *	@ return  none
//  887  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  888 void oled_display_6x8char(uint8 uc_posx, uint8 uc_posy, char uc_data)
//  889 {
oled_display_6x8char:
        PUSH     {R3-R5,LR}
        MOVS     R4,R2
//  890     uint8 i, uc_dataTmp;
//  891 
//  892     uc_dataTmp = uc_data;
//  893     if(uc_posx > 122)
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+123
        BLT.N    ??oled_display_6x8char_0
//  894     {
//  895         uc_posx = 0;
        MOVS     R0,#+0
//  896         uc_posy ++;
        ADDS     R1,R1,#+1
//  897     }
//  898 
//  899     oled_set_pos(uc_posx, uc_posy);
??oled_display_6x8char_0:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
//  900 
//  901     for(i = 0; i < 6; i++)
        MOVS     R5,#+0
        B.N      ??oled_display_6x8char_1
//  902     {
//  903         oled_write_data(F6x8[uc_dataTmp][i]);
??oled_display_6x8char_2:
        LDR.W    R0,??DataTable14
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R1,#+6
        MUL      R1,R1,R4
        ADD      R0,R0,R1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LDRB     R0,[R0, R5]
        BL       oled_write_data
//  904     }
        ADDS     R5,R5,#+1
??oled_display_6x8char_1:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+6
        BLT.N    ??oled_display_6x8char_2
//  905 }
        POP      {R0,R4,R5,PC}    ;; return
//  906 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  907 void oled_display_16x8char(uint8 uc_posx, uint8 uc_posy, char uc_data)
//  908 {
oled_display_16x8char:
        PUSH     {R3-R7,LR}
        MOVS     R6,R0
        MOVS     R7,R1
        MOVS     R5,R2
//  909 	uint8 i, uc_dataTmp;
//  910 
//  911     uc_dataTmp = uc_data;
//  912     if(uc_posx > 122)
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+123
        BLT.N    ??oled_display_16x8char_0
//  913     {
//  914         uc_posx = 0;
        MOVS     R6,#+0
//  915         uc_posy ++;
        ADDS     R7,R7,#+1
//  916     }
//  917 
//  918     oled_set_pos(uc_posx, uc_posy);
??oled_display_16x8char_0:
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
//  919 
//  920     for(i = 0; i < 8; i++)
        MOVS     R4,#+0
        B.N      ??oled_display_16x8char_1
//  921     {
//  922         oled_write_data(OLED_ASCII16X8[uc_dataTmp][i]);
??oled_display_16x8char_2:
        LDR.W    R0,??DataTable14_1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSLS     R1,R5,#+4
        ADD      R0,R0,R1
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LDRB     R0,[R0, R4]
        BL       oled_write_data
//  923     }
        ADDS     R4,R4,#+1
??oled_display_16x8char_1:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BLT.N    ??oled_display_16x8char_2
//  924 
//  925 	oled_set_pos(uc_posx, uc_posy+1);
        ADDS     R1,R7,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
//  926 
//  927     for(i = 8; i < 16; i++)
        MOVS     R4,#+8
        B.N      ??oled_display_16x8char_3
//  928     {
//  929         oled_write_data(OLED_ASCII16X8[uc_dataTmp][i]);
??oled_display_16x8char_4:
        LDR.W    R0,??DataTable14_1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSLS     R1,R5,#+4
        ADD      R0,R0,R1
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LDRB     R0,[R0, R4]
        BL       oled_write_data
//  930     }
        ADDS     R4,R4,#+1
??oled_display_16x8char_3:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+16
        BLT.N    ??oled_display_16x8char_4
//  931 }
        POP      {R0,R4-R7,PC}    ;; return
//  932 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  933 void oled_display_16x8char_hl(uint8 uc_posx, uint8 uc_posy, char uc_data)
//  934 {
oled_display_16x8char_hl:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R7,R2
//  935     uint8 i, uc_dataTmp;
//  936 
//  937     uc_dataTmp = uc_data;
//  938     if(uc_posx > 122)
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+123
        BLT.N    ??oled_display_16x8char_hl_0
//  939     {
//  940         uc_posx = 0;
        MOVS     R4,#+0
//  941         uc_posy ++;
        ADDS     R5,R5,#+1
//  942     }
//  943 
//  944     oled_set_pos(uc_posx, uc_posy);
??oled_display_16x8char_hl_0:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
//  945 
//  946     for(i = 0; i < 8; i++)
        MOVS     R6,#+0
        B.N      ??oled_display_16x8char_hl_1
//  947     {
//  948         oled_write_data(~OLED_ASCII16X8[uc_dataTmp][i]);
??oled_display_16x8char_hl_2:
        LDR.W    R0,??DataTable14_1
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        ADD      R0,R0,R1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LDRB     R0,[R0, R6]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_data
//  949     }
        ADDS     R6,R6,#+1
??oled_display_16x8char_hl_1:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BLT.N    ??oled_display_16x8char_hl_2
//  950 
//  951 	oled_set_pos(uc_posx, uc_posy+1);
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
//  952 
//  953     for(i = 8; i < 16; i++)
        MOVS     R6,#+8
        B.N      ??oled_display_16x8char_hl_3
//  954     {
//  955         oled_write_data(~OLED_ASCII16X8[uc_dataTmp][i]);
??oled_display_16x8char_hl_4:
        LDR.W    R0,??DataTable14_1
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        ADD      R0,R0,R1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LDRB     R0,[R0, R6]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_data
//  956     }
        ADDS     R6,R6,#+1
??oled_display_16x8char_hl_3:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+16
        BLT.N    ??oled_display_16x8char_hl_4
//  957 }
        POP      {R0,R4-R7,PC}    ;; return
//  958 /**
//  959  *  @ brief   oled_display_6x8str
//  960  *
//  961  *  @ param   uint8 uc_posx       显示的横坐标0~122
//  962  *			  uint8 uc_posy       页范围0～7
//  963  *    		  uint8 uc_dataStr[]  显示的字符串
//  964  *
//  965  *	@ note    display a string
//  966  *
//  967  *	@ return  none
//  968  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  969 void oled_display_6x8str(uint8 uc_posx, uint8 uc_posy, char uc_dataStr[])
//  970 {
oled_display_6x8str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  971     uint8 i, j, uc_dataTmp;
//  972 
//  973     //保证图像处理优先级
//  974     if ((guc_camera_image_Ok == 1))// && (g_carInfo.u8SlaveComFlag == 0))
        LDR.W    R0,??DataTable14_2
        LDRB     R0,[R0, #+0]
        CMP      R0,#+1
        BEQ.N    ??oled_display_6x8str_0
//  975     {
//  976         return;
//  977     }
//  978     
//  979     for (j = 0; uc_dataStr[j] != '\0'; j++)
??oled_display_6x8str_1:
        MOVS     R7,#+0
        B.N      ??oled_display_6x8str_2
//  980     {
//  981         uc_dataTmp = uc_dataStr[j];
//  982 
//  983         if(uc_posx > 122)
//  984         {
//  985             uc_posx = 0;
//  986             uc_posy++;
//  987         }
//  988 
//  989         oled_set_pos(uc_posx,uc_posy);
//  990 
//  991         for(i = 0; i < 6; i++)
//  992         {
//  993             oled_write_data(F6x8[uc_dataTmp][i]);
??oled_display_6x8str_3:
        LDR.W    R0,??DataTable14
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        MOVS     R1,#+6
        MUL      R1,R1,R9
        ADD      R0,R0,R1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R0, R8]
        BL       oled_write_data
//  994         }
        ADDS     R8,R8,#+1
??oled_display_6x8str_4:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BLT.N    ??oled_display_6x8str_3
//  995 
//  996         uc_posx += 6;
        ADDS     R4,R4,#+6
        ADDS     R7,R7,#+1
??oled_display_6x8str_2:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R6, R7]
        CMP      R0,#+0
        BEQ.N    ??oled_display_6x8str_5
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R9,[R6, R7]
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+123
        BLT.N    ??oled_display_6x8str_6
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??oled_display_6x8str_6:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
        MOVS     R8,#+0
        B.N      ??oled_display_6x8str_4
//  997     }
//  998 
//  999     return;
??oled_display_6x8str_5:
??oled_display_6x8str_0:
        POP      {R0,R4-R9,PC}    ;; return
// 1000 }
// 1001 
// 1002 /****************
// 1003  * 显示16x8的字符串
// 1004  *****************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1005 void oled_display_16x8str(uint8 uc_posx, uint8 uc_posy, char uc_dataStr[])
// 1006 {
oled_display_16x8str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1007     uint8 i, j, uc_dataTmp;
// 1008 
// 1009     for (j = 0; uc_dataStr[j] != '\0'; j++)
        MOVS     R7,#+0
        B.N      ??oled_display_16x8str_0
// 1010     {
// 1011         uc_dataTmp = uc_dataStr[j];
// 1012 
// 1013         if(uc_posx > 120)
// 1014         {
// 1015             uc_posx = 0;
// 1016             uc_posy+=2;
// 1017         }
// 1018 
// 1019         oled_set_pos(uc_posx,uc_posy);
// 1020 
// 1021         for(i = 0; i < 8; i++)
// 1022         {
// 1023             oled_write_data(OLED_ASCII16X8[uc_dataTmp][i]);
// 1024         }
// 1025 
// 1026 		oled_set_pos(uc_posx,uc_posy+1);
// 1027 
// 1028         for(i = 8; i < 16; i++)
// 1029         {
// 1030             oled_write_data(OLED_ASCII16X8[uc_dataTmp][i]);
??oled_display_16x8str_1:
        LDR.W    R0,??DataTable14_1
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LSLS     R1,R9,#+4
        ADD      R0,R0,R1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R0, R8]
        BL       oled_write_data
// 1031         }
        ADDS     R8,R8,#+1
??oled_display_16x8str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+16
        BLT.N    ??oled_display_16x8str_1
// 1032 
// 1033         uc_posx += 8;
        ADDS     R4,R4,#+8
        ADDS     R7,R7,#+1
??oled_display_16x8str_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R6, R7]
        CMP      R0,#+0
        BEQ.N    ??oled_display_16x8str_3
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R9,[R6, R7]
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??oled_display_16x8str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+2
??oled_display_16x8str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
        MOVS     R8,#+0
        B.N      ??oled_display_16x8str_5
??oled_display_16x8str_6:
        LDR.W    R0,??DataTable14_1
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LSLS     R1,R9,#+4
        ADD      R0,R0,R1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R0, R8]
        BL       oled_write_data
        ADDS     R8,R8,#+1
??oled_display_16x8str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??oled_display_16x8str_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
        MOVS     R8,#+8
        B.N      ??oled_display_16x8str_2
// 1034     }
// 1035 
// 1036     return;
??oled_display_16x8str_3:
        POP      {R0,R4-R9,PC}    ;; return
// 1037 }
// 1038 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1039 void oled_display_16x8str_hl(uint8 uc_posx, uint8 uc_posy, char uc_dataStr[])
// 1040 {
oled_display_16x8str_hl:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1041     uint8 i, j, uc_dataTmp;
// 1042 
// 1043     for (j = 0; uc_dataStr[j] != '\0'; j++)
        MOVS     R7,#+0
        B.N      ??oled_display_16x8str_hl_0
// 1044     {
// 1045         uc_dataTmp = uc_dataStr[j];
// 1046 
// 1047         if(uc_posx > 120)
// 1048         {
// 1049             uc_posx = 0;
// 1050             uc_posy+=2;
// 1051         }
// 1052 
// 1053         oled_set_pos(uc_posx,uc_posy);
// 1054 
// 1055         for(i = 0; i < 8; i++)
// 1056         {
// 1057             oled_write_data(~OLED_ASCII16X8[uc_dataTmp][i]);
// 1058         }
// 1059 
// 1060 		oled_set_pos(uc_posx,uc_posy+1);
// 1061 
// 1062         for(i = 8; i < 16; i++)
// 1063         {
// 1064             oled_write_data(~OLED_ASCII16X8[uc_dataTmp][i]);
??oled_display_16x8str_hl_1:
        LDR.W    R0,??DataTable14_1
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LSLS     R1,R9,#+4
        ADD      R0,R0,R1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R0, R8]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_data
// 1065         }
        ADDS     R8,R8,#+1
??oled_display_16x8str_hl_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+16
        BLT.N    ??oled_display_16x8str_hl_1
// 1066 
// 1067         uc_posx += 8;
        ADDS     R4,R4,#+8
        ADDS     R7,R7,#+1
??oled_display_16x8str_hl_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R6, R7]
        CMP      R0,#+0
        BEQ.N    ??oled_display_16x8str_hl_3
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R9,[R6, R7]
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??oled_display_16x8str_hl_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+2
??oled_display_16x8str_hl_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
        MOVS     R8,#+0
        B.N      ??oled_display_16x8str_hl_5
??oled_display_16x8str_hl_6:
        LDR.W    R0,??DataTable14_1
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LSLS     R1,R9,#+4
        ADD      R0,R0,R1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R0, R8]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_data
        ADDS     R8,R8,#+1
??oled_display_16x8str_hl_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??oled_display_16x8str_hl_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
        MOVS     R8,#+8
        B.N      ??oled_display_16x8str_hl_2
// 1068     }
// 1069 
// 1070     return;
??oled_display_16x8str_hl_3:
        POP      {R0,R4-R9,PC}    ;; return
// 1071 }
// 1072 /**
// 1073  *  @ brief   oled_print_char
// 1074  *
// 1075  *  @ param   uint8 uc_posx  显示的横坐标0~122
// 1076  *    		  uint8 uc_posy  页范围0～7
// 1077  *    		  int8  c_data   需要转化显示的数值 -128~127
// 1078  *
// 1079  *	@ note    将一个Char型数转换成3位数进行显示
// 1080  *
// 1081  *	@ return  none
// 1082  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1083 void oled_print_char(uint8 uc_posx, uint8 uc_posy, int8 c_data)
// 1084 {
oled_print_char:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1085     uint16 i, j, k, us_data;
// 1086 
// 1087     if(c_data < 0)
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        CMP      R6,#+0
        BPL.N    ??oled_print_char_0
// 1088     {
// 1089     	oled_display_6x8char(uc_posx, uc_posy, '-');
        MOVS     R2,#+45
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1090         us_data = (uint16)(-c_data);
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        RSBS     R6,R6,#+0
        B.N      ??oled_print_char_1
// 1091     }
// 1092     else
// 1093     {
// 1094     	oled_display_6x8char(uc_posx, uc_posy, '+');
??oled_print_char_0:
        MOVS     R2,#+43
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1095         us_data = (uint16)c_data;
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
// 1096     }
// 1097 
// 1098     i =  us_data / 100;
??oled_print_char_1:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOVS     R0,#+100
        SDIV     R0,R6,R0
// 1099     j = (us_data % 100) / 10;
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOVS     R1,#+100
        SDIV     R2,R6,R1
        MLS      R1,R1,R2,R6
        MOVS     R2,#+10
        SDIV     R7,R1,R2
// 1100     k =  us_data % 10;
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R6,R1
        MLS      R6,R1,R2,R6
// 1101 
// 1102     oled_display_6x8char(uc_posx+6, uc_posy, i+48);
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1103     oled_display_6x8char(uc_posx+12, uc_posy, j+48);
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1104     oled_display_6x8char(uc_posx+18, uc_posy, k+48);
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1105 
// 1106     return;
        POP      {R0,R4-R7,PC}    ;; return
// 1107 }
// 1108 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1109 void oled_print_16x8char(uint8 uc_posx, uint8 uc_posy, int8 c_data)
// 1110 {
oled_print_16x8char:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1111     uint16 i, j, k, us_data;
// 1112 
// 1113     if(c_data < 0)
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        CMP      R6,#+0
        BPL.N    ??oled_print_16x8char_0
// 1114     {
// 1115     	oled_display_16x8char(uc_posx, uc_posy, '-');
        MOVS     R2,#+45
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1116         us_data = (uint16)(-c_data);
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        RSBS     R6,R6,#+0
        B.N      ??oled_print_16x8char_1
// 1117     }
// 1118     else
// 1119     {
// 1120     	oled_display_16x8char(uc_posx, uc_posy, '+');
??oled_print_16x8char_0:
        MOVS     R2,#+43
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1121         us_data = (uint16)c_data;
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
// 1122     }
// 1123 
// 1124     i =  us_data / 100;
??oled_print_16x8char_1:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOVS     R0,#+100
        SDIV     R0,R6,R0
// 1125     j = (us_data % 100) / 10;
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOVS     R1,#+100
        SDIV     R2,R6,R1
        MLS      R1,R1,R2,R6
        MOVS     R2,#+10
        SDIV     R7,R1,R2
// 1126     k =  us_data % 10;
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R6,R1
        MLS      R6,R1,R2,R6
// 1127 
// 1128     oled_display_16x8char(uc_posx+8, uc_posy, i+48);
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1129     oled_display_16x8char(uc_posx+16, uc_posy, j+48);
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1130     oled_display_16x8char(uc_posx+24, uc_posy, k+48);
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1131 
// 1132     return;
        POP      {R0,R4-R7,PC}    ;; return
// 1133 }
// 1134 /**
// 1135  *  @ brief   oled_print_short
// 1136  *
// 1137  *  @ param   uint8 uc_posx  显示的横坐标0~122
// 1138  *   		  uint8 uc_posy  页范围0～7
// 1139  *  		  int8  s_data   需要转化显示的数值
// 1140  *
// 1141  *	@ note    将一个int16型数转换成5位数进行显示
// 1142  *
// 1143  *	@ return  none
// 1144  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1145 void oled_print_short(uint8 uc_posx, uint8 uc_posy, int16 s_data)
// 1146 {
oled_print_short:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R7,R2
// 1147     uint16 i, j, k, l, m, us_data;
// 1148 
// 1149     //保证图像处理优先级
// 1150     if ((guc_camera_image_Ok == 1))// && (g_carInfo.u8SlaveComFlag == 0))
        LDR.W    R0,??DataTable14_2
        LDRB     R0,[R0, #+0]
        CMP      R0,#+1
        BEQ.N    ??oled_print_short_0
// 1151     {
// 1152         return;
// 1153     }
// 1154     
// 1155     
// 1156     if(s_data < 0)
??oled_print_short_1:
        SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
        CMP      R7,#+0
        BPL.N    ??oled_print_short_2
// 1157     {
// 1158     	oled_display_6x8char(uc_posx,uc_posy,'-');
        MOVS     R2,#+45
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1159         us_data = (uint16)(-s_data);
        SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
        RSBS     R7,R7,#+0
        B.N      ??oled_print_short_3
// 1160     }
// 1161     else
// 1162     {
// 1163     	oled_display_6x8char(uc_posx,uc_posy,'+');
??oled_print_short_2:
        MOVS     R2,#+43
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1164         us_data = (uint16)s_data;
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
// 1165     }
// 1166 
// 1167     l =  us_data          / 10000;
??oled_print_short_3:
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        MOVW     R0,#+10000
        SDIV     R0,R7,R0
// 1168     m = (us_data % 10000) / 1000;
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        MOVW     R1,#+10000
        SDIV     R2,R7,R1
        MLS      R1,R1,R2,R7
        MOV      R2,#+1000
        SDIV     R6,R1,R2
// 1169     i = (us_data % 1000)  / 100;
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        MOV      R1,#+1000
        SDIV     R2,R7,R1
        MLS      R1,R1,R2,R7
        MOVS     R2,#+100
        SDIV     R8,R1,R2
// 1170     j = (us_data % 100)   / 10;
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        MOVS     R1,#+100
        SDIV     R2,R7,R1
        MLS      R1,R1,R2,R7
        MOVS     R2,#+10
        SDIV     R9,R1,R2
// 1171     k =  us_data % 10;
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R7,R1
        MLS      R7,R1,R2,R7
// 1172 
// 1173     oled_display_6x8char(uc_posx+6,  uc_posy, l+48);
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1174     oled_display_6x8char(uc_posx+12, uc_posy, m+48);
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1175     oled_display_6x8char(uc_posx+18, uc_posy, i+48);
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1176     oled_display_6x8char(uc_posx+24, uc_posy, j+48);
        ADDS     R2,R9,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1177     oled_display_6x8char(uc_posx+30, uc_posy, k+48);
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+30
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1178 
// 1179     return;
??oled_print_short_0:
        POP      {R0,R4-R9,PC}    ;; return
// 1180 }
// 1181 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1182 void oled_print_16x8short(uint8 uc_posx, uint8 uc_posy, int16 s_data)
// 1183 {
oled_print_16x8short:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R7,R2
// 1184     uint16 i, j, k, l, m, us_data;
// 1185 
// 1186     if(s_data < 0)
        SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
        CMP      R7,#+0
        BPL.N    ??oled_print_16x8short_0
// 1187     {
// 1188     	oled_display_16x8char(uc_posx,uc_posy,'-');
        MOVS     R2,#+45
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1189         us_data = (uint16)(-s_data);
        SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
        RSBS     R7,R7,#+0
        B.N      ??oled_print_16x8short_1
// 1190     }
// 1191     else
// 1192     {
// 1193     	oled_display_16x8char(uc_posx,uc_posy,'+');
??oled_print_16x8short_0:
        MOVS     R2,#+43
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1194         us_data = (uint16)s_data;
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
// 1195     }
// 1196 
// 1197     l =  us_data          / 10000;
??oled_print_16x8short_1:
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        MOVW     R0,#+10000
        SDIV     R0,R7,R0
// 1198     m = (us_data % 10000) / 1000;
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        MOVW     R1,#+10000
        SDIV     R2,R7,R1
        MLS      R1,R1,R2,R7
        MOV      R2,#+1000
        SDIV     R6,R1,R2
// 1199     i = (us_data % 1000)  / 100;
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        MOV      R1,#+1000
        SDIV     R2,R7,R1
        MLS      R1,R1,R2,R7
        MOVS     R2,#+100
        SDIV     R8,R1,R2
// 1200     j = (us_data % 100)   / 10;
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        MOVS     R1,#+100
        SDIV     R2,R7,R1
        MLS      R1,R1,R2,R7
        MOVS     R2,#+10
        SDIV     R9,R1,R2
// 1201     k =  us_data % 10;
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R7,R1
        MLS      R7,R1,R2,R7
// 1202 
// 1203     oled_display_16x8char(uc_posx+8,  uc_posy, l+48);
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1204     oled_display_16x8char(uc_posx+16, uc_posy, m+48);
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1205     oled_display_16x8char(uc_posx+24, uc_posy, i+48);
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1206     oled_display_16x8char(uc_posx+32, uc_posy, j+48);
        ADDS     R2,R9,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1207     oled_display_16x8char(uc_posx+40, uc_posy, k+48);
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1208 
// 1209     return;
        POP      {R0,R4-R9,PC}    ;; return
// 1210 }
// 1211 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1212 void oled_print_16x8short_hl(uint8 uc_posx, uint8 uc_posy, int16 s_data, int8 bits_num)
// 1213 {
oled_print_16x8short_hl:
        PUSH     {R3-R11,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOV      R11,R2
        MOVS     R6,R3
// 1214     uint16 i, j, k, l, m, us_data;
// 1215 
// 1216     if(s_data < 0)
        SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
        CMP      R11,#+0
        BPL.N    ??oled_print_16x8short_hl_0
// 1217     {
// 1218     	oled_display_16x8char(uc_posx,uc_posy,'-');
        MOVS     R2,#+45
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1219         us_data = (uint16)(-s_data);
        SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
        RSBS     R11,R11,#+0
        B.N      ??oled_print_16x8short_hl_1
// 1220     }
// 1221     else
// 1222     {
// 1223     	oled_display_16x8char(uc_posx,uc_posy,'+');
??oled_print_16x8short_hl_0:
        MOVS     R2,#+43
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1224         us_data = (uint16)s_data;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
// 1225     }
// 1226 
// 1227     l =  us_data          / 10000;
??oled_print_16x8short_hl_1:
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVW     R0,#+10000
        SDIV     R7,R11,R0
// 1228     m = (us_data % 10000) / 1000;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVW     R0,#+10000
        SDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        MOV      R1,#+1000
        SDIV     R8,R0,R1
// 1229     i = (us_data % 1000)  / 100;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOV      R0,#+1000
        SDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        MOVS     R1,#+100
        SDIV     R9,R0,R1
// 1230     j = (us_data % 100)   / 10;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVS     R0,#+100
        SDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        MOVS     R1,#+10
        SDIV     R10,R0,R1
// 1231     k =  us_data % 10;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVS     R0,#+10
        SDIV     R1,R11,R0
        MLS      R11,R0,R1,R11
// 1232 
// 1233     oled_display_16x8char(uc_posx+8,  uc_posy, l+48);
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1234     oled_display_16x8char(uc_posx+16, uc_posy, m+48);
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1235     oled_display_16x8char(uc_posx+24, uc_posy, i+48);
        ADDS     R2,R9,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1236     oled_display_16x8char(uc_posx+32, uc_posy, j+48);
        ADDS     R2,R10,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1237     oled_display_16x8char(uc_posx+40, uc_posy, k+48);
        ADDS     R2,R11,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char
// 1238 
// 1239     switch(bits_num)
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        CMP      R6,#+1
        BEQ.N    ??oled_print_16x8short_hl_2
        BCC.N    ??oled_print_16x8short_hl_3
        CMP      R6,#+3
        BEQ.N    ??oled_print_16x8short_hl_4
        BCC.N    ??oled_print_16x8short_hl_5
        CMP      R6,#+5
        BEQ.N    ??oled_print_16x8short_hl_6
        BCC.N    ??oled_print_16x8short_hl_7
        B.N      ??oled_print_16x8short_hl_3
// 1240     {
// 1241     	case 1: oled_display_16x8char_hl(uc_posx+8,  uc_posy, l+48);
??oled_print_16x8short_hl_2:
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char_hl
// 1242     	        break;
        B.N      ??oled_print_16x8short_hl_8
// 1243     	case 2: oled_display_16x8char_hl(uc_posx+16, uc_posy, m+48);
??oled_print_16x8short_hl_5:
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char_hl
// 1244     	        break;
        B.N      ??oled_print_16x8short_hl_8
// 1245         case 3: oled_display_16x8char_hl(uc_posx+24, uc_posy, i+48);
??oled_print_16x8short_hl_4:
        ADDS     R2,R9,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char_hl
// 1246     	        break;
        B.N      ??oled_print_16x8short_hl_8
// 1247        	case 4: oled_display_16x8char_hl(uc_posx+32, uc_posy, j+48);
??oled_print_16x8short_hl_7:
        ADDS     R2,R10,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+32
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char_hl
// 1248     	        break;
        B.N      ??oled_print_16x8short_hl_8
// 1249         case 5: oled_display_16x8char_hl(uc_posx+40, uc_posy, k+48);
??oled_print_16x8short_hl_6:
        ADDS     R2,R11,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_16x8char_hl
// 1250     	        break;
        B.N      ??oled_print_16x8short_hl_8
// 1251     	default: break;
// 1252     }
// 1253 
// 1254     return;
??oled_print_16x8short_hl_3:
??oled_print_16x8short_hl_8:
        POP      {R0,R4-R11,PC}   ;; return
// 1255 }
// 1256 /**
// 1257  *  @ brief   oled_print_image
// 1258  *
// 1259  *  @ param   uint8 usPicture[][168]     二维图像数组的地址
// 1260 *      		  uint16 usRowNum            二维图像的行数1~64
// 1261 *   		  uint16 usColumnNum         二维图像的列数1~128
// 1262  *
// 1263  *	@ note    将图像显示出来
// 1264  *
// 1265  *	@ return  none
// 1266  */
// 1267 //将数组从头到尾依次从左上角显示到右下角

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1268 void oled_print_image(uint8 usPicture[][128], uint16 usRowNum, uint16 usColumnNum)
// 1269 {
oled_print_image:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOV      R10,R1
        MOVS     R5,R2
// 1270 	int16 i = 0;
        MOVS     R7,#+0
// 1271 	int16 j = 0;
        MOVS     R8,#+0
// 1272 	int16 m = 0;
        MOVS     R6,#+0
// 1273 	uint8 temp_data = 0;
        MOVS     R0,#+0
// 1274 	int16 usRowTemp = 0;
        MOVS     R9,#+0
// 1275 
// 1276 	oled_set_pos(0,0);                      // 0页，0列
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       oled_set_pos
// 1277 	m = (uint8)(usRowNum >> 3);             // 计算图片行数以8位为一组完整的组数，即页数
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        LSRS     R6,R10,#+3
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
// 1278 
// 1279     for(i=0;i<m;i++)
        MOVS     R7,#+0
        B.N      ??oled_print_image_0
// 1280 	//for(i=(m-1);i>=0;i--)
// 1281 	{
// 1282     	usRowTemp = ((i<<3));             // 行下标，从第0行开始
// 1283         
// 1284 		for(j=0;j<usColumnNum;j++)
// 1285 		//for(j=(usColumnNum);j > 0;j--)
// 1286 		{
// 1287 			temp_data = (usPicture[usRowTemp][j]<<0) 
// 1288                     | (usPicture[usRowTemp+1][j]<<1) 
// 1289                     | (usPicture[usRowTemp+2][j]<<2) 
// 1290                     | (usPicture[usRowTemp+3][j]<<3)
// 1291 					| (usPicture[usRowTemp+4][j]<<4)
// 1292                     | (usPicture[usRowTemp+5][j]<<5) 
// 1293                     | (usPicture[usRowTemp+6][j]<<6) 
// 1294                     | (usPicture[usRowTemp+7][j]<<7);
??oled_print_image_1:
        MOVS     R0,#+128
        SMULBB   R0,R9,R0
        ADD      R0,R4,R0
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        LDRB     R0,[R0, R8]
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+128]
        ORRS     R0,R0,R1, LSL #+1
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+256]
        ORRS     R0,R0,R1, LSL #+2
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+384]
        ORRS     R0,R0,R1, LSL #+3
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+512]
        ORRS     R0,R0,R1, LSL #+4
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+640]
        ORRS     R0,R0,R1, LSL #+5
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+768]
        ORRS     R0,R0,R1, LSL #+6
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+896]
        ORRS     R0,R0,R1, LSL #+7
// 1295 
// 1296 			oled_write_data(temp_data);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_data
// 1297 		}
        ADDS     R8,R8,#+1
??oled_print_image_2:
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R8,R5
        BLT.N    ??oled_print_image_1
        ADDS     R7,R7,#+1
??oled_print_image_0:
        MOVS     R0,R7
        MOVS     R1,R6
        SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
        SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
        CMP      R0,R1
        BGE.N    ??oled_print_image_3
        LSLS     R9,R7,#+3
        MOVS     R8,#+0
        B.N      ??oled_print_image_2
// 1298 	}
// 1299     return;
??oled_print_image_3:
        POP      {R4-R10,PC}      ;; return
// 1300 }
// 1301 
// 1302 /**
// 1303  *  @ brief   oled_print_mirror_image
// 1304  *
// 1305  *  @ param   uint8 usPicture[][168]     二维图像数组的地址
// 1306 *      		  uint16 usRowNum            二维图像的行数1~64
// 1307 *   		  uint16 usColumnNum         二维图像的列数1~128
// 1308  *
// 1309  *	@ note    将图像显示出来
// 1310  *
// 1311  *	@ return  none
// 1312  */
// 1313 //将数组从尾到头依次从左上角显示到右下角

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1314 void oled_print_mirror_image(uint8 usPicture[][128], uint16 usRowNum, uint16 usColumnNum)
// 1315 {
oled_print_mirror_image:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOV      R10,R1
        MOVS     R5,R2
// 1316 	int16 i = 0;
        MOVS     R7,#+0
// 1317 	int16 j = 0;
        MOVS     R8,#+0
// 1318 	int16 m = 0;
        MOVS     R6,#+0
// 1319 	uint8 temp_data = 0;
        MOVS     R0,#+0
// 1320 	int16 usRowTemp = 0;
        MOVS     R9,#+0
// 1321 
// 1322 	oled_set_pos(0,0);                      // 0页，0列
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       oled_set_pos
// 1323 	m = (uint8)(usRowNum >> 3);             // 计算图片行数以8位为一组完整的组数，即页数
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        LSRS     R6,R10,#+3
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
// 1324 
// 1325     for(i=0;i<m;i++)
        MOVS     R7,#+0
        B.N      ??oled_print_mirror_image_0
// 1326 	//for(i=m-1;i>=0;i--)
// 1327 	{
// 1328     	usRowTemp = ((i<<3));             // 行下标，从第0行开始
// 1329         
// 1330 		for(j=0;j<usColumnNum;j++)
// 1331 		//for(j=(usColumnNum);j > 0;j--)
// 1332 		{
// 1333 //          temp_data = (usPicture[usRowTemp+7][j]<<0) 
// 1334 //                    | (usPicture[usRowTemp+6][j]<<1) 
// 1335 //                    | (usPicture[usRowTemp+5][j]<<2) 
// 1336 //                    | (usPicture[usRowTemp+4][j]<<3)
// 1337 //                    | (usPicture[usRowTemp+3][j]<<4)
// 1338 //                    | (usPicture[usRowTemp+2][j]<<5) 
// 1339 //                    | (usPicture[usRowTemp+1][j]<<6) 
// 1340 //                    | (usPicture[usRowTemp+0][j]<<7);
// 1341           
// 1342                     temp_data = (usPicture[usRowTemp+7][j]<<7) 
// 1343                     | (usPicture[usRowTemp+6][j]<<6) 
// 1344                     | (usPicture[usRowTemp+5][j]<<5) 
// 1345                     | (usPicture[usRowTemp+4][j]<<4)
// 1346                     | (usPicture[usRowTemp+3][j]<<3)
// 1347                     | (usPicture[usRowTemp+2][j]<<2) 
// 1348                     | (usPicture[usRowTemp+1][j]<<1) 
// 1349                     | (usPicture[usRowTemp+0][j]<<0);
??oled_print_mirror_image_1:
        MOVS     R0,#+128
        SMULBB   R0,R9,R0
        ADD      R0,R4,R0
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R0,R0,R8
        LDRB     R0,[R0, #+896]
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+768]
        LSLS     R1,R1,#+6
        ORRS     R0,R1,R0, LSL #+7
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+640]
        ORRS     R0,R0,R1, LSL #+5
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+512]
        ORRS     R0,R0,R1, LSL #+4
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+384]
        ORRS     R0,R0,R1, LSL #+3
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+256]
        ORRS     R0,R0,R1, LSL #+2
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        ADD      R1,R1,R8
        LDRB     R1,[R1, #+128]
        ORRS     R0,R0,R1, LSL #+1
        MOVS     R1,#+128
        SMULBB   R1,R9,R1
        ADD      R1,R4,R1
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        LDRB     R1,[R1, R8]
        ORRS     R0,R1,R0
// 1350 
// 1351 			oled_write_data(temp_data);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_data
// 1352 		}
        ADDS     R8,R8,#+1
??oled_print_mirror_image_2:
        SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R8,R5
        BLT.N    ??oled_print_mirror_image_1
        ADDS     R7,R7,#+1
??oled_print_mirror_image_0:
        MOVS     R0,R7
        MOVS     R1,R6
        SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
        SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
        CMP      R0,R1
        BGE.N    ??oled_print_mirror_image_3
        LSLS     R9,R7,#+3
        MOVS     R8,#+0
        B.N      ??oled_print_mirror_image_2
// 1353 	}
// 1354     return;
??oled_print_mirror_image_3:
        POP      {R4-R10,PC}      ;; return
// 1355 }

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1356 void oled_print_std_image(uint8 u8Mode)//11.9ms
// 1357 {
oled_print_std_image:
        PUSH     {R7,LR}
// 1358     oled_print_mirror_image(guc_corrected_image,64,128);
        MOVS     R2,#+128
        MOVS     R1,#+64
        LDR.W    R0,??DataTable17
        BL       oled_print_mirror_image
// 1359 }
        POP      {R0,PC}          ;; return
// 1360 
// 1361 
// 1362       //show_image_process();
// 1363 /*void oled_print_std_image(uint8 u8Mode)
// 1364 {
// 1365 	int16 i = 0;
// 1366 	int16 j = 0;
// 1367 	int16 m = 0;
// 1368 	uint8 temp_data = 0;
// 1369 	int16 usRowTemp = 0;
// 1370 
// 1371     //union ImageData* pu8ImageSource = (union ImageData*)g_carInfo.CameraInfo.u8ImageSource;    
// 1372     //uint8 (*u8ImageIndex)[IMAGE_Y_MAX];   
// 1373     
// 1374     //u8ImageIndex = Get200to128IndexPoint();         
// 1375     
// 1376     
// 1377 	oled_set_pos(0,0);                      // 0页，0列
// 1378 	m = (uint8)(64 >> 3);             // 计算图片行数以8位为一组完整的组数，即页数
// 1379 
// 1380     for(i=0;i<m;i++)
// 1381 	{
// 1382     	usRowTemp = ((i<<3));             // 行下标，从第0行开始
// 1383         
// 1384 		for(j=0;j<128;j++)
// 1385 		{
// 1386             switch (u8Mode)
// 1387             {
// 1388                 //case _64x200_MODE:
// 1389             default:
// 1390                 //分别取行列
// 1391 //                    temp_data = (g_carInfo.CameraInfo.u8ImageSource[usRowTemp][g_RowCol[usRowTemp][j]]<<0) 
// 1392 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+1][g_RowCol[usRowTemp+1][j]]<<1) 
// 1393 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+2][g_RowCol[usRowTemp+2][j]]<<2) 
// 1394 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+3][g_RowCol[usRowTemp+3][j]]<<3)
// 1395 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+4][g_RowCol[usRowTemp+4][j]]<<4)
// 1396 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+5][g_RowCol[usRowTemp+5][j]]<<5) 
// 1397 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+6][g_RowCol[usRowTemp+6][j]]<<6) 
// 1398 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+7][g_RowCol[usRowTemp+7][j]]<<7);
// 1399 //                    break;  
// 1400 
// 1401                     
// 1402 //                    temp_data = (g_carInfo.CameraInfo.u8ImageSource[usRowTemp][g_column[j]]<<0) 
// 1403 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+1][g_column[j]]<<1) 
// 1404 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+2][g_column[j]]<<2) 
// 1405 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+3][g_column[j]]<<3)
// 1406 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+4][g_column[j]]<<4)
// 1407 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+5][g_column[j]]<<5) 
// 1408 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+6][g_column[j]]<<6) 
// 1409 //                            | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+7][g_column[j]]<<7);
// 1410 //                    break;                     
// 1411                     
// 1412                     
// 1413                     
// 1414                     temp_data = (g_carInfo.CameraInfo.u8ImageSource[usRowTemp][j*CAMERA_W/128]<<0) 
// 1415                             | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+1][j*CAMERA_W/128]<<1) 
// 1416                             | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+2][j*CAMERA_W/128]<<2) 
// 1417                             | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+3][j*CAMERA_W/128]<<3)
// 1418                             | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+4][j*CAMERA_W/128]<<4)
// 1419                             | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+5][j*CAMERA_W/128]<<5) 
// 1420                             | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+6][j*CAMERA_W/128]<<6) 
// 1421                             | (g_carInfo.CameraInfo.u8ImageSource[usRowTemp+7][j*CAMERA_W/128]<<7);
// 1422                     break; 
// 1423                     
// 1424                     
// 1425                     
// 1426                     
// 1427                 
// 1428 //                case _64x200_MODE:
// 1429 //                    temp_data = (g_carInfo.CameraInfo.u8ImageSource[g_row[usRowTemp]][j]<<0) 
// 1430 //                            | (g_carInfo.CameraInfo.u8ImageSource[g_row[usRowTemp+1]][j]<<1) 
// 1431 //                            | (g_carInfo.CameraInfo.u8ImageSource[g_row[usRowTemp+2]][j]<<2) 
// 1432 //                            | (g_carInfo.CameraInfo.u8ImageSource[g_row[usRowTemp+3]][j]<<3)
// 1433 //                            | (g_carInfo.CameraInfo.u8ImageSource[g_row[usRowTemp+4]][j]<<4)
// 1434 //                            | (g_carInfo.CameraInfo.u8ImageSource[g_row[usRowTemp+5]][j]<<5) 
// 1435 //                            | (g_carInfo.CameraInfo.u8ImageSource[g_row[usRowTemp+6]][j]<<6) 
// 1436 //                            | (g_carInfo.CameraInfo.u8ImageSource[g_row[usRowTemp+7]][j]<<7);
// 1437 //                    break;
// 1438 
// 1439 //                case NARROW_MODE:
// 1440 //                    temp_data = (pu8ImageSource->Line[usRowTemp].NarrowLine.u8NarrowLineData[j]<<0) 
// 1441 //                            | (pu8ImageSource->Line[usRowTemp+1].NarrowLine.u8NarrowLineData[j]<<1) 
// 1442 //                            | (pu8ImageSource->Line[usRowTemp+2].NarrowLine.u8NarrowLineData[j]<<2) 
// 1443 //                            | (pu8ImageSource->Line[usRowTemp+3].NarrowLine.u8NarrowLineData[j]<<3)
// 1444 //                            | (pu8ImageSource->Line[usRowTemp+4].NarrowLine.u8NarrowLineData[j]<<4)
// 1445 //                            | (pu8ImageSource->Line[usRowTemp+5].NarrowLine.u8NarrowLineData[j]<<5) 
// 1446 //                            | (pu8ImageSource->Line[usRowTemp+6].NarrowLine.u8NarrowLineData[j]<<6) 
// 1447 //                            | (pu8ImageSource->Line[usRowTemp+7].NarrowLine.u8NarrowLineData[j]<<7);
// 1448 //                    break;
// 1449 //
// 1450 //                case LINER_MODE:
// 1451 //                    temp_data = (pu8ImageSource->Line[usRowTemp].u8WideLineData[g_column[j]]<<0) 
// 1452 //                            | (pu8ImageSource->Line[usRowTemp+1].u8WideLineData[g_column[j]]<<1) 
// 1453 //                            | (pu8ImageSource->Line[usRowTemp+2].u8WideLineData[g_column[j]]<<2) 
// 1454 //                            | (pu8ImageSource->Line[usRowTemp+3].u8WideLineData[g_column[j]]<<3)
// 1455 //                            | (pu8ImageSource->Line[usRowTemp+4].u8WideLineData[g_column[j]]<<4)
// 1456 //                            | (pu8ImageSource->Line[usRowTemp+5].u8WideLineData[g_column[j]]<<5) 
// 1457 //                            | (pu8ImageSource->Line[usRowTemp+6].u8WideLineData[g_column[j]]<<6) 
// 1458 //                            | (pu8ImageSource->Line[usRowTemp+7].u8WideLineData[g_column[j]]<<7);
// 1459 //                    break;
// 1460 
// 1461 //                default : break;    
// 1462  
// 1463             }
// 1464             
// 1465             oled_write_data(temp_data);
// 1466 		}
// 1467 	}
// 1468 }*/
// 1469 
// 1470 /**
// 1471  *  @ brief   oled_init
// 1472  *
// 1473  *  @ param   none
// 1474  *
// 1475  *	@ note    oled init
// 1476  *
// 1477  *	@ return  none
// 1478  */

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
// 1479 void  oled_init(void)
// 1480 {
oled_init:
        PUSH     {R7,LR}
// 1481     uint8 i = 0;
        MOVS     R0,#+0
// 1482 
// 1483 	/* 初始化引脚  */
// 1484     oled_pin_init();
        BL       oled_pin_init
// 1485 
// 1486     for(i=0;i<100;i++)
        MOVS     R0,#+0
        B.N      ??oled_init_0
// 1487     {
// 1488         asm("nop");            // 从上电到下面开始初始化要有足够的时间，即等待RC复位完毕
??oled_init_1:
        nop
// 1489     }
        ADDS     R0,R0,#+1
??oled_init_0:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+100
        BLT.N    ??oled_init_1
// 1490 
// 1491     /* 配置 */
// 1492     //gpio_set(OLED_PORT_GET(OLED_RST),OLED_PIN_GET(OLED_RST),1);       // 复位
// 1493     OLED_RST(HIGH);
        MOVS     R2,#+1
        MOVS     R1,#+9
        LDR.N    R0,??DataTable12_2  ;; 0x400ff100
        BL       LPLD_GPIO_Output_b
// 1494 
// 1495     SetDisplayOnOff(0x00);     // Display Off (0x00/0x01)
        MOVS     R0,#+0
        BL       SetDisplayOnOff
// 1496 
// 1497     SetDisplayClock(0x80);     // Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       SetDisplayClock
// 1498 
// 1499     SetMultiplexRatio(0x3F);   // 1/64 Duty (0x0F~0x3F)
        MOVS     R0,#+63
        BL       SetMultiplexRatio
// 1500 
// 1501     SetDisplayOffset(0x00);    // Shift Mapping RAM Countchar (0x00~0x3F)
        MOVS     R0,#+0
        BL       SetDisplayOffset
// 1502 
// 1503     SetStartLine(0x00);        // Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+0
        BL       SetStartLine
// 1504 
// 1505     SetChargePump(0x04);       // Enable Embedded DC/DC Convchartchar (0x00/0x04)
        MOVS     R0,#+4
        BL       SetChargePump
// 1506 
// 1507     SetAddressingMode(0x00);   // Set Horizontal Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+0
        BL       SetAddressingMode
// 1508 
// 1509     SetSegmentRemap(0x01);     // Set SEG/Column Mapping     0x00左右反置 0x01正常
        MOVS     R0,#+1
        BL       SetSegmentRemap
// 1510 
// 1511     SetCommonRemap(0x08);      // Set COM/Row Scan Direction 0x00上下反置 0x08正常
        MOVS     R0,#+8
        BL       SetCommonRemap
// 1512 
// 1513     SetCommonConfig(0x10);     // Set Sequential Configuration (0x00/0x10)
        MOVS     R0,#+16
        BL       SetCommonConfig
// 1514 
// 1515     SetContrastControl(0xCF);  // Set SEG Output Current
        MOVS     R0,#+207
        BL       SetContrastControl
// 1516 
// 1517     SetPrechargePchariod(0xF1);  // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       SetPrechargePchariod
// 1518 
// 1519     SetVCOMH(0x40);            // Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       SetVCOMH
// 1520 
// 1521     SetEntireDisplay(0x00);    // Disable Entire Display On (0x00/0x01)
        MOVS     R0,#+0
        BL       SetEntireDisplay
// 1522 
// 1523     SetInvcharseDisplay(0x00);   // Disable Invcharse Display On (0x00/0x01)
        MOVS     R0,#+0
        BL       SetInvcharseDisplay
// 1524 
// 1525     SetDisplayOnOff(0x01);     // Display On (0x00/0x01)
        MOVS     R0,#+1
        BL       SetDisplayOnOff
// 1526 
// 1527     oled_fill(0x00);           // 初始清屏
        MOVS     R0,#+0
        BL       oled_fill
// 1528 
// 1529     oled_set_pos(0,0);
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       oled_set_pos
// 1530 
// 1531     return;
        POP      {R0,PC}          ;; return
// 1532 }
// 1533 
// 1534 /**
// 1535  *  @ brief   oled_gap
// 1536  *
// 1537  *  @ param   none
// 1538  *
// 1539  *	@ note    display gap between dates
// 1540  *
// 1541  *	@ return  none
// 1542  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1543 void  oled_gap(void)
// 1544 {
oled_gap:
        PUSH     {R7,LR}
// 1545 	oled_display_6x8char(63,0,'-');
        MOVS     R2,#+45
        MOVS     R1,#+0
        MOVS     R0,#+63
        BL       oled_display_6x8char
// 1546 
// 1547 	oled_display_6x8char(63,2,'-');
        MOVS     R2,#+45
        MOVS     R1,#+2
        MOVS     R0,#+63
        BL       oled_display_6x8char
// 1548 
// 1549 	oled_display_6x8char(63,4,'-');
        MOVS     R2,#+45
        MOVS     R1,#+4
        MOVS     R0,#+63
        BL       oled_display_6x8char
// 1550 
// 1551 	oled_display_6x8char(63,6,'-');
        MOVS     R2,#+45
        MOVS     R1,#+6
        MOVS     R0,#+63
        BL       oled_display_6x8char
// 1552  }
        POP      {R0,PC}          ;; return
// 1553 
// 1554 /**
// 1555  *  @ brief   oled_twink
// 1556  *
// 1557  *  @ param   none
// 1558  *
// 1559  *	@ note    twink, to remind us the oled is working
// 1560  *
// 1561  *	@ return  none
// 1562  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1563 void  oled_twink(void)
// 1564 {
oled_twink:
        PUSH     {R7,LR}
// 1565 	static int8 s_num = 0;
// 1566 	static int16 s_countchar = 0;
// 1567 
// 1568 	if(s_countchar >= TWINK_PERIOD)
        LDR.W    R0,??DataTable17_1
        LDRSH    R0,[R0, #+0]
        CMP      R0,#+50
        BLT.N    ??oled_twink_0
// 1569 	{
// 1570 		s_countchar = 0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable17_1
        STRH     R0,[R1, #+0]
// 1571 		if(s_num >= 3)
        LDR.W    R0,??DataTable17_2
        LDRSB    R0,[R0, #+0]
        CMP      R0,#+3
        BLT.N    ??oled_twink_1
        B.N      ??oled_twink_2
// 1572 		{
// 1573 			while(s_num>=0)
// 1574 			{
// 1575 				oled_display_6x8char((99+s_num*6),7,32);
??oled_twink_3:
        MOVS     R2,#+32
        MOVS     R1,#+7
        LDR.W    R0,??DataTable17_2
        LDRSB    R0,[R0, #+0]
        MOVS     R3,#+6
        SMULBB   R0,R0,R3
        ADDS     R0,R0,#+99
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1576 				s_num --;
        LDR.W    R0,??DataTable17_2
        LDRB     R0,[R0, #+0]
        SUBS     R0,R0,#+1
        LDR.W    R1,??DataTable17_2
        STRB     R0,[R1, #+0]
// 1577 			}
??oled_twink_2:
        LDR.W    R0,??DataTable17_2
        LDRSB    R0,[R0, #+0]
        CMP      R0,#+0
        BPL.N    ??oled_twink_3
// 1578 			s_num = 0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable17_2
        STRB     R0,[R1, #+0]
// 1579 		}
// 1580 		oled_display_6x8char((99+s_num*6),7,'.');
??oled_twink_1:
        MOVS     R2,#+46
        MOVS     R1,#+7
        LDR.W    R0,??DataTable17_2
        LDRSB    R0,[R0, #+0]
        MOVS     R3,#+6
        SMULBB   R0,R0,R3
        ADDS     R0,R0,#+99
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1581 		s_num++;
        LDR.W    R0,??DataTable17_2
        LDRB     R0,[R0, #+0]
        ADDS     R0,R0,#+1
        LDR.W    R1,??DataTable17_2
        STRB     R0,[R1, #+0]
// 1582 	}
// 1583 	s_countchar ++;
??oled_twink_0:
        LDR.W    R0,??DataTable17_1
        LDRH     R0,[R0, #+0]
        ADDS     R0,R0,#+1
        LDR.W    R1,??DataTable17_1
        STRH     R0,[R1, #+0]
// 1584  }
        POP      {R0,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12:
        DC32     ocb_table

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_1:
        DC32     gl_gpio_oled_sclk

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_2:
        DC32     0x400ff100

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_3:
        DC32     gl_gpio_oled_sdin

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_4:
        DC32     gl_gpio_oled_dc

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_5:
        DC32     gl_gpio_oled_rst

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
        DATA
`oled_twink::s_num`:
        DS8 1

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
        DATA
`oled_twink::s_countchar`:
        DS8 2
// 1585 
// 1586 /**
// 1587  *  @ brief   oled_clear
// 1588  *
// 1589  *  @ param   none
// 1590  *
// 1591  *	@ note    clear some space
// 1592  *
// 1593  *	@ return  none
// 1594  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1595 void  oled_clear(uint8 start_x, uint8 page, uint8 clear_size)
// 1596 {
oled_clear:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R7,R2
// 1597 	uint8 loop_i = 0;
        MOVS     R6,#+0
// 1598 	for(loop_i = 0; loop_i < clear_size; loop_i ++)
        MOVS     R6,#+0
        B.N      ??oled_clear_0
// 1599 	{
// 1600 		oled_display_6x8char((start_x+loop_i*6), page, 32);
??oled_clear_1:
        MOVS     R2,#+32
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+6
        MUL      R0,R0,R6
        UXTAB    R0,R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1601 	}
        ADDS     R6,R6,#+1
??oled_clear_0:
        MOVS     R0,R6
        MOVS     R1,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        CMP      R0,R1
        BCC.N    ??oled_clear_1
// 1602 }
        POP      {R0,R4-R7,PC}    ;; return
// 1603 
// 1604 
// 1605 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1606 void  oled_one_group(uint8 my_x, uint8 my_y, uint16 my_data)
// 1607 {
oled_one_group:
        PUSH     {R4-R8,LR}
// 1608     uint8  i = 0;
        MOVS     R4,#+0
// 1609     uint8  j = 0;
        MOVS     R5,#+0
// 1610     uint8  k = 0;
        MOVS     R6,#+0
// 1611     uint16 data = my_data;
// 1612     uint8  uc_posx = 0;
        MOVS     R7,#+0
// 1613     uint8  uc_posy = 0;
        MOVS     R8,#+0
// 1614 
// 1615     data = my_data;
// 1616 
// 1617     i = (data % 1000)  / 100;
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOV      R3,#+1000
        SDIV     R4,R2,R3
        MLS      R3,R3,R4,R2
        MOVS     R4,#+100
        SDIV     R4,R3,R4
// 1618     j = (data % 100)   / 10;
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVS     R3,#+100
        SDIV     R5,R2,R3
        MLS      R3,R3,R5,R2
        MOVS     R5,#+10
        SDIV     R5,R3,R5
// 1619     k =  data % 10;
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVS     R3,#+10
        SDIV     R6,R2,R3
        MLS      R6,R3,R6,R2
// 1620 
// 1621     switch(my_x)
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??oled_one_group_0
        CMP      R0,#+2
        BEQ.N    ??oled_one_group_1
        BCC.N    ??oled_one_group_2
        CMP      R0,#+3
        BEQ.N    ??oled_one_group_3
        B.N      ??oled_one_group_4
// 1622     {
// 1623     	case 0 : uc_posx = 6;   break;
??oled_one_group_0:
        MOVS     R7,#+6
        B.N      ??oled_one_group_5
// 1624     	case 1 : uc_posx = 36;  break;
??oled_one_group_2:
        MOVS     R7,#+36
        B.N      ??oled_one_group_5
// 1625     	case 2 : uc_posx = 78;  break;
??oled_one_group_1:
        MOVS     R7,#+78
        B.N      ??oled_one_group_5
// 1626     	case 3 : uc_posx = 108; break;
??oled_one_group_3:
        MOVS     R7,#+108
        B.N      ??oled_one_group_5
// 1627     	default: uc_posx = 0;   break;
??oled_one_group_4:
        MOVS     R7,#+0
// 1628     }
// 1629 
// 1630     uc_posy = (uint8)2 * my_y;
??oled_one_group_5:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LSLS     R8,R1,#+1
// 1631 
// 1632 	oled_display_6x8char(uc_posx, uc_posy, 32);
        MOVS     R2,#+32
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1633 	oled_display_6x8char(uc_posx+6, uc_posy, 32);
        MOVS     R2,#+32
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R7,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1634 	oled_display_6x8char(uc_posx+12, uc_posy, 32);
        MOVS     R2,#+32
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R7,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1635 
// 1636     if(i != 0)
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+0
        BEQ.N    ??oled_one_group_6
// 1637     {
// 1638     	oled_display_6x8char(uc_posx, uc_posy, i+48);
        ADDS     R2,R4,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1639     	oled_display_6x8char(uc_posx+6, uc_posy, j+48);
        ADDS     R2,R5,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R7,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1640     	oled_display_6x8char(uc_posx+12, uc_posy, k+48);
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R7,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
        B.N      ??oled_one_group_7
// 1641     }
// 1642     else if((i == 0) && (j != 0))
??oled_one_group_6:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+0
        BNE.N    ??oled_one_group_8
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+0
        BEQ.N    ??oled_one_group_8
// 1643     {
// 1644     	oled_display_6x8char(uc_posx+6, uc_posy, j+48);
        ADDS     R2,R5,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R7,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1645 		oled_display_6x8char(uc_posx+12, uc_posy, k+48);
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R7,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
        B.N      ??oled_one_group_7
// 1646     }
// 1647     else if((i == 0) && (j == 0))
??oled_one_group_8:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+0
        BNE.N    ??oled_one_group_7
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+0
        BNE.N    ??oled_one_group_7
// 1648     {
// 1649 		oled_display_6x8char(uc_posx+12, uc_posy, k+48);
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R7,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1650     }
// 1651 }
??oled_one_group_7:
        POP      {R4-R8,PC}       ;; return
// 1652 
// 1653 /*------------------------------------------------------------------
// 1654 *Function Name:     oled_my_show
// 1655 *Parameter(s):      uint8 my_x, uint8 my_y, int16 mydata
// 1656 *Return:            None
// 1657 *Description:       将一行分为4个位置，x范围0~3，y范围0~7
// 1658 -----------------------------------------------------------------*/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1659 void oled_my_show(uint8 my_x, uint8 my_y, int16 mydata)
// 1660 {
oled_my_show:
        PUSH     {R3-R7,LR}
        MOVS     R6,R2
// 1661     uint16 i, j, k, us_data;
// 1662     uint8  uc_posx = 0;
        MOVS     R4,#+0
// 1663     uint8  uc_posy = 0;
        MOVS     R5,#+0
// 1664 
// 1665     switch(my_x)
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??oled_my_show_0
        CMP      R0,#+2
        BEQ.N    ??oled_my_show_1
        BCC.N    ??oled_my_show_2
        CMP      R0,#+3
        BEQ.N    ??oled_my_show_3
        B.N      ??oled_my_show_4
// 1666     {
// 1667     	case 0 : uc_posx = 0;   break;
??oled_my_show_0:
        MOVS     R4,#+0
        B.N      ??oled_my_show_5
// 1668     	case 1 : uc_posx = 36;  break;
??oled_my_show_2:
        MOVS     R4,#+36
        B.N      ??oled_my_show_5
// 1669     	case 2 : uc_posx = 72;  break;
??oled_my_show_1:
        MOVS     R4,#+72
        B.N      ??oled_my_show_5
// 1670     	case 3 : uc_posx = 102; break;
??oled_my_show_3:
        MOVS     R4,#+102
        B.N      ??oled_my_show_5
// 1671     	default: uc_posx = 0;   break;
??oled_my_show_4:
        MOVS     R4,#+0
// 1672     }
// 1673 
// 1674     uc_posy = my_y;
??oled_my_show_5:
        MOVS     R5,R1
// 1675 
// 1676     if(uc_posy > 7)
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BLT.N    ??oled_my_show_6
// 1677         uc_posy = 7;
        MOVS     R5,#+7
// 1678 
// 1679     if(mydata < 0)
??oled_my_show_6:
        SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
        CMP      R6,#+0
        BPL.N    ??oled_my_show_7
// 1680     {
// 1681     	oled_display_6x8char(uc_posx,uc_posy,'-');
        MOVS     R2,#+45
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1682         us_data = (uint16)(-mydata);
        SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
        RSBS     R6,R6,#+0
        B.N      ??oled_my_show_8
// 1683     }
// 1684     else
// 1685     {
// 1686     	oled_display_6x8char(uc_posx,uc_posy,'+');
??oled_my_show_7:
        MOVS     R2,#+43
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1687         us_data = (uint16)mydata;
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
// 1688     }
// 1689 
// 1690 
// 1691     i = (us_data % 1000)  / 100;
??oled_my_show_8:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOV      R0,#+1000
        SDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        MOVS     R1,#+100
        SDIV     R0,R0,R1
// 1692     j = (us_data % 100)   / 10;
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOVS     R1,#+100
        SDIV     R2,R6,R1
        MLS      R1,R1,R2,R6
        MOVS     R2,#+10
        SDIV     R7,R1,R2
// 1693     k =  us_data % 10;
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R6,R1
        MLS      R6,R1,R2,R6
// 1694 
// 1695     oled_display_6x8char(uc_posx+6,  uc_posy, i+48);
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1696     oled_display_6x8char(uc_posx+12, uc_posy, j+48);
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1697     oled_display_6x8char(uc_posx+18, uc_posy, k+48);
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1698 
// 1699     return;
        POP      {R0,R4-R7,PC}    ;; return
// 1700 }
// 1701 
// 1702 /**********
// 1703 *CCD图像信息显示
// 1704 **********
// 1705 void oled_display_image(CCD_STRUCT *pccd)
// 1706 {
// 1707 	uint8 pos_x = 0, pos_y = 0;
// 1708 
// 1709 	for(pos_y = 0;pos_y<128;pos_y++)
// 1710 	{
// 1711 		pos_x = (pccd->image[pos_y]*64)/255;
// 1712 		oled_set_pos(pos_x,pos_y);
// 1713 		oled_write_data(0x80);
// 1714 	}
// 1715 }*/
// 1716 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1717 void oled_display_6x8char_hl(uint8 uc_posx, uint8 uc_posy, char uc_data)
// 1718 {
oled_display_6x8char_hl:
        PUSH     {R3-R5,LR}
        MOVS     R4,R2
// 1719     uint8 i, uc_dataTmp;
// 1720 
// 1721     uc_dataTmp = uc_data;
// 1722     if(uc_posx > 122)
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+123
        BLT.N    ??oled_display_6x8char_hl_0
// 1723     {
// 1724         uc_posx = 0;
        MOVS     R0,#+0
// 1725         uc_posy ++;
        ADDS     R1,R1,#+1
// 1726     }
// 1727 
// 1728     oled_set_pos(uc_posx, uc_posy);
??oled_display_6x8char_hl_0:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
// 1729 
// 1730     for(i = 0; i < 6; i++)
        MOVS     R5,#+0
        B.N      ??oled_display_6x8char_hl_1
// 1731     {
// 1732         oled_write_data((~F6x8[uc_dataTmp][i]));
??oled_display_6x8char_hl_2:
        LDR.N    R0,??DataTable14
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R1,#+6
        MUL      R1,R1,R4
        ADD      R0,R0,R1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LDRB     R0,[R0, R5]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_data
// 1733     }
        ADDS     R5,R5,#+1
??oled_display_6x8char_hl_1:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+6
        BLT.N    ??oled_display_6x8char_hl_2
// 1734 }
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1735 void oled_display_6x8str_hl(uint8 uc_posx, uint8 uc_posy, char uc_dataStr[])
// 1736 {
oled_display_6x8str_hl:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1737     uint8 i, j, uc_dataTmp;
// 1738 
// 1739     for (j = 0; uc_dataStr[j] != '\0'; j++)
        MOVS     R7,#+0
        B.N      ??oled_display_6x8str_hl_0
// 1740     {
// 1741         uc_dataTmp = uc_dataStr[j];
// 1742 
// 1743         if(uc_posx > 122)
// 1744         {
// 1745             uc_posx = 0;
// 1746             uc_posy++;
// 1747         }
// 1748 
// 1749         oled_set_pos(uc_posx,uc_posy);
// 1750 
// 1751         for(i = 0; i < 6; i++)
// 1752         {
// 1753             oled_write_data((~F6x8[uc_dataTmp][i]));
??oled_display_6x8str_hl_1:
        LDR.N    R0,??DataTable14
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        MOVS     R1,#+6
        MUL      R1,R1,R9
        ADD      R0,R0,R1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R0, R8]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_data
// 1754         }
        ADDS     R8,R8,#+1
??oled_display_6x8str_hl_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BLT.N    ??oled_display_6x8str_hl_1
// 1755 
// 1756         uc_posx += 6;
        ADDS     R4,R4,#+6
        ADDS     R7,R7,#+1
??oled_display_6x8str_hl_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R6, R7]
        CMP      R0,#+0
        BEQ.N    ??oled_display_6x8str_hl_3
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R9,[R6, R7]
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+123
        BLT.N    ??oled_display_6x8str_hl_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??oled_display_6x8str_hl_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
        MOVS     R8,#+0
        B.N      ??oled_display_6x8str_hl_2
// 1757     }
// 1758 
// 1759     return;
??oled_display_6x8str_hl_3:
        POP      {R0,R4-R9,PC}    ;; return
// 1760 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_1:
        DC32     OLED_ASCII16X8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable14_2:
        DC32     guc_camera_image_Ok
// 1761 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1762 void oled_print_char_hl(uint8 uc_posx, uint8 uc_posy, int8 c_data)
// 1763 {
oled_print_char_hl:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1764     uint16 i, j, k, us_data;
// 1765 
// 1766     if(c_data < 0)
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        CMP      R6,#+0
        BPL.N    ??oled_print_char_hl_0
// 1767     {
// 1768     	oled_display_6x8char_hl(uc_posx, uc_posy, '-');
        MOVS     R2,#+45
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char_hl
// 1769         us_data = (uint16)(-c_data);
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        RSBS     R6,R6,#+0
        B.N      ??oled_print_char_hl_1
// 1770     }
// 1771     else
// 1772     {
// 1773     	oled_display_6x8char_hl(uc_posx, uc_posy, '+');
??oled_print_char_hl_0:
        MOVS     R2,#+43
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char_hl
// 1774         us_data = (uint16)c_data;
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
// 1775     }
// 1776 
// 1777     i =  us_data / 100;
??oled_print_char_hl_1:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOVS     R0,#+100
        SDIV     R0,R6,R0
// 1778     j = (us_data % 100) / 10;
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOVS     R1,#+100
        SDIV     R2,R6,R1
        MLS      R1,R1,R2,R6
        MOVS     R2,#+10
        SDIV     R7,R1,R2
// 1779     k =  us_data % 10;
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        MOVS     R1,#+10
        SDIV     R2,R6,R1
        MLS      R6,R1,R2,R6
// 1780 
// 1781     oled_display_6x8char_hl(uc_posx+6, uc_posy, i+48);
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char_hl
// 1782     oled_display_6x8char_hl(uc_posx+12, uc_posy, j+48);
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char_hl
// 1783     oled_display_6x8char_hl(uc_posx+18, uc_posy, k+48);
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char_hl
// 1784 
// 1785     return;
        POP      {R0,R4-R7,PC}    ;; return
// 1786 }

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1787 void oled_print_short_hl(uint8 uc_posx, uint8 uc_posy, int16 s_data, int8 bits_num)
// 1788 {
oled_print_short_hl:
        PUSH     {R3-R11,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOV      R11,R2
        MOVS     R6,R3
// 1789     uint16 i, j, k, l, m, us_data;
// 1790 
// 1791     if(s_data < 0)
        SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
        CMP      R11,#+0
        BPL.N    ??oled_print_short_hl_0
// 1792     {
// 1793     	oled_display_6x8char(uc_posx,uc_posy,'-');
        MOVS     R2,#+45
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1794         us_data = (uint16)(-s_data);
        SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
        RSBS     R11,R11,#+0
        B.N      ??oled_print_short_hl_1
// 1795     }
// 1796     else
// 1797     {
// 1798     	oled_display_6x8char(uc_posx,uc_posy,'+');
??oled_print_short_hl_0:
        MOVS     R2,#+43
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1799         us_data = (uint16)s_data;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
// 1800     }
// 1801 
// 1802     l =  us_data          / 10000;
??oled_print_short_hl_1:
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVW     R0,#+10000
        SDIV     R7,R11,R0
// 1803     m = (us_data % 10000) / 1000;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVW     R0,#+10000
        SDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        MOV      R1,#+1000
        SDIV     R8,R0,R1
// 1804     i = (us_data % 1000)  / 100;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOV      R0,#+1000
        SDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        MOVS     R1,#+100
        SDIV     R9,R0,R1
// 1805     j = (us_data % 100)   / 10;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVS     R0,#+100
        SDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        MOVS     R1,#+10
        SDIV     R10,R0,R1
// 1806     k =  us_data % 10;
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MOVS     R0,#+10
        SDIV     R1,R11,R0
        MLS      R11,R0,R1,R11
// 1807 
// 1808     oled_display_6x8char(uc_posx+6,  uc_posy, l+48);
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1809     oled_display_6x8char(uc_posx+12, uc_posy, m+48);
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1810     oled_display_6x8char(uc_posx+18, uc_posy, i+48);
        ADDS     R2,R9,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1811     oled_display_6x8char(uc_posx+24, uc_posy, j+48);
        ADDS     R2,R10,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1812     oled_display_6x8char(uc_posx+30, uc_posy, k+48);
        ADDS     R2,R11,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+30
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char
// 1813 
// 1814     switch(bits_num)
        SXTB     R6,R6            ;; SignExt  R6,R6,#+24,#+24
        CMP      R6,#+1
        BEQ.N    ??oled_print_short_hl_2
        BCC.N    ??oled_print_short_hl_3
        CMP      R6,#+3
        BEQ.N    ??oled_print_short_hl_4
        BCC.N    ??oled_print_short_hl_5
        CMP      R6,#+5
        BEQ.N    ??oled_print_short_hl_6
        BCC.N    ??oled_print_short_hl_7
        B.N      ??oled_print_short_hl_3
// 1815     {
// 1816     	case 1: oled_display_6x8char_hl(uc_posx+6,  uc_posy, l+48);
??oled_print_short_hl_2:
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char_hl
// 1817     	        break;
        B.N      ??oled_print_short_hl_8
// 1818     	case 2: oled_display_6x8char_hl(uc_posx+12, uc_posy, m+48);
??oled_print_short_hl_5:
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char_hl
// 1819     	        break;
        B.N      ??oled_print_short_hl_8
// 1820         case 3: oled_display_6x8char_hl(uc_posx+18, uc_posy, i+48);
??oled_print_short_hl_4:
        ADDS     R2,R9,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char_hl
// 1821     	        break;
        B.N      ??oled_print_short_hl_8
// 1822        	case 4: oled_display_6x8char_hl(uc_posx+24, uc_posy, j+48);
??oled_print_short_hl_7:
        ADDS     R2,R10,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char_hl
// 1823     	        break;
        B.N      ??oled_print_short_hl_8
// 1824         case 5: oled_display_6x8char_hl(uc_posx+30, uc_posy, k+48);
??oled_print_short_hl_6:
        ADDS     R2,R11,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+30
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_display_6x8char_hl
// 1825     	        break;
        B.N      ??oled_print_short_hl_8
// 1826     	default: break;
// 1827     }
// 1828 
// 1829     return;
??oled_print_short_hl_3:
??oled_print_short_hl_8:
        POP      {R0,R4-R11,PC}   ;; return
// 1830 }
// 1831 
// 1832 //显示汉字

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1833 void oled_display_chinese(uint8 uc_posx, uint8 uc_posy, uint8 Chinese_str_num, enum OLED_LIGHT_MODE mode)
// 1834 {
oled_display_chinese:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
// 1835     uint8 i = 0, uc_dataTmp = 0;
        MOVS     R8,#+0
        MOVS     R9,#+0
// 1836 	uint16 j = 0, start_char = 0, end_char = 0;
        MOVS     R7,#+0
        MOVS     R7,#+0
        MOVS     R6,#+0
// 1837 
// 1838 	switch (Chinese_str_num)
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??oled_display_chinese_0
        CMP      R2,#+2
        BEQ.N    ??oled_display_chinese_1
        BCC.N    ??oled_display_chinese_2
        CMP      R2,#+4
        BEQ.N    ??oled_display_chinese_3
        BCC.N    ??oled_display_chinese_4
        CMP      R2,#+6
        BEQ.N    ??oled_display_chinese_5
        BCC.N    ??oled_display_chinese_6
        B.N      ??oled_display_chinese_7
// 1839 	{
// 1840 		//华中科技大学
// 1841 		case HUST_UNIVERSITY:
// 1842 			start_char = 0;
??oled_display_chinese_0:
        MOVS     R7,#+0
// 1843 			end_char = 5;
        MOVS     R6,#+5
// 1844 			break;
        B.N      ??oled_display_chinese_8
// 1845 		//信标
// 1846 		case SMART_BEACON:
// 1847 			start_char = 6;
??oled_display_chinese_2:
        MOVS     R7,#+6
// 1848 			end_char = 8;
        MOVS     R6,#+8
// 1849 			break;
        B.N      ??oled_display_chinese_8
// 1850 		//调参
// 1851 		case SET_PARAM:
// 1852 			start_char = 9;
??oled_display_chinese_1:
        MOVS     R7,#+9
// 1853 			end_char = 10;
        MOVS     R6,#+10
// 1854 			break;
        B.N      ??oled_display_chinese_8
// 1855 		//测试
// 1856 		case HARDWARE_TEST:
// 1857 			start_char = 11;
??oled_display_chinese_4:
        MOVS     R7,#+11
// 1858 			end_char = 12;
        MOVS     R6,#+12
// 1859 			break;
        B.N      ??oled_display_chinese_8
// 1860 		//图像
// 1861 		case DISPLAY_IMAGE:
// 1862 			start_char = 13;
??oled_display_chinese_3:
        MOVS     R7,#+13
// 1863 			end_char = 14;
        MOVS     R6,#+14
// 1864 			break;
        B.N      ??oled_display_chinese_8
// 1865 		//飙车
// 1866 		case CAR_RUNNING:
// 1867 			start_char = 15;
??oled_display_chinese_6:
        MOVS     R7,#+15
// 1868 			end_char = 16;
        MOVS     R6,#+16
// 1869 			break;
        B.N      ??oled_display_chinese_8
// 1870                 //薛博阳
// 1871                 case XUE_BOYANG:
// 1872                         start_char = 17;
??oled_display_chinese_5:
        MOVS     R7,#+17
// 1873 			end_char = 19;
        MOVS     R6,#+19
// 1874 			break;
        B.N      ??oled_display_chinese_8
// 1875 		default:
// 1876 			break;
// 1877 	}
// 1878 
// 1879 	if (mode == LOW_LIGHT_MODE)
??oled_display_chinese_7:
??oled_display_chinese_8:
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        CMP      R3,#+0
        BNE.N    ??oled_display_chinese_9
// 1880 	{
// 1881 		for (j=start_char ; j<=end_char ; j++)
        B.N      ??oled_display_chinese_10
// 1882 		{
// 1883 			uc_dataTmp = j;
// 1884 
// 1885 			oled_set_pos(uc_posx,uc_posy);
// 1886 
// 1887 			for (i=0 ; i<16 ; i++)
// 1888 			{
// 1889 				oled_write_data(OLED_16X8GB2312[uc_dataTmp][i]);
// 1890 			}
// 1891 
// 1892 			oled_set_pos(uc_posx,uc_posy+1);
// 1893 
// 1894 			for (i=16 ; i<32 ; i++)
// 1895 			{
// 1896 				oled_write_data(OLED_16X8GB2312[uc_dataTmp][i]);
??oled_display_chinese_11:
        LDR.N    R0,??DataTable17_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LSLS     R1,R9,#+5
        ADD      R0,R0,R1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R0, R8]
        BL       oled_write_data
// 1897 			}
        ADDS     R8,R8,#+1
??oled_display_chinese_12:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+32
        BLT.N    ??oled_display_chinese_11
// 1898 
// 1899 			uc_posx += 16;
        ADDS     R4,R4,#+16
        ADDS     R7,R7,#+1
??oled_display_chinese_10:
        MOVS     R0,R6
        MOVS     R1,R7
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        CMP      R0,R1
        BCC.N    ??oled_display_chinese_13
        MOV      R9,R7
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
        MOVS     R8,#+0
        B.N      ??oled_display_chinese_14
??oled_display_chinese_15:
        LDR.N    R0,??DataTable17_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LSLS     R1,R9,#+5
        ADD      R0,R0,R1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R0, R8]
        BL       oled_write_data
        ADDS     R8,R8,#+1
??oled_display_chinese_14:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+16
        BLT.N    ??oled_display_chinese_15
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
        MOVS     R8,#+16
        B.N      ??oled_display_chinese_12
// 1900 		}
// 1901 	}
// 1902 	else if (mode == HIGH_LIGHT_MODE)
??oled_display_chinese_9:
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        CMP      R3,#+1
        BNE.N    ??oled_display_chinese_13
// 1903 	{
// 1904 		for (j=start_char ; j<=end_char ; j++)
        B.N      ??oled_display_chinese_16
// 1905 		{
// 1906 			uc_dataTmp = j;
// 1907 
// 1908 			oled_set_pos(uc_posx,uc_posy);
// 1909 
// 1910 			for (i=0 ; i<16 ; i++)
// 1911 			{
// 1912 				oled_write_data(~OLED_16X8GB2312[uc_dataTmp][i]);
// 1913 			}
// 1914 
// 1915 			oled_set_pos(uc_posx,uc_posy+1);
// 1916 
// 1917 			for (i=16 ; i<32 ; i++)
// 1918 			{
// 1919 				oled_write_data(~OLED_16X8GB2312[uc_dataTmp][i]);
??oled_display_chinese_17:
        LDR.N    R0,??DataTable17_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LSLS     R1,R9,#+5
        ADD      R0,R0,R1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R0, R8]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_data
// 1920 			}
        ADDS     R8,R8,#+1
??oled_display_chinese_18:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+32
        BLT.N    ??oled_display_chinese_17
// 1921 
// 1922 			uc_posx += 16;
        ADDS     R4,R4,#+16
        ADDS     R7,R7,#+1
??oled_display_chinese_16:
        MOVS     R0,R6
        MOVS     R1,R7
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        CMP      R0,R1
        BCC.N    ??oled_display_chinese_13
        MOV      R9,R7
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
        MOVS     R8,#+0
        B.N      ??oled_display_chinese_19
??oled_display_chinese_20:
        LDR.N    R0,??DataTable17_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LSLS     R1,R9,#+5
        ADD      R0,R0,R1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R0, R8]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_write_data
        ADDS     R8,R8,#+1
??oled_display_chinese_19:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+16
        BLT.N    ??oled_display_chinese_20
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
        MOVS     R8,#+16
        B.N      ??oled_display_chinese_18
// 1923 		}
// 1924 	}
// 1925 }
??oled_display_chinese_13:
        POP      {R0,R4-R9,PC}    ;; return
// 1926 
// 1927 /*
// 1928  * 显示布尔变量值
// 1929  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1930 void oled_display_boolean(uint8 uc_posx, uint8 uc_posy, char bool_data)
// 1931 {
oled_display_boolean:
        PUSH     {R3-R5,LR}
// 1932 	uint8 i = 0, uc_dataTmp = 0;
        MOVS     R4,#+0
        MOVS     R5,#+0
// 1933 
// 1934 	if (bool_data == 1)
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+1
        BNE.N    ??oled_display_boolean_0
// 1935 	{
// 1936 		uc_dataTmp = '|' + 1;
        MOVS     R5,#+125
        B.N      ??oled_display_boolean_1
// 1937 	}
// 1938 	else if (bool_data == 0)
??oled_display_boolean_0:
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BNE.N    ??oled_display_boolean_2
// 1939 	{
// 1940 		uc_dataTmp = 'x';
        MOVS     R5,#+120
        B.N      ??oled_display_boolean_1
// 1941 	}
// 1942 	else
// 1943 	{
// 1944 		uc_dataTmp = '?';
??oled_display_boolean_2:
        MOVS     R5,#+63
// 1945 	}
// 1946 
// 1947     if(uc_posx > 122)
??oled_display_boolean_1:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+123
        BLT.N    ??oled_display_boolean_3
// 1948 	{
// 1949 		uc_posx = 0;
        MOVS     R0,#+0
// 1950 		uc_posy ++;
        ADDS     R1,R1,#+1
// 1951 	}
// 1952 
// 1953 	oled_set_pos(uc_posx, uc_posy);
??oled_display_boolean_3:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
// 1954 
// 1955 	for (i = 0; i < 6; i++)
        MOVS     R4,#+0
        B.N      ??oled_display_boolean_4
// 1956 	{
// 1957 		oled_write_data(F6x8[uc_dataTmp][i]);
??oled_display_boolean_5:
        LDR.N    R0,??DataTable17_4
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+6
        MUL      R1,R1,R5
        ADD      R0,R0,R1
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LDRB     R0,[R0, R4]
        BL       oled_write_data
// 1958 	}
        ADDS     R4,R4,#+1
??oled_display_boolean_4:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+6
        BLT.N    ??oled_display_boolean_5
// 1959 }
        POP      {R0,R4,R5,PC}    ;; return
// 1960 
// 1961 /*
// 1962  * 显示左右变量值
// 1963  */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1964 void oled_display_direction(uint8 uc_posx, uint8 uc_posy, char dir_data)
// 1965 {
oled_display_direction:
        PUSH     {R3-R5,LR}
// 1966 	uint8 i = 0, uc_dataTmp = 0;
        MOVS     R4,#+0
        MOVS     R5,#+0
// 1967 
// 1968 	if (dir_data == 1)
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+1
        BNE.N    ??oled_display_direction_0
// 1969 	{
// 1970 		uc_dataTmp = 'r';
        MOVS     R5,#+114
        B.N      ??oled_display_direction_1
// 1971 	}
// 1972 	else if (dir_data == 0)
??oled_display_direction_0:
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BNE.N    ??oled_display_direction_2
// 1973 	{
// 1974 		uc_dataTmp = 'l';
        MOVS     R5,#+108
        B.N      ??oled_display_direction_1
// 1975 	}
// 1976 	else
// 1977 	{
// 1978 		uc_dataTmp = '?';
??oled_display_direction_2:
        MOVS     R5,#+63
// 1979 	}
// 1980 
// 1981     if(uc_posx > 122)
??oled_display_direction_1:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+123
        BLT.N    ??oled_display_direction_3
// 1982 	{
// 1983 		uc_posx = 0;
        MOVS     R0,#+0
// 1984 		uc_posy ++;
        ADDS     R1,R1,#+1
// 1985 	}
// 1986 
// 1987 	oled_set_pos(uc_posx, uc_posy);
??oled_display_direction_3:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       oled_set_pos
// 1988 
// 1989 	for (i = 0; i < 6; i++)
        MOVS     R4,#+0
        B.N      ??oled_display_direction_4
// 1990 	{
// 1991 		oled_write_data(F6x8[uc_dataTmp][i]);
??oled_display_direction_5:
        LDR.N    R0,??DataTable17_4
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+6
        MUL      R1,R1,R5
        ADD      R0,R0,R1
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LDRB     R0,[R0, R4]
        BL       oled_write_data
// 1992 	}
        ADDS     R4,R4,#+1
??oled_display_direction_4:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+6
        BLT.N    ??oled_display_direction_5
// 1993 }
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable17:
        DC32     guc_corrected_image

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable17_1:
        DC32     `oled_twink::s_countchar`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable17_2:
        DC32     `oled_twink::s_num`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable17_3:
        DC32     OLED_16X8GB2312

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable17_4:
        DC32     F6x8

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 
//    15 bytes in section .bss
//    80 bytes in section .data
// 3 428 bytes in section .rodata
// 5 474 bytes in section .text
// 
// 5 474 bytes of CODE  memory
// 3 428 bytes of CONST memory
//    95 bytes of DATA  memory
//
//Errors: none
//Warnings: none
