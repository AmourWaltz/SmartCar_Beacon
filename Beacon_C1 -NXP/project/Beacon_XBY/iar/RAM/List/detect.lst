###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       15/May/2018  02:19:13
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\app\signal\src\detect.c
#    Command line =  
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\app\signal\src\detect.c
#        -D LPLD_K60 -lCN
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\RAM\List -lB
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\RAM\List -o
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\RAM\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\app\ -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\CPU\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\common\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\LPLD\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\LPLD\HW\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\FatFs\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\FatFs\option\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\USB\common\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\USB\driver\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\USB\descriptor\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\..\..\lib\USB\class\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\app\control\inc\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\app\control\src\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\app\debug\inc\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\app\debug\src\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\app\device\inc\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\app\device\src\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\app\driver\inc\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\app\driver\src\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\app\signal\inc\
#        -I
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\app\signal\src\
#        -I D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\..\app\system\
#        -Ol -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\RAM\List\detect.lst
#    Object file  =  
#        D:\Freescale\信标\13thBeacon\project\Beacon_XBY\iar\RAM\Obj\detect.o
#
###############################################################################

D:\Freescale\信标\13thBeacon\project\Beacon_XBY\app\signal\src\detect.c
      1          #include "include.h"
      2          #include "detect.h"

   \                                 In section .bss, align 1
      3          uint8 inround_flag = 0;
   \                     inround_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      4          uint8 outround_flag = 0;
   \                     outround_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      5          uint8 outround_line = 0;
   \                     outround_line:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
      6          void image_pre_process()
      7          {
   \                     image_pre_process: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
      8              int i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
      9              int jump_line = 0;
   \   00000006   0x2400             MOVS     R4,#+0
     10              for(i=0; i<IMAGE_ROW; i++)
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0xE031             B.N      ??image_pre_process_0
     11              {
     12                  edge_left_temp[i]=edge_left[i];
   \                     ??image_pre_process_1: (+1)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable1
   \   00000010   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   00000018   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
     13                  edge_right_temp[i]=edge_right[i];
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000020   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable1_3
   \   00000028   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
     14                  track_width[i]=edge_right[i]-edge_left[i];
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000030   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable1
   \   00000038   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000003C   0x1A40             SUBS     R0,R0,R1
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00000042   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
     15                  track_center_temp[i]=track_center[i];
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable1_5
   \   0000004A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable1_6
   \   00000052   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
     16                  if(track_center[i] == NOT_FOUND)
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable1_5
   \   0000005A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000005E   0xF5B0 0x4F7F      CMP      R0,#+65280
   \   00000062   0xD104             BNE.N    ??image_pre_process_2
     17                  {
     18                      track_width[i] = 0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   0000006A   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
     19                  }
     20              }
   \                     ??image_pre_process_2: (+1)
   \   0000006E   0x1C64             ADDS     R4,R4,#+1
   \                     ??image_pre_process_0: (+1)
   \   00000070   0x2C40             CMP      R4,#+64
   \   00000072   0xDBCB             BLT.N    ??image_pre_process_1
     21              
     22              for(i=1; i<IMAGE_ROW; i++)
   \   00000074   0x2401             MOVS     R4,#+1
   \   00000076   0xE000             B.N      ??image_pre_process_3
   \                     ??image_pre_process_4: (+1)
   \   00000078   0x1C64             ADDS     R4,R4,#+1
   \                     ??image_pre_process_3: (+1)
   \   0000007A   0x2C40             CMP      R4,#+64
   \   0000007C   0xDA06             BGE.N    ??image_pre_process_5
     23              {
     24                  if(track_center[i] == NOT_FOUND)
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable1_5
   \   00000082   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000086   0xF5B0 0x4F7F      CMP      R0,#+65280
   \   0000008A   0xD1F5             BNE.N    ??image_pre_process_4
     25                  {
     26                      break;
     27                  }
     28                  //else if((i<IMAGE_ROW-1)&&(i>30)&&((track_center[i-1]-track_center[i]>20)||(track_center[i-1]-track_center[i]<-20)))
     29                  {
     30                  //    break;
     31                  }
     32                  //else if((i>40)&&(fabs(get_cur(track_center, i))>10))
     33                  {
     34                      //   break;
     35                  }
     36              }
     37              img_furthest_line = i;
   \                     ??image_pre_process_5: (+1)
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable1_7
   \   00000090   0x6004             STR      R4,[R0, #+0]
     38                      for(i=5; i<IMAGE_ROW-5; i++)
   \   00000092   0x2405             MOVS     R4,#+5
   \   00000094   0xE004             B.N      ??image_pre_process_6
     39                      {
     40                          if(get_cur(track_width, i)>5)  //通过跳变判定环道起始行
     41                              //if(track_width[i+6]-track_width[i]>10)  //通过跳变判定环道起始行
     42                          {
     43                              //center_slope = cetr_k;
     44                              //center_b = cetr_b;
     45                              Detect.wide_jump_flag = 1;
     46                              
     47                              break;
     48                          }
     49                          else
     50                          {
     51                              
     52                              Detect.wide_jump_flag = 0;
   \                     ??image_pre_process_7: (+1)
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable1_8
   \   0000009C   0x7108             STRB     R0,[R1, #+4]
     53                          }
   \   0000009E   0x1C64             ADDS     R4,R4,#+1
   \                     ??image_pre_process_6: (+1)
   \   000000A0   0x2C3B             CMP      R4,#+59
   \   000000A2   0xDA0A             BGE.N    ??image_pre_process_8
   \   000000A4   0x0021             MOVS     R1,R4
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   000000AA   0x.... 0x....      BL       get_cur
   \   000000AE   0x2806             CMP      R0,#+6
   \   000000B0   0xDBF1             BLT.N    ??image_pre_process_7
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable1_8
   \   000000B8   0x7108             STRB     R0,[R1, #+4]
     54                      }
     55                              jump_line = i;
     56                      get_slope(track_center,jump_line, &center_slope, &center_b, NULL);
   \                     ??image_pre_process_8: (+1)
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0x9000             STR      R0,[SP, #+0]
   \   000000BE   0x.... 0x....      LDR.W    R3,??DataTable1_9
   \   000000C2   0x.... 0x....      LDR.W    R2,??DataTable1_10
   \   000000C6   0x0021             MOVS     R1,R4
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable1_5
   \   000000CC   0x.... 0x....      BL       get_slope
     57          }
   \   000000D0   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
     58          int round_detect()
     59          {
   \                     round_detect: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB089             SUB      SP,SP,#+36
     60          
     61              //环道
     62              int jump_count = 0;
   \   00000006   0x2000             MOVS     R0,#+0
     63              int jump_flag = 0;
   \   00000008   0x2000             MOVS     R0,#+0
     64              int jump_start = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
     65              int jump_end = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
     66              int round_start_line = 0;
   \   0000000E   0xF05F 0x0800      MOVS     R8,#+0
     67              int round_end_line = 0;
   \   00000012   0x2400             MOVS     R4,#+0
     68              int black_start_line = 0;
   \   00000014   0xF05F 0x0900      MOVS     R9,#+0
     69              int hole_count = 0;
   \   00000018   0xF05F 0x0A00      MOVS     R10,#+0
     70              uint8 u8FindLongWidthFlag = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
     71              uint8 u8FindLongWidthEndFlag = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
     72              uint8 i8EndBlackDiff = 0;
   \   00000020   0x2000             MOVS     R0,#+0
     73              int round_edge_start_line[2] = {0,0};
   \   00000022   0xA806             ADD      R0,SP,#+24
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0xE9C0 0x1200      STRD     R1,R2,[R0, #+0]
     74              int round_edge_start_flag[2] = {0,0};
   \   0000002C   0xA804             ADD      R0,SP,#+16
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0xE9C0 0x1200      STRD     R1,R2,[R0, #+0]
     75              int round_line_count[2] = {0,0};
   \   00000036   0xA802             ADD      R0,SP,#+8
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0xE9C0 0x1200      STRD     R1,R2,[R0, #+0]
     76              uint8 round_flag = 0;
   \   00000040   0x2500             MOVS     R5,#+0
     77              static uint8 out_round_flag = 0;
     78              static uint8 out_round_ready_flag = 0;
     79              static uint8 inround_ready_flag = 0;
     80              int round_end_flag = 0;
   \   00000042   0x2600             MOVS     R6,#+0
     81              static int inround_car_distance;
     82              static int outround_car_distance;
     83              //环道
     84              int i, j;
     85              int center_temp=0;
   \   00000044   0x2000             MOVS     R0,#+0
     86              float cetr_k = 0;
   \   00000046   0x2700             MOVS     R7,#+0
     87              float cetr_b = 0;
   \   00000048   0x2000             MOVS     R0,#+0
     88              static uint8 beeper_counter = 0;
     89          
     90              static float dir_p_temp;
     91              static float dir_d_temp;
     92              static uint8 flag = 0;
     93              static uint8 round_state = 0;
     94          
     95              if(flag == 0)
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable1_11
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD10F             BNE.N    ??round_detect_0
     96              {
     97                  dir_p_temp = gl_direction_p;
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable1_12
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable1_13
   \   0000005E   0x6008             STR      R0,[R1, #+0]
     98                  dir_d_temp = gl_direction_d;
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable1_14
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable1_15
   \   0000006A   0x6008             STR      R0,[R1, #+0]
     99                  flag = 1;
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable1_11
   \   00000072   0x7008             STRB     R0,[R1, #+0]
    100              }
    101              //环道识别
    102              if(Detect.inround_flag==0)
   \                     ??round_detect_0: (+1)
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   00000078   0x7800             LDRB     R0,[R0, #+0]
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xF040 0x8140      BNE.W    ??round_detect_1
    103              {
    104                  if((img_furthest_line>30)
    105                          &&((track_width[5]<120)&&(track_width[5]>80))
    106                          &&((track_width[10]<115)&&(track_width[10]>75))
    107                          &&((track_width[14]<110)&&(track_width[14]>70))
    108                          &&((track_width[17]<100)&&(track_width[17]>60)))
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable1_7
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x281F             CMP      R0,#+31
   \   00000088   0xDB79             BLT.N    ??round_detect_2
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   0000008E   0x6940             LDR      R0,[R0, #+20]
   \   00000090   0x3851             SUBS     R0,R0,#+81
   \   00000092   0x2827             CMP      R0,#+39
   \   00000094   0xD273             BCS.N    ??round_detect_2
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   0000009A   0x6A80             LDR      R0,[R0, #+40]
   \   0000009C   0x384C             SUBS     R0,R0,#+76
   \   0000009E   0x2827             CMP      R0,#+39
   \   000000A0   0xD26D             BCS.N    ??round_detect_2
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   000000A6   0x6B80             LDR      R0,[R0, #+56]
   \   000000A8   0x3847             SUBS     R0,R0,#+71
   \   000000AA   0x2827             CMP      R0,#+39
   \   000000AC   0xD267             BCS.N    ??round_detect_2
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   000000B2   0x6C40             LDR      R0,[R0, #+68]
   \   000000B4   0x383D             SUBS     R0,R0,#+61
   \   000000B6   0x2827             CMP      R0,#+39
   \   000000B8   0xD261             BCS.N    ??round_detect_2
    109                  {
    110                      for(i=5; i<IMAGE_ROW-5; i++)
   \   000000BA   0xF05F 0x0B05      MOVS     R11,#+5
   \   000000BE   0xE001             B.N      ??round_detect_3
   \                     ??round_detect_4: (+1)
   \   000000C0   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??round_detect_3: (+1)
   \   000000C4   0xF1BB 0x0F3B      CMP      R11,#+59
   \   000000C8   0xDA59             BGE.N    ??round_detect_2
    111                      {
    112                          if(get_cur(track_width, i)>5)  //通过跳变判定环道起始行
   \   000000CA   0x4659             MOV      R1,R11
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   000000D0   0x.... 0x....      BL       get_cur
   \   000000D4   0x2806             CMP      R0,#+6
   \   000000D6   0xDBF3             BLT.N    ??round_detect_4
    113                              //if(track_width[i+6]-track_width[i]>10)  //通过跳变判定环道起始行
    114                          {
    115                              round_start_line = i+2;
   \   000000D8   0xF11B 0x0802      ADDS     R8,R11,#+2
    116                              //get_slope(track_center, round_start_line-2, &cetr_k, &cetr_b, NULL);
    117                              //center_slope = cetr_k;
    118                              //center_b = cetr_b;
    119                              for(j = round_start_line; j < img_furthest_line; j++)
   \   000000DC   0x46C3             MOV      R11,R8
   \   000000DE   0xE011             B.N      ??round_detect_5
    120                              {
    121                                  center_temp = center_slope*j+center_b;
    122                                  center_temp = Limiter(center_temp, 0, 127);
    123                                  //if((s_round_r_select == R500_MODE))
    124                                  {
    125                                      //if((center_temp>0)&&(center_temp<IMAGE_NUM-0))
    126                                      if((center_temp>edge_left[j])&&(center_temp<edge_right[j]))
    127                                      {
    128                                          if(cur_image[j][center_temp] == 0)
   \                     ??round_detect_6: (+1)
   \   000000E0   0x.... 0x....      LDR.W    R1,??DataTable1_16
   \   000000E4   0x6809             LDR      R1,[R1, #+0]
   \   000000E6   0x2280             MOVS     R2,#+128
   \   000000E8   0xFB02 0xF20B      MUL      R2,R2,R11
   \   000000EC   0x4411             ADD      R1,R1,R2
   \   000000EE   0x5C08             LDRB     R0,[R1, R0]
   \   000000F0   0x2800             CMP      R0,#+0
   \   000000F2   0xD105             BNE.N    ??round_detect_7
    129                                          {
    130                                              if(hole_count == 0)     //搜黑圈行数
   \   000000F4   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000F8   0xD100             BNE.N    ??round_detect_8
    131                                              {
    132                                                  black_start_line = j;
   \   000000FA   0x46D9             MOV      R9,R11
    133                                              }
    134          
    135                                              hole_count++;
   \                     ??round_detect_8: (+1)
   \   000000FC   0xF11A 0x0A01      ADDS     R10,R10,#+1
    136                                          }
    137                                      }
   \                     ??round_detect_7: (+1)
   \   00000100   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??round_detect_5: (+1)
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable1_7
   \   00000108   0x6800             LDR      R0,[R0, #+0]
   \   0000010A   0x4583             CMP      R11,R0
   \   0000010C   0xDA27             BGE.N    ??round_detect_9
   \   0000010E   0x4658             MOV      R0,R11
   \   00000110   0x.... 0x....      BL       __aeabi_i2f
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable1_10
   \   00000118   0x6809             LDR      R1,[R1, #+0]
   \   0000011A   0x.... 0x....      BL       __aeabi_fmul
   \   0000011E   0x.... 0x....      LDR.W    R1,??DataTable1_9
   \   00000122   0x6809             LDR      R1,[R1, #+0]
   \   00000124   0x.... 0x....      BL       __aeabi_fadd
   \   00000128   0x.... 0x....      BL       __aeabi_f2iz
   \   0000012C   0x.... 0x....      LDR.W    R2,??DataTable1_17  ;; 0x42fe0000
   \   00000130   0x2100             MOVS     R1,#+0
   \   00000132   0x9100             STR      R1,[SP, #+0]
   \   00000134   0x9201             STR      R2,[SP, #+4]
   \   00000136   0x.... 0x....      BL       __aeabi_i2f
   \   0000013A   0x9A01             LDR      R2,[SP, #+4]
   \   0000013C   0x9900             LDR      R1,[SP, #+0]
   \   0000013E   0x.... 0x....      BL       Limiter
   \   00000142   0x.... 0x....      BL       __aeabi_f2iz
   \   00000146   0x.... 0x....      LDR.W    R1,??DataTable1
   \   0000014A   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \   0000014E   0x4281             CMP      R1,R0
   \   00000150   0xDA05             BGE.N    ??round_detect_10
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   00000156   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \   0000015A   0x4288             CMP      R0,R1
   \   0000015C   0xDBC0             BLT.N    ??round_detect_6
    138                                      else
    139                                      {
    140                                          break;
    141                                      }
    142                                  }
    143          
    144                              }
    145                              if((hole_count > 5)&&(cetr_k>-1.5)&&(cetr_k<1.5))
   \                     ??round_detect_10: (+1)
   \                     ??round_detect_9: (+1)
   \   0000015E   0xF1BA 0x0F06      CMP      R10,#+6
   \   00000162   0xDB0C             BLT.N    ??round_detect_11
   \   00000164   0x0038             MOVS     R0,R7
   \   00000166   0x.... 0x....      LDR.W    R1,??DataTable1_18  ;; 0xbfbfffff
   \   0000016A   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000016E   0xD806             BHI.N    ??round_detect_11
   \   00000170   0x0038             MOVS     R0,R7
   \   00000172   0xF05F 0x517F      MOVS     R1,#+1069547520
   \   00000176   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000017A   0xD200             BCS.N    ??round_detect_11
    146                              {
    147                                  round_flag = 1;
   \   0000017C   0x2501             MOVS     R5,#+1
    148                              }
    149                              break;
    150                          }
    151                      }
    152                  }
    153          
    154                  if(round_flag)
   \                     ??round_detect_11: (+1)
   \                     ??round_detect_2: (+1)
   \   0000017E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000180   0x2D00             CMP      R5,#+0
   \   00000182   0xF000 0x8096      BEQ.W    ??round_detect_12
    155                  {
    156                      round_state = 1;
   \   00000186   0x2001             MOVS     R0,#+1
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable1_19
   \   0000018C   0x7008             STRB     R0,[R1, #+0]
    157                      for(i=round_start_line+5; i<img_furthest_line; i++) //搜环形结束
   \   0000018E   0xF118 0x0B05      ADDS     R11,R8,#+5
   \   00000192   0xE001             B.N      ??round_detect_13
   \                     ??round_detect_14: (+1)
   \   00000194   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??round_detect_13: (+1)
   \   00000198   0x.... 0x....      LDR.W    R0,??DataTable1_7
   \   0000019C   0x6800             LDR      R0,[R0, #+0]
   \   0000019E   0x4583             CMP      R11,R0
   \   000001A0   0xDA1C             BGE.N    ??round_detect_15
    158                      {
    159                          if((track_width[i-2]-track_width[i]>0)&&(track_width[i-1]-track_width[i+1]>0))
   \   000001A2   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   000001A6   0xEB00 0x008B      ADD      R0,R0,R11, LSL #+2
   \   000001AA   0xF850 0x0C08      LDR      R0,[R0, #-8]
   \   000001AE   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   000001B2   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \   000001B6   0x1A40             SUBS     R0,R0,R1
   \   000001B8   0x2801             CMP      R0,#+1
   \   000001BA   0xDBEB             BLT.N    ??round_detect_14
   \   000001BC   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   000001C0   0xEB00 0x008B      ADD      R0,R0,R11, LSL #+2
   \   000001C4   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   000001C8   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   000001CC   0xEB01 0x018B      ADD      R1,R1,R11, LSL #+2
   \   000001D0   0x6849             LDR      R1,[R1, #+4]
   \   000001D2   0x1A40             SUBS     R0,R0,R1
   \   000001D4   0x2801             CMP      R0,#+1
   \   000001D6   0xDBDD             BLT.N    ??round_detect_14
    160                          {
    161                              round_end_line = i;
   \   000001D8   0x465C             MOV      R4,R11
    162                              round_end_flag = 1;
   \   000001DA   0x2601             MOVS     R6,#+1
    163                              break;
    164                          }
    165                      }
    166                      if(round_end_flag == 0)
   \                     ??round_detect_15: (+1)
   \   000001DC   0x2E00             CMP      R6,#+0
   \   000001DE   0xD102             BNE.N    ??round_detect_16
    167                      {
    168                          round_end_line = img_furthest_line;
   \   000001E0   0x.... 0x....      LDR.W    R0,??DataTable1_7
   \   000001E4   0x6804             LDR      R4,[R0, #+0]
    169                      }
    170                      //找环形特征起始行
    171                      for(i = round_start_line-6; i<round_end_line; i++)      //左边界
   \                     ??round_detect_16: (+1)
   \   000001E6   0xF1B8 0x0B06      SUBS     R11,R8,#+6
   \   000001EA   0xE001             B.N      ??round_detect_17
   \                     ??round_detect_18: (+1)
   \   000001EC   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??round_detect_17: (+1)
   \   000001F0   0x45A3             CMP      R11,R4
   \   000001F2   0xDA11             BGE.N    ??round_detect_19
    172                      {
    173                          if(edge_left[i]+1<=edge_left[i-2])
   \   000001F4   0x.... 0x....      LDR.W    R0,??DataTable1
   \   000001F8   0xEB00 0x008B      ADD      R0,R0,R11, LSL #+2
   \   000001FC   0xF850 0x0C08      LDR      R0,[R0, #-8]
   \   00000200   0x.... 0x....      LDR.W    R1,??DataTable1
   \   00000204   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \   00000208   0x1C49             ADDS     R1,R1,#+1
   \   0000020A   0x4288             CMP      R0,R1
   \   0000020C   0xDBEE             BLT.N    ??round_detect_18
    174                          {
    175                              round_edge_start_line[LEFT_EDGE] = i-1;
   \   0000020E   0xF1BB 0x0001      SUBS     R0,R11,#+1
   \   00000212   0x9006             STR      R0,[SP, #+24]
    176                              round_edge_start_flag[LEFT_EDGE] = 1;
   \   00000214   0x2001             MOVS     R0,#+1
   \   00000216   0x9004             STR      R0,[SP, #+16]
    177                              break;
    178                          }
    179                      }
    180                      if(round_edge_start_flag[LEFT_EDGE])
   \                     ??round_detect_19: (+1)
   \   00000218   0x9804             LDR      R0,[SP, #+16]
   \   0000021A   0x2800             CMP      R0,#+0
   \   0000021C   0xD017             BEQ.N    ??round_detect_20
    181                      {
    182                          //for(i = round_start_line+2; i<round_end_line+1; i++)
    183                          for(i = round_edge_start_line[LEFT_EDGE]+2; i<round_end_line+1; i++)
   \   0000021E   0x9806             LDR      R0,[SP, #+24]
   \   00000220   0xF110 0x0B02      ADDS     R11,R0,#+2
   \   00000224   0xE004             B.N      ??round_detect_21
    184                          {
    185                              if(edge_left[i-2]>=edge_left[i])
    186                              {
    187                                  round_line_count[LEFT_EDGE]++;
   \                     ??round_detect_22: (+1)
   \   00000226   0x9802             LDR      R0,[SP, #+8]
   \   00000228   0x1C40             ADDS     R0,R0,#+1
   \   0000022A   0x9002             STR      R0,[SP, #+8]
    188                              }
   \   0000022C   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??round_detect_21: (+1)
   \   00000230   0x1C60             ADDS     R0,R4,#+1
   \   00000232   0x4583             CMP      R11,R0
   \   00000234   0xDA0B             BGE.N    ??round_detect_20
   \   00000236   0x.... 0x....      LDR.W    R0,??DataTable1
   \   0000023A   0xEB00 0x008B      ADD      R0,R0,R11, LSL #+2
   \   0000023E   0xF850 0x0C08      LDR      R0,[R0, #-8]
   \   00000242   0x.... 0x....      LDR.W    R1,??DataTable1
   \   00000246   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \   0000024A   0x4288             CMP      R0,R1
   \   0000024C   0xDAEB             BGE.N    ??round_detect_22
    189                              else
    190                              {
    191                                  break;
    192                              }
    193                          }
    194                      }
    195          
    196                      for(i = round_start_line-6; i<round_end_line; i++)      //右边界
   \                     ??round_detect_20: (+1)
   \   0000024E   0xF1B8 0x0B06      SUBS     R11,R8,#+6
   \   00000252   0xE001             B.N      ??round_detect_23
   \                     ??round_detect_24: (+1)
   \   00000254   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??round_detect_23: (+1)
   \   00000258   0x45A3             CMP      R11,R4
   \   0000025A   0xDA11             BGE.N    ??round_detect_25
    197                      {
    198                          if(edge_right[i]>=edge_right[i-2]+1)
   \   0000025C   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000260   0xF850 0x002B      LDR      R0,[R0, R11, LSL #+2]
   \   00000264   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   00000268   0xEB01 0x018B      ADD      R1,R1,R11, LSL #+2
   \   0000026C   0xF851 0x1C08      LDR      R1,[R1, #-8]
   \   00000270   0x1C49             ADDS     R1,R1,#+1
   \   00000272   0x4288             CMP      R0,R1
   \   00000274   0xDBEE             BLT.N    ??round_detect_24
    199                          {
    200                              round_edge_start_line[RIGHT_EDGE] = i-1;
   \   00000276   0xF1BB 0x0001      SUBS     R0,R11,#+1
   \   0000027A   0x9007             STR      R0,[SP, #+28]
    201                              round_edge_start_flag[RIGHT_EDGE] = 1;
   \   0000027C   0x2001             MOVS     R0,#+1
   \   0000027E   0x9005             STR      R0,[SP, #+20]
    202                              break;
    203                          }
    204                      }
    205                      if(round_edge_start_flag[RIGHT_EDGE])
   \                     ??round_detect_25: (+1)
   \   00000280   0x9805             LDR      R0,[SP, #+20]
   \   00000282   0x2800             CMP      R0,#+0
   \   00000284   0xD015             BEQ.N    ??round_detect_12
    206                      {
    207                          //for(i = round_start_line+2; i<round_end_line+3; i++)
    208                          for(i = round_edge_start_line[RIGHT_EDGE]+2; i<round_end_line+3; i++)
   \   00000286   0x9807             LDR      R0,[SP, #+28]
   \   00000288   0xF110 0x0B02      ADDS     R11,R0,#+2
   \   0000028C   0xE004             B.N      ??round_detect_26
    209                          {
    210                              if(edge_right[i]>=edge_right[i-2])
    211                              {
    212                                  round_line_count[RIGHT_EDGE]++;
   \                     ??round_detect_27: (+1)
   \   0000028E   0x9803             LDR      R0,[SP, #+12]
   \   00000290   0x1C40             ADDS     R0,R0,#+1
   \   00000292   0x9003             STR      R0,[SP, #+12]
    213                              }
   \   00000294   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??round_detect_26: (+1)
   \   00000298   0x1CE0             ADDS     R0,R4,#+3
   \   0000029A   0x4583             CMP      R11,R0
   \   0000029C   0xDA09             BGE.N    ??round_detect_12
   \   0000029E   0x....             LDR.N    R0,??DataTable1_2
   \   000002A0   0xF850 0x002B      LDR      R0,[R0, R11, LSL #+2]
   \   000002A4   0x....             LDR.N    R1,??DataTable1_2
   \   000002A6   0xEB01 0x018B      ADD      R1,R1,R11, LSL #+2
   \   000002AA   0xF851 0x1C08      LDR      R1,[R1, #-8]
   \   000002AE   0x4288             CMP      R0,R1
   \   000002B0   0xDAED             BGE.N    ??round_detect_27
    214                              else
    215                              {
    216                                  break;
    217                              }
    218                          }
    219                      }
    220                  }
    221          
    222                  i8EndBlackDiff = black_start_line - round_start_line;
   \                     ??round_detect_12: (+1)
   \   000002B2   0xEBB9 0x0008      SUBS     R0,R9,R8
    223                  if(((round_line_count[RIGHT_EDGE] > 5)&&(round_line_count[LEFT_EDGE] > 5))
    224                          &&(round_end_line - round_start_line > 8)
    225                          &&(i8EndBlackDiff > 10))
   \   000002B6   0x9903             LDR      R1,[SP, #+12]
   \   000002B8   0x2906             CMP      R1,#+6
   \   000002BA   0xDB0F             BLT.N    ??round_detect_28
   \   000002BC   0x9902             LDR      R1,[SP, #+8]
   \   000002BE   0x2906             CMP      R1,#+6
   \   000002C0   0xDB0C             BLT.N    ??round_detect_28
   \   000002C2   0xEBB4 0x0108      SUBS     R1,R4,R8
   \   000002C6   0x2909             CMP      R1,#+9
   \   000002C8   0xDB08             BLT.N    ??round_detect_28
   \   000002CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002CC   0x280B             CMP      R0,#+11
   \   000002CE   0xDB05             BLT.N    ??round_detect_28
    226                      //&& ((i8EndBlackDiff >= 0) ))
    227                  {
    228                      inround_ready_flag = 1;
   \   000002D0   0x2001             MOVS     R0,#+1
   \   000002D2   0x....             LDR.N    R1,??DataTable1_20
   \   000002D4   0x7008             STRB     R0,[R1, #+0]
    229                      round_state = 2;
   \   000002D6   0x2002             MOVS     R0,#+2
   \   000002D8   0x....             LDR.N    R1,??DataTable1_19
   \   000002DA   0x7008             STRB     R0,[R1, #+0]
    230                  }
    231                  if((inround_ready_flag))
   \                     ??round_detect_28: (+1)
   \   000002DC   0x....             LDR.N    R0,??DataTable1_20
   \   000002DE   0x7800             LDRB     R0,[R0, #+0]
   \   000002E0   0x2800             CMP      R0,#+0
   \   000002E2   0xD00D             BEQ.N    ??round_detect_1
    232                  {
    233                      inround_ready_flag = 0;
   \   000002E4   0x2000             MOVS     R0,#+0
   \   000002E6   0x....             LDR.N    R1,??DataTable1_20
   \   000002E8   0x7008             STRB     R0,[R1, #+0]
    234                      Detect.inround_flag = 1;
   \   000002EA   0x2001             MOVS     R0,#+1
   \   000002EC   0x....             LDR.N    R1,??DataTable1_8
   \   000002EE   0x7008             STRB     R0,[R1, #+0]
    235                      round_state = 3;
   \   000002F0   0x2003             MOVS     R0,#+3
   \   000002F2   0x....             LDR.N    R1,??DataTable1_19
   \   000002F4   0x7008             STRB     R0,[R1, #+0]
    236                      round_count ++;
   \   000002F6   0x....             LDR.N    R0,??DataTable1_21
   \   000002F8   0x7800             LDRB     R0,[R0, #+0]
   \   000002FA   0x1C40             ADDS     R0,R0,#+1
   \   000002FC   0x....             LDR.N    R1,??DataTable1_21
   \   000002FE   0x7008             STRB     R0,[R1, #+0]
    237                  }
    238              }
    239              
    240          #ifdef GET_ROUND
    241          
    242              if(Detect.inround_flag == 0)
   \                     ??round_detect_1: (+1)
   \   00000300   0x....             LDR.N    R0,??DataTable1_8
   \   00000302   0x7800             LDRB     R0,[R0, #+0]
   \   00000304   0x2800             CMP      R0,#+0
   \   00000306   0xD105             BNE.N    ??round_detect_29
    243              {
    244                  inround_car_distance = gl_car_running_distance;
   \   00000308   0x....             LDR.N    R0,??DataTable1_22
   \   0000030A   0x6800             LDR      R0,[R0, #+0]
   \   0000030C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000310   0x....             LDR.N    R1,??DataTable1_23
   \   00000312   0x6008             STR      R0,[R1, #+0]
    245              }
    246              if(Detect.inround_flag == 1)        //如果入环
   \                     ??round_detect_29: (+1)
   \   00000314   0x....             LDR.N    R0,??DataTable1_8
   \   00000316   0x7800             LDRB     R0,[R0, #+0]
   \   00000318   0x2801             CMP      R0,#+1
   \   0000031A   0xF040 0x8108      BNE.W    ??round_detect_30
    247              {
    248                  Beep_On();
   \   0000031E   0x.... 0x....      BL       Beep_On
    249                  beeper_counter=0;
   \   00000322   0x2000             MOVS     R0,#+0
   \   00000324   0x....             LDR.N    R1,??DataTable1_24
   \   00000326   0x7008             STRB     R0,[R1, #+0]
    250          
    251                  //if(gl_car_running_distance - inround_car_distance >10)
    252                  {
    253                      if(round_mode == ROUND_LEFT)
   \   00000328   0x....             LDR.N    R0,??DataTable1_25
   \   0000032A   0x7800             LDRB     R0,[R0, #+0]
   \   0000032C   0x2800             CMP      R0,#+0
   \   0000032E   0xF040 0x807F      BNE.W    ??round_detect_31
    254                      {
    255                          Detect.outround_flag = 0;
   \   00000332   0x2000             MOVS     R0,#+0
   \   00000334   0x....             LDR.N    R1,??DataTable1_8
   \   00000336   0x7048             STRB     R0,[R1, #+1]
    256                          Detect.outround_line = 0;
   \   00000338   0x2000             MOVS     R0,#+0
   \   0000033A   0x....             LDR.N    R1,??DataTable1_8
   \   0000033C   0x7088             STRB     R0,[R1, #+2]
    257                          for(i=0; i<IMAGE_ROW ; i++)
   \   0000033E   0xF05F 0x0B00      MOVS     R11,#+0
   \   00000342   0xE022             B.N      ??round_detect_32
    258                          {
    259          
    260                              if((i>5)&&((get_cur(edge_left, i)<-7))//&&(i<20)||(edge_left[i]==0)
    261                                      &&(gl_car_running_distance - inround_car_distance >50))
   \                     ??round_detect_33: (+1)
   \   00000344   0xF1BB 0x0F06      CMP      R11,#+6
   \   00000348   0xDB1D             BLT.N    ??round_detect_34
   \   0000034A   0x4659             MOV      R1,R11
   \   0000034C   0x....             LDR.N    R0,??DataTable1
   \   0000034E   0x.... 0x....      BL       get_cur
   \   00000352   0xF110 0x0F07      CMN      R0,#+7
   \   00000356   0xDA16             BGE.N    ??round_detect_34
   \   00000358   0x....             LDR.N    R0,??DataTable1_23
   \   0000035A   0x6800             LDR      R0,[R0, #+0]
   \   0000035C   0x.... 0x....      BL       __aeabi_i2f
   \   00000360   0x0001             MOVS     R1,R0
   \   00000362   0x....             LDR.N    R0,??DataTable1_22
   \   00000364   0x6800             LDR      R0,[R0, #+0]
   \   00000366   0x.... 0x....      BL       __aeabi_fsub
   \   0000036A   0x....             LDR.N    R1,??DataTable1_26  ;; 0x42480001
   \   0000036C   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000370   0xD809             BHI.N    ??round_detect_34
    262                              {
    263                                  //track_center_temp[45] = NOT_FOUND;
    264                                  //s_outround_flag = 1;
    265          
    266                                  if(Detect.outround_flag == 0)
   \   00000372   0x....             LDR.N    R0,??DataTable1_8
   \   00000374   0x7840             LDRB     R0,[R0, #+1]
   \   00000376   0x2800             CMP      R0,#+0
   \   00000378   0xD105             BNE.N    ??round_detect_34
    267                                  {
    268                                      Detect.outround_flag = 1;
   \   0000037A   0x2001             MOVS     R0,#+1
   \   0000037C   0x....             LDR.N    R1,??DataTable1_8
   \   0000037E   0x7048             STRB     R0,[R1, #+1]
    269                                      Detect.outround_line = i;
   \   00000380   0x....             LDR.N    R0,??DataTable1_8
   \   00000382   0xF880 0xB002      STRB     R11,[R0, #+2]
    270                                  }
    271                                  //break;
    272                              }
    273          
    274                              //process!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    275                          }
   \                     ??round_detect_34: (+1)
   \   00000386   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??round_detect_32: (+1)
   \   0000038A   0xF1BB 0x0F40      CMP      R11,#+64
   \   0000038E   0xDBD9             BLT.N    ??round_detect_33
    276                          for(i=3; i<7 ; i++)
   \   00000390   0xF05F 0x0B03      MOVS     R11,#+3
   \   00000394   0xE001             B.N      ??round_detect_35
   \                     ??round_detect_36: (+1)
   \   00000396   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??round_detect_35: (+1)
   \   0000039A   0xF1BB 0x0F07      CMP      R11,#+7
   \   0000039E   0xDA04             BGE.N    ??round_detect_37
    277                          {
    278                              if(edge_right[i] == IMAGE_NUM - 1)
   \   000003A0   0x....             LDR.N    R0,??DataTable1_2
   \   000003A2   0xF850 0x002B      LDR      R0,[R0, R11, LSL #+2]
   \   000003A6   0x287F             CMP      R0,#+127
   \   000003A8   0xD0F5             BEQ.N    ??round_detect_36
    279                              {
    280                                  ;
    281                              }
    282                              else
    283                              {
    284                                  break;
    285                              }
    286                          }
    287                          if((i==7)&&(gl_car_running_distance - inround_car_distance >80))
   \                     ??round_detect_37: (+1)
   \   000003AA   0xF1BB 0x0F07      CMP      R11,#+7
   \   000003AE   0xD112             BNE.N    ??round_detect_38
   \   000003B0   0x....             LDR.N    R0,??DataTable1_23
   \   000003B2   0x6800             LDR      R0,[R0, #+0]
   \   000003B4   0x.... 0x....      BL       __aeabi_i2f
   \   000003B8   0x0001             MOVS     R1,R0
   \   000003BA   0x....             LDR.N    R0,??DataTable1_22
   \   000003BC   0x6800             LDR      R0,[R0, #+0]
   \   000003BE   0x.... 0x....      BL       __aeabi_fsub
   \   000003C2   0x....             LDR.N    R1,??DataTable1_27  ;; 0x42a00001
   \   000003C4   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000003C8   0xD805             BHI.N    ??round_detect_38
    288                          {
    289                              //inround_flag = 0;//ROUND_READY_OUT;
    290                              out_round_flag = 1;
   \   000003CA   0x2001             MOVS     R0,#+1
   \   000003CC   0x....             LDR.N    R1,??DataTable1_28
   \   000003CE   0x7008             STRB     R0,[R1, #+0]
    291                              round_state = 5;
   \   000003D0   0x2005             MOVS     R0,#+5
   \   000003D2   0x....             LDR.N    R1,??DataTable1_19
   \   000003D4   0x7008             STRB     R0,[R1, #+0]
    292                          }
    293          
    294                          if((out_round_flag==1)&&(i==3))
   \                     ??round_detect_38: (+1)
   \   000003D6   0x....             LDR.N    R0,??DataTable1_28
   \   000003D8   0x7800             LDRB     R0,[R0, #+0]
   \   000003DA   0x2801             CMP      R0,#+1
   \   000003DC   0xD10E             BNE.N    ??round_detect_39
   \   000003DE   0xF1BB 0x0F03      CMP      R11,#+3
   \   000003E2   0xD10B             BNE.N    ??round_detect_39
    295                          {
    296                              out_round_flag = 0;
   \   000003E4   0x2000             MOVS     R0,#+0
   \   000003E6   0x....             LDR.N    R1,??DataTable1_28
   \   000003E8   0x7008             STRB     R0,[R1, #+0]
    297                              out_round_ready_flag = 1;
   \   000003EA   0x2001             MOVS     R0,#+1
   \   000003EC   0x....             LDR.N    R1,??DataTable1_29
   \   000003EE   0x7008             STRB     R0,[R1, #+0]
    298                              outround_car_distance = gl_car_running_distance;
   \   000003F0   0x....             LDR.N    R0,??DataTable1_22
   \   000003F2   0x6800             LDR      R0,[R0, #+0]
   \   000003F4   0x.... 0x....      BL       __aeabi_f2iz
   \   000003F8   0x....             LDR.N    R1,??DataTable1_30
   \   000003FA   0x6008             STR      R0,[R1, #+0]
    299                          }
    300                          if((gl_car_running_distance - outround_car_distance>10) &&(out_round_ready_flag))
   \                     ??round_detect_39: (+1)
   \   000003FC   0x....             LDR.N    R0,??DataTable1_30
   \   000003FE   0x6800             LDR      R0,[R0, #+0]
   \   00000400   0x.... 0x....      BL       __aeabi_i2f
   \   00000404   0x0001             MOVS     R1,R0
   \   00000406   0x....             LDR.N    R0,??DataTable1_22
   \   00000408   0x6800             LDR      R0,[R0, #+0]
   \   0000040A   0x.... 0x....      BL       __aeabi_fsub
   \   0000040E   0x....             LDR.N    R1,??DataTable1_31  ;; 0x41200001
   \   00000410   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000414   0xF200 0x8096      BHI.W    ??round_detect_40
   \   00000418   0x....             LDR.N    R0,??DataTable1_29
   \   0000041A   0x7800             LDRB     R0,[R0, #+0]
   \   0000041C   0x2800             CMP      R0,#+0
   \   0000041E   0xF000 0x8091      BEQ.W    ??round_detect_40
    301                          {
    302                              out_round_ready_flag = 0;
   \   00000422   0x2000             MOVS     R0,#+0
   \   00000424   0x....             LDR.N    R1,??DataTable1_29
   \   00000426   0x7008             STRB     R0,[R1, #+0]
    303                              Detect.inround_flag = 0;//ROUND_READY_OUT;
   \   00000428   0x2000             MOVS     R0,#+0
   \   0000042A   0x....             LDR.N    R1,??DataTable1_8
   \   0000042C   0x7008             STRB     R0,[R1, #+0]
   \   0000042E   0xE089             B.N      ??round_detect_40
    304                          }
    305          
    306                      }
    307                      else// if(round_mode == ROUND_RIGHT)
    308                      {
    309                          Detect.outround_flag = 0;
   \                     ??round_detect_31: (+1)
   \   00000430   0x2000             MOVS     R0,#+0
   \   00000432   0x....             LDR.N    R1,??DataTable1_8
   \   00000434   0x7048             STRB     R0,[R1, #+1]
    310                          for(i=0; i<IMAGE_ROW ; i++)
   \   00000436   0xF05F 0x0B00      MOVS     R11,#+0
   \   0000043A   0xE021             B.N      ??round_detect_41
    311                          {
    312                              if((i>5)&&((get_cur(edge_right, i)>7))//&&(i<20)||(edge_right[i]==127)
    313                                      &&(gl_car_running_distance - inround_car_distance >50))
   \                     ??round_detect_42: (+1)
   \   0000043C   0xF1BB 0x0F06      CMP      R11,#+6
   \   00000440   0xDB1C             BLT.N    ??round_detect_43
   \   00000442   0x4659             MOV      R1,R11
   \   00000444   0x....             LDR.N    R0,??DataTable1_2
   \   00000446   0x.... 0x....      BL       get_cur
   \   0000044A   0x2808             CMP      R0,#+8
   \   0000044C   0xDB16             BLT.N    ??round_detect_43
   \   0000044E   0x....             LDR.N    R0,??DataTable1_23
   \   00000450   0x6800             LDR      R0,[R0, #+0]
   \   00000452   0x.... 0x....      BL       __aeabi_i2f
   \   00000456   0x0001             MOVS     R1,R0
   \   00000458   0x....             LDR.N    R0,??DataTable1_22
   \   0000045A   0x6800             LDR      R0,[R0, #+0]
   \   0000045C   0x.... 0x....      BL       __aeabi_fsub
   \   00000460   0x....             LDR.N    R1,??DataTable1_26  ;; 0x42480001
   \   00000462   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000466   0xD809             BHI.N    ??round_detect_43
    314                              {
    315                                  //s_outround_flag = 1;
    316          
    317                                  if(Detect.outround_flag == 0)
   \   00000468   0x....             LDR.N    R0,??DataTable1_8
   \   0000046A   0x7840             LDRB     R0,[R0, #+1]
   \   0000046C   0x2800             CMP      R0,#+0
   \   0000046E   0xD105             BNE.N    ??round_detect_43
    318                                  {
    319                                      Detect.outround_flag = 1;
   \   00000470   0x2001             MOVS     R0,#+1
   \   00000472   0x....             LDR.N    R1,??DataTable1_8
   \   00000474   0x7048             STRB     R0,[R1, #+1]
    320                                      Detect.outround_line = i;
   \   00000476   0x....             LDR.N    R0,??DataTable1_8
   \   00000478   0xF880 0xB002      STRB     R11,[R0, #+2]
    321                                  }
    322                                  //track_center_temp[45] = NOT_FOUND;
    323                                  //break;
    324                              }
    325          
    326                              //process!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    327                          }
   \                     ??round_detect_43: (+1)
   \   0000047C   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??round_detect_41: (+1)
   \   00000480   0xF1BB 0x0F40      CMP      R11,#+64
   \   00000484   0xDBDA             BLT.N    ??round_detect_42
    328                          for(i=3; i<7 ; i++)
   \   00000486   0xF05F 0x0B03      MOVS     R11,#+3
   \   0000048A   0xE001             B.N      ??round_detect_44
   \                     ??round_detect_45: (+1)
   \   0000048C   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??round_detect_44: (+1)
   \   00000490   0xF1BB 0x0F07      CMP      R11,#+7
   \   00000494   0xDA04             BGE.N    ??round_detect_46
    329                          {
    330                              if(edge_left[i] == 0)
   \   00000496   0x....             LDR.N    R0,??DataTable1
   \   00000498   0xF850 0x002B      LDR      R0,[R0, R11, LSL #+2]
   \   0000049C   0x2800             CMP      R0,#+0
   \   0000049E   0xD0F5             BEQ.N    ??round_detect_45
    331                              {
    332                                  ;
    333                              }
    334                              else
    335                              {
    336          
    337                                  break;
    338                              }
    339                          }
    340          
    341          
    342                          if((i==7)&&(gl_car_running_distance - inround_car_distance >80))
   \                     ??round_detect_46: (+1)
   \   000004A0   0xF1BB 0x0F07      CMP      R11,#+7
   \   000004A4   0xD112             BNE.N    ??round_detect_47
   \   000004A6   0x....             LDR.N    R0,??DataTable1_23
   \   000004A8   0x6800             LDR      R0,[R0, #+0]
   \   000004AA   0x.... 0x....      BL       __aeabi_i2f
   \   000004AE   0x0001             MOVS     R1,R0
   \   000004B0   0x....             LDR.N    R0,??DataTable1_22
   \   000004B2   0x6800             LDR      R0,[R0, #+0]
   \   000004B4   0x.... 0x....      BL       __aeabi_fsub
   \   000004B8   0x....             LDR.N    R1,??DataTable1_27  ;; 0x42a00001
   \   000004BA   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000004BE   0xD805             BHI.N    ??round_detect_47
    343                          {
    344                              //inround_flag = 0;//ROUND_READY_OUT;
    345                              out_round_flag = 1;
   \   000004C0   0x2001             MOVS     R0,#+1
   \   000004C2   0x....             LDR.N    R1,??DataTable1_28
   \   000004C4   0x7008             STRB     R0,[R1, #+0]
    346                              round_state = 5;
   \   000004C6   0x2005             MOVS     R0,#+5
   \   000004C8   0x....             LDR.N    R1,??DataTable1_19
   \   000004CA   0x7008             STRB     R0,[R1, #+0]
    347                          }
    348          
    349                          if((out_round_flag==1)&&(i==3))
   \                     ??round_detect_47: (+1)
   \   000004CC   0x....             LDR.N    R0,??DataTable1_28
   \   000004CE   0x7800             LDRB     R0,[R0, #+0]
   \   000004D0   0x2801             CMP      R0,#+1
   \   000004D2   0xD10E             BNE.N    ??round_detect_48
   \   000004D4   0xF1BB 0x0F03      CMP      R11,#+3
   \   000004D8   0xD10B             BNE.N    ??round_detect_48
    350                          {
    351                              out_round_flag = 0;
   \   000004DA   0x2000             MOVS     R0,#+0
   \   000004DC   0x....             LDR.N    R1,??DataTable1_28
   \   000004DE   0x7008             STRB     R0,[R1, #+0]
    352                              out_round_ready_flag = 1;
   \   000004E0   0x2001             MOVS     R0,#+1
   \   000004E2   0x....             LDR.N    R1,??DataTable1_29
   \   000004E4   0x7008             STRB     R0,[R1, #+0]
    353                              outround_car_distance = gl_car_running_distance;
   \   000004E6   0x....             LDR.N    R0,??DataTable1_22
   \   000004E8   0x6800             LDR      R0,[R0, #+0]
   \   000004EA   0x.... 0x....      BL       __aeabi_f2iz
   \   000004EE   0x....             LDR.N    R1,??DataTable1_30
   \   000004F0   0x6008             STR      R0,[R1, #+0]
    354                          }
    355                          if((gl_car_running_distance - outround_car_distance>10) &&(out_round_ready_flag))
   \                     ??round_detect_48: (+1)
   \   000004F2   0x....             LDR.N    R0,??DataTable1_30
   \   000004F4   0x6800             LDR      R0,[R0, #+0]
   \   000004F6   0x.... 0x....      BL       __aeabi_i2f
   \   000004FA   0x0001             MOVS     R1,R0
   \   000004FC   0x....             LDR.N    R0,??DataTable1_22
   \   000004FE   0x6800             LDR      R0,[R0, #+0]
   \   00000500   0x.... 0x....      BL       __aeabi_fsub
   \   00000504   0x....             LDR.N    R1,??DataTable1_31  ;; 0x41200001
   \   00000506   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000050A   0xD81B             BHI.N    ??round_detect_40
   \   0000050C   0x....             LDR.N    R0,??DataTable1_29
   \   0000050E   0x7800             LDRB     R0,[R0, #+0]
   \   00000510   0x2800             CMP      R0,#+0
   \   00000512   0xD017             BEQ.N    ??round_detect_40
    356                          {
    357                              out_round_ready_flag = 0;
   \   00000514   0x2000             MOVS     R0,#+0
   \   00000516   0x....             LDR.N    R1,??DataTable1_29
   \   00000518   0x7008             STRB     R0,[R1, #+0]
    358                              out_round_flag = 0;
   \   0000051A   0x2000             MOVS     R0,#+0
   \   0000051C   0x....             LDR.N    R1,??DataTable1_28
   \   0000051E   0x7008             STRB     R0,[R1, #+0]
    359                              Detect.inround_flag = 0;//ROUND_READY_OUT;
   \   00000520   0x2000             MOVS     R0,#+0
   \   00000522   0x....             LDR.N    R1,??DataTable1_8
   \   00000524   0x7008             STRB     R0,[R1, #+0]
    360                              round_state = 0;
   \   00000526   0x2000             MOVS     R0,#+0
   \   00000528   0x....             LDR.N    R1,??DataTable1_19
   \   0000052A   0x7008             STRB     R0,[R1, #+0]
   \   0000052C   0xE00A             B.N      ??round_detect_40
    361                          }
    362          
    363                      }
    364                  }
    365              }
    366              else if(beeper_counter<1)
   \                     ??round_detect_30: (+1)
   \   0000052E   0x....             LDR.N    R0,??DataTable1_24
   \   00000530   0x7800             LDRB     R0,[R0, #+0]
   \   00000532   0x2800             CMP      R0,#+0
   \   00000534   0xD106             BNE.N    ??round_detect_40
    367              {
    368                  Beep_Off();
   \   00000536   0x.... 0x....      BL       Beep_Off
    369                  beeper_counter++;
   \   0000053A   0x....             LDR.N    R0,??DataTable1_24
   \   0000053C   0x7800             LDRB     R0,[R0, #+0]
   \   0000053E   0x1C40             ADDS     R0,R0,#+1
   \   00000540   0x....             LDR.N    R1,??DataTable1_24
   \   00000542   0x7008             STRB     R0,[R1, #+0]
    370              }
    371          
    372                  if( gl_car_running_distance - inround_car_distance >700)
   \                     ??round_detect_40: (+1)
   \   00000544   0x....             LDR.N    R0,??DataTable1_23
   \   00000546   0x6800             LDR      R0,[R0, #+0]
   \   00000548   0x.... 0x....      BL       __aeabi_i2f
   \   0000054C   0x0001             MOVS     R1,R0
   \   0000054E   0x....             LDR.N    R0,??DataTable1_22
   \   00000550   0x6800             LDR      R0,[R0, #+0]
   \   00000552   0x.... 0x....      BL       __aeabi_fsub
   \   00000556   0x....             LDR.N    R1,??DataTable1_32  ;; 0x442f0001
   \   00000558   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000055C   0xD805             BHI.N    ??round_detect_49
    373                  {
    374                      Detect.inround_flag = 0;
   \   0000055E   0x2000             MOVS     R0,#+0
   \   00000560   0x....             LDR.N    R1,??DataTable1_8
   \   00000562   0x7008             STRB     R0,[R1, #+0]
    375                      out_round_flag = 0;
   \   00000564   0x2000             MOVS     R0,#+0
   \   00000566   0x....             LDR.N    R1,??DataTable1_28
   \   00000568   0x7008             STRB     R0,[R1, #+0]
    376                  }
    377          
    378              //环道识别
    379          #endif
    380              /*SD_data[0] = round_flag;
    381              SD_data[1] = img_furthest_line;
    382              SD_data[2] = round_start_line;
    383              SD_data[3] = round_end_line;
    384              SD_data[4] = hole_count;//round_line_count[RIGHT_EDGE];
    385              SD_data[5] = black_start_line;//round_line_count[LEFT_EDGE];
    386              SD_data[6] = round_line_count[0];
    387              SD_data[7] = Detect.inround_flag;
    388              SD_data[8] = 1000*cetr_k;
    389              SD_data[9] = cetr_b;
    390              SD_data[10] = round_edge_start_line[0];
    391              SD_data[11] = round_edge_start_line[1];
    392              SD_data[12] = round_line_count[0];
    393              SD_data[13] = round_line_count[1];
    394              SD_data[14] = 0;
    395              SD_data[15] = Detect.wide_jump_flag;*/
    396              return Detect.inround_flag;
   \                     ??round_detect_49: (+1)
   \   0000056A   0x....             LDR.N    R0,??DataTable1_8
   \   0000056C   0x7800             LDRB     R0,[R0, #+0]
   \   0000056E   0xB009             ADD      SP,SP,#+36
   \   00000570   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    397          }

   \                                 In section .bss, align 1
   \                     `round_detect::out_round_flag`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     `round_detect::out_round_ready_flag`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     `round_detect::inround_ready_flag`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     `round_detect::inround_car_distance`:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     `round_detect::outround_car_distance`:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     `round_detect::beeper_counter`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     `round_detect::dir_p_temp`:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     `round_detect::dir_d_temp`:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     `round_detect::flag`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     `round_detect::round_state`:
   \   00000000                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     edge_left

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     edge_left_temp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     edge_right

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     edge_right_temp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     track_width

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     track_center

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     track_center_temp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     img_furthest_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     Detect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     center_b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     center_slope

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     `round_detect::flag`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x........         DC32     gl_direction_p

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x........         DC32     `round_detect::dir_p_temp`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x........         DC32     gl_direction_d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x........         DC32     `round_detect::dir_d_temp`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x........         DC32     cur_image

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   0x42FE0000         DC32     0x42fe0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \   00000000   0xBFBFFFFF         DC32     0xbfbfffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \   00000000   0x........         DC32     `round_detect::round_state`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \   00000000   0x........         DC32     `round_detect::inround_ready_flag`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_21:
   \   00000000   0x........         DC32     round_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_22:
   \   00000000   0x........         DC32     gl_car_running_distance

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_23:
   \   00000000   0x........         DC32     `round_detect::inround_car_distance`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_24:
   \   00000000   0x........         DC32     `round_detect::beeper_counter`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_25:
   \   00000000   0x........         DC32     round_mode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_26:
   \   00000000   0x42480001         DC32     0x42480001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_27:
   \   00000000   0x42A00001         DC32     0x42a00001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_28:
   \   00000000   0x........         DC32     `round_detect::out_round_flag`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_29:
   \   00000000   0x........         DC32     `round_detect::out_round_ready_flag`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_30:
   \   00000000   0x........         DC32     `round_detect::outround_car_distance`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_31:
   \   00000000   0x41200001         DC32     0x41200001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_32:
   \   00000000   0x442F0001         DC32     0x442f0001

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0
   \              0x00000000   

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0
   \              0x00000000   

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0
   \              0x00000000   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   image_pre_process
        16   -> get_cur
        16   -> get_slope
      72   round_detect
        72   -> Beep_Off
        72   -> Beep_On
        72   -> Limiter
        72   -> __aeabi_f2iz
        72   -> __aeabi_fadd
        72   -> __aeabi_fmul
        72   -> __aeabi_fsub
        72   -> __aeabi_i2f
        72   -> get_cur
        72 __aeabi_cfcmple
        72 __aeabi_cfrcmple


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_21
       4  ??DataTable1_22
       4  ??DataTable1_23
       4  ??DataTable1_24
       4  ??DataTable1_25
       4  ??DataTable1_26
       4  ??DataTable1_27
       4  ??DataTable1_28
       4  ??DataTable1_29
       4  ??DataTable1_3
       4  ??DataTable1_30
       4  ??DataTable1_31
       4  ??DataTable1_32
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       8  ?_0
       8  ?_1
       8  ?_2
       1  beeper_counter
       4  dir_d_temp
       4  dir_p_temp
       1  flag
     210  image_pre_process
       4  inround_car_distance
       1  inround_flag
       1  inround_ready_flag
       1  out_round_flag
       1  out_round_ready_flag
       4  outround_car_distance
       1  outround_flag
       1  outround_line
    1396  round_detect
       1  round_state

 
    25 bytes in section .bss
    24 bytes in section .rodata
 1 738 bytes in section .text
 
 1 738 bytes of CODE  memory
    24 bytes of CONST memory
    25 bytes of DATA  memory

Errors: none
Warnings: 20
