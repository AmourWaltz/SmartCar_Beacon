###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Jul/2019  16:52:15
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\device\src\encoder.c
#    Command line =  
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\device\src\encoder.c" -D LPLD_K60 -lCN
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\iar\RAM\List" -lB
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\iar\RAM\List" -o
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\iar\RAM\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\" -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\CPU\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\common\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\HW\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\DEV\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\FUNC\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\uCOS-II\Ports\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\uCOS-II\Source\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\FatFs\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\FatFs\option\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\common\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\driver\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\descriptor\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\class\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\control\inc\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\control\src\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\debug\inc\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\debug\src\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\device\inc\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\device\src\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\driver\inc\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\driver\src\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\signal\inc\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\signal\src\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\system\" -Ol -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\RAM\List\encoder.lst
#    Object file  =  
#        D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\RAM\Obj\encoder.o
#
###############################################################################

D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\device\src\encoder.c
      1          #include "include.h"
      2          

   \                                 In section .bss, align 4
      3          static int16 s_left_pls_count[SPEED_QUEUE_LENTH];
   \                     s_left_pls_count:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
      4          static int16 s_right_pls_count[SPEED_QUEUE_LENTH];
   \                     s_right_pls_count:
   \   00000000                      DS8 12
      5          

   \                                 In section .text, align 2, keep-with-next
      6          float Get_Left_Speed()
      7          {
   \                     Get_Left_Speed: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
      8              int16 i16Pulses; 
      9              float fSpeed;   
     10              
     11              float Pulses = 0; 
   \   00000002   0x2400             MOVS     R4,#+0
     12              static uint32 pluses_sum=0;		//总脉冲数
     13              static uint8 u8InitFlag = 0;
     14              
     15              static uint16 cur_speed_pos=0;	//循环队列当前位置标志
     16          
     17              
     18              i16Pulses = QD_GPT_cnv();   
   \   00000004   0x.... 0x....      BL       QD_GPT_cnv
     19              pluses_sum += i16Pulses;
   \   00000008   0x....             LDR.N    R1,??DataTable1
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0xFA01 0xF180      SXTAH    R1,R1,R0
   \   00000010   0x....             LDR.N    R2,??DataTable1
   \   00000012   0x6011             STR      R1,[R2, #+0]
     20              
     21              if (u8InitFlag == 0)
   \   00000014   0x....             LDR.N    R1,??DataTable1_1
   \   00000016   0x7809             LDRB     R1,[R1, #+0]
   \   00000018   0x2900             CMP      R1,#+0
   \   0000001A   0xD10D             BNE.N    ??Get_Left_Speed_0
     22              {
     23                  
     24                  s_left_pls_count[0] = i16Pulses;
   \   0000001C   0x....             LDR.N    R1,??DataTable1_2
   \   0000001E   0x8008             STRH     R0,[R1, #+0]
     25                  s_left_pls_count[1] = i16Pulses;
   \   00000020   0x....             LDR.N    R1,??DataTable1_2
   \   00000022   0x8048             STRH     R0,[R1, #+2]
     26                  s_left_pls_count[2] = i16Pulses;
   \   00000024   0x....             LDR.N    R1,??DataTable1_2
   \   00000026   0x8088             STRH     R0,[R1, #+4]
     27                  s_left_pls_count[3] = i16Pulses;
   \   00000028   0x....             LDR.N    R1,??DataTable1_2
   \   0000002A   0x80C8             STRH     R0,[R1, #+6]
     28                  s_left_pls_count[4] = i16Pulses;
   \   0000002C   0x....             LDR.N    R1,??DataTable1_2
   \   0000002E   0x8108             STRH     R0,[R1, #+8]
     29                  
     30                  u8InitFlag = 1;     
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x....             LDR.N    R1,??DataTable1_1
   \   00000034   0x7008             STRB     R0,[R1, #+0]
   \   00000036   0xE00E             B.N      ??Get_Left_Speed_1
     31              }
     32              else
     33              { 
     34                  //s_fGPT_SpdTmp[cur_speed_pos%10] = fSpeed;
     35                  s_left_pls_count[cur_speed_pos%SPEED_QUEUE_LENTH] = i16Pulses;
   \                     ??Get_Left_Speed_0: (+1)
   \   00000038   0x....             LDR.N    R1,??DataTable1_3
   \   0000003A   0x8809             LDRH     R1,[R1, #+0]
   \   0000003C   0x2205             MOVS     R2,#+5
   \   0000003E   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   00000042   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \   00000046   0x....             LDR.N    R2,??DataTable1_2
   \   00000048   0xF822 0x0011      STRH     R0,[R2, R1, LSL #+1]
     36                  cur_speed_pos++;
   \   0000004C   0x....             LDR.N    R0,??DataTable1_3
   \   0000004E   0x8800             LDRH     R0,[R0, #+0]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0x....             LDR.N    R1,??DataTable1_3
   \   00000054   0x8008             STRH     R0,[R1, #+0]
     37              }
     38              
     39              Pulses = (float)
     40                       ( s_left_pls_count[0]
     41                       + s_left_pls_count[1]
     42                       + s_left_pls_count[2]
     43                       + s_left_pls_count[3]
     44                       + s_left_pls_count[4]
     45          
     46                       ) / SPEED_QUEUE_LENTH;
   \                     ??Get_Left_Speed_1: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable1_2
   \   00000058   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000005C   0x....             LDR.N    R1,??DataTable1_2
   \   0000005E   0xF9B1 0x1002      LDRSH    R1,[R1, #+2]
   \   00000062   0x1808             ADDS     R0,R1,R0
   \   00000064   0x....             LDR.N    R1,??DataTable1_2
   \   00000066   0xF9B1 0x1004      LDRSH    R1,[R1, #+4]
   \   0000006A   0x1840             ADDS     R0,R0,R1
   \   0000006C   0x....             LDR.N    R1,??DataTable1_2
   \   0000006E   0xF9B1 0x1006      LDRSH    R1,[R1, #+6]
   \   00000072   0x1840             ADDS     R0,R0,R1
   \   00000074   0x....             LDR.N    R1,??DataTable1_2
   \   00000076   0xF9B1 0x1008      LDRSH    R1,[R1, #+8]
   \   0000007A   0x1840             ADDS     R0,R0,R1
   \   0000007C   0x.... 0x....      BL       __aeabi_i2f
   \   00000080   0x....             LDR.N    R1,??DataTable1_4  ;; 0x40a00000
   \   00000082   0x.... 0x....      BL       __aeabi_fdiv
   \   00000086   0x0004             MOVS     R4,R0
     47              
     48              gl_left_encoder_count += Pulses;
   \   00000088   0x....             LDR.N    R0,??DataTable1_5
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0x.... 0x....      BL       __aeabi_i2f
   \   00000090   0x0021             MOVS     R1,R4
   \   00000092   0x.... 0x....      BL       __aeabi_fadd
   \   00000096   0x.... 0x....      BL       __aeabi_f2iz
   \   0000009A   0x....             LDR.N    R1,??DataTable1_5
   \   0000009C   0x6008             STR      R0,[R1, #+0]
     49          
     50              fSpeed = (float)((Pulses/(float)(LEFT_PLUSES_PER_MITER*SPEED_UPDATE_PERIOD)*100.0));	//速度单位  cm/s
   \   0000009E   0x0020             MOVS     R0,R4
   \   000000A0   0x....             LDR.N    R1,??DataTable1_6  ;; 0x41bb0000
   \   000000A2   0x.... 0x....      BL       __aeabi_fdiv
   \   000000A6   0x.... 0x....      BL       __aeabi_f2d
   \   000000AA   0x2200             MOVS     R2,#+0
   \   000000AC   0x....             LDR.N    R3,??DataTable1_7  ;; 0x40590000
   \   000000AE   0x.... 0x....      BL       __aeabi_dmul
   \   000000B2   0x.... 0x....      BL       __aeabi_d2f
     51              //fSpeed = (((float)i16Pulses/(float)(PLUSES_PER_MITER*SPEED_UPDATE_PERIOD)*100.0));	//速度单位  cm/s
     52          
     53          	return fSpeed;	
   \   000000B6   0xBD10             POP      {R4,PC}          ;; return
     54          }

   \                                 In section .bss, align 4
   \                     `Get_Left_Speed::pluses_sum`:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     `Get_Left_Speed::u8InitFlag`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     `Get_Left_Speed::cur_speed_pos`:
   \   00000000                      DS8 2
     55          

   \                                 In section .text, align 2, keep-with-next
     56          float Get_Right_Speed()
     57          {
   \                     Get_Right_Speed: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     58              static int16 i16Pulses; 
     59              float fSpeed;   
     60              //char right_dir;
     61          
     62              float Pulses; 
     63              static uint32 pluses_sum=0;		//总脉冲数
     64              static uint8 u8InitFlag = 0;
     65              
     66              static uint16 cur_speed_pos=0;	//循环队列当前位置标志
     67          
     68              i16Pulses = PLACC_GPT_cnv();
   \   00000002   0x.... 0x....      BL       PLACC_GPT_cnv
   \   00000006   0x....             LDR.N    R1,??DataTable1_8
   \   00000008   0x8008             STRH     R0,[R1, #+0]
     69              
     70          //    right_dir=LPLD_GPIO_Input_b(ENCODER_LE_D_ADDR,ENCODER_LE_D_NUM);
     71          //    
     72          //    if(!right_dir)
     73          //    {
     74          //      i16Pulses =-i16Pulses;
     75          //    }
     76          //    
     77              pluses_sum += i16Pulses;
   \   0000000A   0x....             LDR.N    R0,??DataTable1_9
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x....             LDR.N    R1,??DataTable1_8
   \   00000010   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000014   0x1840             ADDS     R0,R0,R1
   \   00000016   0x....             LDR.N    R1,??DataTable1_9
   \   00000018   0x6008             STR      R0,[R1, #+0]
     78              
     79              if (u8InitFlag == 0)
   \   0000001A   0x....             LDR.N    R0,??DataTable1_10
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD117             BNE.N    ??Get_Right_Speed_0
     80              {
     81                  
     82                  s_right_pls_count[0] = i16Pulses;
   \   00000022   0x....             LDR.N    R0,??DataTable1_8
   \   00000024   0x8800             LDRH     R0,[R0, #+0]
   \   00000026   0x....             LDR.N    R1,??DataTable1_11
   \   00000028   0x8008             STRH     R0,[R1, #+0]
     83                  s_right_pls_count[1] = i16Pulses;
   \   0000002A   0x....             LDR.N    R0,??DataTable1_8
   \   0000002C   0x8800             LDRH     R0,[R0, #+0]
   \   0000002E   0x....             LDR.N    R1,??DataTable1_11
   \   00000030   0x8048             STRH     R0,[R1, #+2]
     84                  s_right_pls_count[2] = i16Pulses;
   \   00000032   0x....             LDR.N    R0,??DataTable1_8
   \   00000034   0x8800             LDRH     R0,[R0, #+0]
   \   00000036   0x....             LDR.N    R1,??DataTable1_11
   \   00000038   0x8088             STRH     R0,[R1, #+4]
     85                  s_right_pls_count[3] = i16Pulses;
   \   0000003A   0x....             LDR.N    R0,??DataTable1_8
   \   0000003C   0x8800             LDRH     R0,[R0, #+0]
   \   0000003E   0x....             LDR.N    R1,??DataTable1_11
   \   00000040   0x80C8             STRH     R0,[R1, #+6]
     86                  s_right_pls_count[4] = i16Pulses;
   \   00000042   0x....             LDR.N    R0,??DataTable1_8
   \   00000044   0x8800             LDRH     R0,[R0, #+0]
   \   00000046   0x....             LDR.N    R1,??DataTable1_11
   \   00000048   0x8108             STRH     R0,[R1, #+8]
     87                  
     88                  u8InitFlag = 1;     
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x....             LDR.N    R1,??DataTable1_10
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
   \   00000050   0xE010             B.N      ??Get_Right_Speed_1
     89              }
     90              else
     91              { 
     92                  s_right_pls_count[cur_speed_pos%SPEED_QUEUE_LENTH] = i16Pulses;
   \                     ??Get_Right_Speed_0: (+1)
   \   00000052   0x....             LDR.N    R0,??DataTable1_12
   \   00000054   0x8800             LDRH     R0,[R0, #+0]
   \   00000056   0x2105             MOVS     R1,#+5
   \   00000058   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000005C   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000060   0x....             LDR.N    R1,??DataTable1_11
   \   00000062   0x....             LDR.N    R2,??DataTable1_8
   \   00000064   0x8812             LDRH     R2,[R2, #+0]
   \   00000066   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
     93                  cur_speed_pos++;
   \   0000006A   0x....             LDR.N    R0,??DataTable1_12
   \   0000006C   0x8800             LDRH     R0,[R0, #+0]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0x....             LDR.N    R1,??DataTable1_12
   \   00000072   0x8008             STRH     R0,[R1, #+0]
     94              }
     95              
     96              Pulses = (float)
     97                       ( s_right_pls_count[0]
     98                       + s_right_pls_count[1]
     99                       + s_right_pls_count[2]
    100                       + s_right_pls_count[3]
    101                       + s_right_pls_count[4]
    102                         
    103                       ) / SPEED_QUEUE_LENTH;
   \                     ??Get_Right_Speed_1: (+1)
   \   00000074   0x....             LDR.N    R0,??DataTable1_11
   \   00000076   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000007A   0x....             LDR.N    R1,??DataTable1_11
   \   0000007C   0xF9B1 0x1002      LDRSH    R1,[R1, #+2]
   \   00000080   0x1808             ADDS     R0,R1,R0
   \   00000082   0x....             LDR.N    R1,??DataTable1_11
   \   00000084   0xF9B1 0x1004      LDRSH    R1,[R1, #+4]
   \   00000088   0x1840             ADDS     R0,R0,R1
   \   0000008A   0x....             LDR.N    R1,??DataTable1_11
   \   0000008C   0xF9B1 0x1006      LDRSH    R1,[R1, #+6]
   \   00000090   0x1840             ADDS     R0,R0,R1
   \   00000092   0x....             LDR.N    R1,??DataTable1_11
   \   00000094   0xF9B1 0x1008      LDRSH    R1,[R1, #+8]
   \   00000098   0x1840             ADDS     R0,R0,R1
   \   0000009A   0x.... 0x....      BL       __aeabi_i2f
   \   0000009E   0x....             LDR.N    R1,??DataTable1_4  ;; 0x40a00000
   \   000000A0   0x.... 0x....      BL       __aeabi_fdiv
   \   000000A4   0x0004             MOVS     R4,R0
    104          
    105              gl_right_encoder_count += Pulses;
   \   000000A6   0x....             LDR.N    R0,??DataTable1_13
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x.... 0x....      BL       __aeabi_i2f
   \   000000AE   0x0021             MOVS     R1,R4
   \   000000B0   0x.... 0x....      BL       __aeabi_fadd
   \   000000B4   0x.... 0x....      BL       __aeabi_f2iz
   \   000000B8   0x....             LDR.N    R1,??DataTable1_13
   \   000000BA   0x6008             STR      R0,[R1, #+0]
    106              
    107              fSpeed = (float)((Pulses/(float)(RIGHT_PLUSES_PER_MITER*SPEED_UPDATE_PERIOD)*100));	//速度单位  cm/s
   \   000000BC   0x0020             MOVS     R0,R4
   \   000000BE   0x....             LDR.N    R1,??DataTable1_14  ;; 0x41b00000
   \   000000C0   0x.... 0x....      BL       __aeabi_fdiv
   \   000000C4   0x....             LDR.N    R1,??DataTable1_15  ;; 0x42c80000
   \   000000C6   0x.... 0x....      BL       __aeabi_fmul
    108              //fSpeed = (((float)i16Pulses/(float)(PLUSES_PER_MITER*SPEED_UPDATE_PERIOD)*100));	//速度单位  cm/s
    109          
    110          
    111          	return fSpeed;	
   \   000000CA   0xBD10             POP      {R4,PC}          ;; return
    112          }

   \                                 In section .bss, align 2
   \                     `Get_Right_Speed::i16Pulses`:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     `Get_Right_Speed::pluses_sum`:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     `Get_Right_Speed::u8InitFlag`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     `Get_Right_Speed::cur_speed_pos`:
   \   00000000                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     `Get_Left_Speed::pluses_sum`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     `Get_Left_Speed::u8InitFlag`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     s_left_pls_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     `Get_Left_Speed::cur_speed_pos`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40A00000         DC32     0x40a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     gl_left_encoder_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x41BB0000         DC32     0x41bb0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x40590000         DC32     0x40590000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     `Get_Right_Speed::i16Pulses`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     `Get_Right_Speed::pluses_sum`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     `Get_Right_Speed::u8InitFlag`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     s_right_pls_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x........         DC32     `Get_Right_Speed::cur_speed_pos`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x........         DC32     gl_right_encoder_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x41B00000         DC32     0x41b00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x42C80000         DC32     0x42c80000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Get_Left_Speed
         8   -> QD_GPT_cnv
         8   -> __aeabi_d2f
         8   -> __aeabi_dmul
         8   -> __aeabi_f2d
         8   -> __aeabi_f2iz
         8   -> __aeabi_fadd
         8   -> __aeabi_fdiv
         8   -> __aeabi_i2f
       8   Get_Right_Speed
         8   -> PLACC_GPT_cnv
         8   -> __aeabi_f2iz
         8   -> __aeabi_fadd
         8   -> __aeabi_fdiv
         8   -> __aeabi_fmul
         8   -> __aeabi_i2f


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
     184  Get_Left_Speed
     204  Get_Right_Speed
       2  cur_speed_pos
       2  cur_speed_pos
       2  i16Pulses
       4  pluses_sum
       4  pluses_sum
      12  s_left_pls_count
      12  s_right_pls_count
       1  u8InitFlag
       1  u8InitFlag

 
  40 bytes in section .bss
 452 bytes in section .text
 
 452 bytes of CODE memory
  40 bytes of DATA memory

Errors: none
Warnings: none
