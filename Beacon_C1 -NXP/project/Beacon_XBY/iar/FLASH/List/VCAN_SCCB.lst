###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       27/Jul/2018  20:43:49
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\driver\src\VCAN_SCCB.c
#    Command line =  
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\driver\src\VCAN_SCCB.c" -D LPLD_K60 -lCN
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\iar\FLASH\List"
#        -lB "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\FLASH\List" -o
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\iar\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\" -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\CPU\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\common\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\HW\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\DEV\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\uCOS-II\Ports\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\uCOS-II\Source\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\FatFs\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\FatFs\option\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\common\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\driver\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\descriptor\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\class\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\FUNC\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\driver\inc\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\driver\src\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\control\inc\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\control\src\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\debug\inc\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\debug\src\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\device\src\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\device\inc\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\signal\inc\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\signal\src\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\system\" -Ol
#        -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\FLASH\List\VCAN_SCCB.lst
#    Object file  =  
#        D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\FLASH\Obj\VCAN_SCCB.o
#
###############################################################################

D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\driver\src\VCAN_SCCB.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外初学论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       VCAN_SCCB.c
     11           * @brief      OV摄像头配置总线SCCB函数库
     12           * @author     山外科技
     13           * @version    v5.0
     14           * @date       2013-09-01
     15           * @porting    2014-11-14 由野火库移植到LPLP库下（kongyu）
     16           */
     17          
     18          #include "include.h"
     19          

   \                                 In section .bss, align 4
     20          static GPIO_InitTypeDef gpio_struct_sccb;
   \                     gpio_struct_sccb:
   \   00000000                      DS8 20
     21          static void SCCB_delay(uint16 i);
     22          
     23          /*!
     24           *  @brief      SCCB延迟函数
     25           *  @param      time    延时时间
     26           *  @since      v5.0
     27           */

   \                                 In section .text, align 2, keep-with-next
     28          static void SCCB_delay(volatile uint16 time)
     29          {
   \                     SCCB_delay: (+1)
   \   00000000   0xB401             PUSH     {R0}
   \   00000002   0xE004             B.N      ??SCCB_delay_0
     30              while(time)
     31              {
     32                  time--;
   \                     ??SCCB_delay_1: (+1)
   \   00000004   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000008   0x1E40             SUBS     R0,R0,#+1
   \   0000000A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     33              }
   \                     ??SCCB_delay_0: (+1)
   \   0000000E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD1F6             BNE.N    ??SCCB_delay_1
     34          }
   \   00000016   0xB001             ADD      SP,SP,#+4
   \   00000018   0x4770             BX       LR               ;; return
     35          
     36          /*!
     37           *  @brief      SCCB管脚配置
     38           *  @since      v5.0
     39           */

   \                                 In section .text, align 2, keep-with-next
     40          void SCCB_GPIO_init(void)
     41          {
   \                     SCCB_GPIO_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     42              gpio_struct_sccb.GPIO_PTx = SCCB_SCL;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff000
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     43              gpio_struct_sccb.GPIO_Pins = SCCB_SCL_PIN;
   \   0000000C   0xF44F 0x6080      MOV      R0,#+1024
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000014   0x6048             STR      R0,[R1, #+4]
     44              gpio_struct_sccb.GPIO_Dir = DIR_OUTPUT;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable7_1
   \   0000001A   0x7308             STRB     R0,[R1, #+12]
     45              gpio_struct_sccb.GPIO_Output = OUTPUT_H;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x....             LDR.N    R1,??DataTable7_1
   \   00000020   0x7348             STRB     R0,[R1, #+13]
     46              gpio_struct_sccb.GPIO_PinControl = IRQC_DIS|OUTPUT_OD_EN|INPUT_PULL_UP;
   \   00000022   0x2023             MOVS     R0,#+35
   \   00000024   0x....             LDR.N    R1,??DataTable7_1
   \   00000026   0x6088             STR      R0,[R1, #+8]
     47              LPLD_GPIO_Init(gpio_struct_sccb);
   \   00000028   0x....             LDR.N    R1,??DataTable7_1
   \   0000002A   0xB084             SUB      SP,SP,#+16
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x2214             MOVS     R2,#+20
   \   00000030   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000034   0xBC0F             POP      {R0-R3}
   \   00000036   0x.... 0x....      BL       LPLD_GPIO_Init
     48          
     49          	gpio_struct_sccb.GPIO_PTx = SCCB_SDA;
   \   0000003A   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   0000003C   0x....             LDR.N    R1,??DataTable7_1
   \   0000003E   0x6008             STR      R0,[R1, #+0]
     50              gpio_struct_sccb.GPIO_Pins = SCCB_SDA_PIN;
   \   00000040   0xF44F 0x6000      MOV      R0,#+2048
   \   00000044   0x....             LDR.N    R1,??DataTable7_1
   \   00000046   0x6048             STR      R0,[R1, #+4]
     51          	LPLD_GPIO_Init(gpio_struct_sccb);
   \   00000048   0x....             LDR.N    R1,??DataTable7_1
   \   0000004A   0xB084             SUB      SP,SP,#+16
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x2214             MOVS     R2,#+20
   \   00000050   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000054   0xBC0F             POP      {R0-R3}
   \   00000056   0x.... 0x....      BL       LPLD_GPIO_Init
     52          }
   \   0000005A   0xBD01             POP      {R0,PC}          ;; return
     53          
     54          /*!
     55           *  @brief      SCCB起始信号
     56           *  @since      v5.0
     57           */

   \                                 In section .text, align 2, keep-with-next
     58          static uint8 SCCB_Start(void)
     59          {
   \                     SCCB_Start: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     60              SDA_H();
   \   00000002   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000000A   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     61              SCCB_SCL_H();
   \   0000000E   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000016   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000018   0x6008             STR      R0,[R1, #+0]
     62              SCCB_DELAY();
   \   0000001A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000001E   0x.... 0x....      BL       SCCB_delay
     63          
     64          	//SDA_L();
     65              //SCL_L();
     66          
     67              SDA_DDR_IN();
   \   00000022   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ff014
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF430 0x6000      BICS     R0,R0,#0x800
   \   0000002A   0x....             LDR.N    R1,??DataTable7_2  ;; 0x400ff014
   \   0000002C   0x6008             STR      R0,[R1, #+0]
     68              if(!SDA_IN())
   \   0000002E   0x....             LDR.N    R0,??DataTable7_3  ;; 0x400ff010
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x0AC0             LSRS     R0,R0,#+11
   \   00000034   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD107             BNE.N    ??SCCB_Start_0
     69              {
     70                  SDA_DDR_OUT();
   \   0000003C   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ff014
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000044   0x....             LDR.N    R1,??DataTable7_2  ;; 0x400ff014
   \   00000046   0x6008             STR      R0,[R1, #+0]
     71                  return 0;   /* SDA线为低电平则总线忙,退出 */
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xE025             B.N      ??SCCB_Start_1
     72              }
     73              SDA_DDR_OUT();
   \                     ??SCCB_Start_0: (+1)
   \   0000004C   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ff014
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000054   0x....             LDR.N    R1,??DataTable7_2  ;; 0x400ff014
   \   00000056   0x6008             STR      R0,[R1, #+0]
     74              SDA_L();
   \   00000058   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0xF430 0x6000      BICS     R0,R0,#0x800
   \   00000060   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000062   0x6008             STR      R0,[R1, #+0]
     75          
     76              SCCB_DELAY();
   \   00000064   0xF44F 0x707A      MOV      R0,#+1000
   \   00000068   0x.... 0x....      BL       SCCB_delay
     77              SCCB_SCL_L();
   \   0000006C   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0xF430 0x6080      BICS     R0,R0,#0x400
   \   00000074   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000076   0x6008             STR      R0,[R1, #+0]
     78          
     79              if(SDA_IN())
   \   00000078   0x....             LDR.N    R0,??DataTable7_3  ;; 0x400ff010
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x0AC0             LSRS     R0,R0,#+11
   \   0000007E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD007             BEQ.N    ??SCCB_Start_2
     80              {
     81                  SDA_DDR_OUT();
   \   00000086   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ff014
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000008E   0x....             LDR.N    R1,??DataTable7_2  ;; 0x400ff014
   \   00000090   0x6008             STR      R0,[R1, #+0]
     82                  return 0;   /* SDA线为高电平则总线出错,退出 */
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0xE000             B.N      ??SCCB_Start_1
     83              }
     84              //SDA_DDR_OUT();
     85              //SDA_L();
     86              //SCCB_delay();
     87              return 1;
   \                     ??SCCB_Start_2: (+1)
   \   00000096   0x2001             MOVS     R0,#+1
   \                     ??SCCB_Start_1: (+1)
   \   00000098   0xBD02             POP      {R1,PC}          ;; return
     88          }
     89          
     90          /*!
     91           *  @brief      SCCB停止信号
     92           *  @since      v5.0
     93           */

   \                                 In section .text, align 2, keep-with-next
     94          static void SCCB_Stop(void)
     95          {
   \                     SCCB_Stop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     96              SCCB_SCL_L();
   \   00000002   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF430 0x6080      BICS     R0,R0,#0x400
   \   0000000A   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     97              //SCCB_DELAY();
     98              SDA_L();
   \   0000000E   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF430 0x6000      BICS     R0,R0,#0x800
   \   00000016   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000018   0x6008             STR      R0,[R1, #+0]
     99              SCCB_DELAY();
   \   0000001A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000001E   0x.... 0x....      BL       SCCB_delay
    100              SCCB_SCL_H();
   \   00000022   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000002A   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    101              SCCB_DELAY();
   \   0000002E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000032   0x.... 0x....      BL       SCCB_delay
    102              SDA_H();
   \   00000036   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000003E   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000040   0x6008             STR      R0,[R1, #+0]
    103              SCCB_DELAY();
   \   00000042   0xF44F 0x707A      MOV      R0,#+1000
   \   00000046   0x.... 0x....      BL       SCCB_delay
    104          }
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
    105          
    106          /*!
    107           *  @brief      SCCB应答信号
    108           *  @since      v5.0
    109           */

   \                                 In section .text, align 2, keep-with-next
    110          static void SCCB_Ack(void)
    111          {
   \                     SCCB_Ack: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    112              SCCB_SCL_L();
   \   00000002   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF430 0x6080      BICS     R0,R0,#0x400
   \   0000000A   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    113              SCCB_DELAY();
   \   0000000E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000012   0x.... 0x....      BL       SCCB_delay
    114              SDA_L();
   \   00000016   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF430 0x6000      BICS     R0,R0,#0x800
   \   0000001E   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000020   0x6008             STR      R0,[R1, #+0]
    115              SCCB_DELAY();
   \   00000022   0xF44F 0x707A      MOV      R0,#+1000
   \   00000026   0x.... 0x....      BL       SCCB_delay
    116              SCCB_SCL_H();
   \   0000002A   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000032   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000034   0x6008             STR      R0,[R1, #+0]
    117              SCCB_DELAY();
   \   00000036   0xF44F 0x707A      MOV      R0,#+1000
   \   0000003A   0x.... 0x....      BL       SCCB_delay
    118              SCCB_SCL_L();
   \   0000003E   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF430 0x6080      BICS     R0,R0,#0x400
   \   00000046   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000048   0x6008             STR      R0,[R1, #+0]
    119              SCCB_DELAY();
   \   0000004A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000004E   0x.... 0x....      BL       SCCB_delay
    120          }
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    121          
    122          /*!
    123           *  @brief      SCCB无应答信号
    124           *  @since      v5.0
    125           */

   \                                 In section .text, align 2, keep-with-next
    126          static void SCCB_NoAck(void)
    127          {
   \                     SCCB_NoAck: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    128              SCCB_SCL_L();
   \   00000002   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF430 0x6080      BICS     R0,R0,#0x400
   \   0000000A   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    129              SCCB_DELAY();
   \   0000000E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000012   0x.... 0x....      BL       SCCB_delay
    130              SDA_H();
   \   00000016   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000001E   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000020   0x6008             STR      R0,[R1, #+0]
    131              SCCB_DELAY();
   \   00000022   0xF44F 0x707A      MOV      R0,#+1000
   \   00000026   0x.... 0x....      BL       SCCB_delay
    132              SCCB_SCL_H();
   \   0000002A   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000032   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000034   0x6008             STR      R0,[R1, #+0]
    133              SCCB_DELAY();
   \   00000036   0xF44F 0x707A      MOV      R0,#+1000
   \   0000003A   0x.... 0x....      BL       SCCB_delay
    134              SCCB_SCL_L();
   \   0000003E   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF430 0x6080      BICS     R0,R0,#0x400
   \   00000046   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000048   0x6008             STR      R0,[R1, #+0]
    135              SCCB_DELAY();
   \   0000004A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000004E   0x.... 0x....      BL       SCCB_delay
    136          }
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    137          
    138          /*!
    139           *  @brief      SCCB 等待应答
    140           *  @return     应答结果（0表示无应答，1表示有应答）
    141           *  @since      v5.0
    142           */

   \                                 In section .text, align 2, keep-with-next
    143          static int SCCB_WaitAck(void)
    144          {
   \                     SCCB_WaitAck: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    145              SCCB_SCL_L();
   \   00000002   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF430 0x6080      BICS     R0,R0,#0x400
   \   0000000A   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    146              //SDA_H();
    147              SDA_DDR_IN();
   \   0000000E   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ff014
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF430 0x6000      BICS     R0,R0,#0x800
   \   00000016   0x....             LDR.N    R1,??DataTable7_2  ;; 0x400ff014
   \   00000018   0x6008             STR      R0,[R1, #+0]
    148          
    149              SCCB_DELAY();
   \   0000001A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000001E   0x.... 0x....      BL       SCCB_delay
    150              SCCB_SCL_H();
   \   00000022   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000002A   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    151          
    152              SCCB_DELAY();
   \   0000002E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000032   0x.... 0x....      BL       SCCB_delay
    153          
    154              if(SDA_IN())           //应答为高电平，异常，通信失败
   \   00000036   0x....             LDR.N    R0,??DataTable7_3  ;; 0x400ff010
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x0AC0             LSRS     R0,R0,#+11
   \   0000003C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD00D             BEQ.N    ??SCCB_WaitAck_0
    155              {
    156                  SDA_DDR_OUT();
   \   00000044   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ff014
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000004C   0x....             LDR.N    R1,??DataTable7_2  ;; 0x400ff014
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    157                  SCCB_SCL_L();
   \   00000050   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0xF430 0x6080      BICS     R0,R0,#0x400
   \   00000058   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    158                  return 0;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xE00C             B.N      ??SCCB_WaitAck_1
    159              }
    160              SDA_DDR_OUT();
   \                     ??SCCB_WaitAck_0: (+1)
   \   00000060   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ff014
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000068   0x....             LDR.N    R1,??DataTable7_2  ;; 0x400ff014
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    161              SCCB_SCL_L();
   \   0000006C   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0xF430 0x6080      BICS     R0,R0,#0x400
   \   00000074   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000076   0x6008             STR      R0,[R1, #+0]
    162              return 1;
   \   00000078   0x2001             MOVS     R0,#+1
   \                     ??SCCB_WaitAck_1: (+1)
   \   0000007A   0xBD02             POP      {R1,PC}          ;; return
    163          }
    164          
    165          /*!
    166           *  @brief      SCCB 发送的数据
    167           *  @param      SendByte    需要发送的数据
    168           *  @since      v5.0
    169           */

   \                                 In section .text, align 2, keep-with-next
    170          static void SCCB_SendByte(uint8 SendByte)
    171          {
   \                     SCCB_SendByte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
    172              uint8 i = 8;
   \   00000004   0x2408             MOVS     R4,#+8
   \   00000006   0xE01A             B.N      ??SCCB_SendByte_0
    173              while(i--)
    174              {
    175          
    176                  if(SendByte & 0x80)     //SDA 输出数据
    177                  {
    178                      SDA_H();
    179                  }
    180                  else
    181                  {
    182                      SDA_L();
   \                     ??SCCB_SendByte_1: (+1)
   \   00000008   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF430 0x6000      BICS     R0,R0,#0x800
   \   00000010   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000012   0x6008             STR      R0,[R1, #+0]
    183                  }
    184                  SendByte <<= 1;
   \                     ??SCCB_SendByte_2: (+1)
   \   00000014   0x006D             LSLS     R5,R5,#+1
    185                  SCCB_DELAY();
   \   00000016   0xF44F 0x707A      MOV      R0,#+1000
   \   0000001A   0x.... 0x....      BL       SCCB_delay
    186                  SCCB_SCL_H();                //SCL 拉高，采集信号
   \   0000001E   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000026   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000028   0x6008             STR      R0,[R1, #+0]
    187                  SCCB_DELAY();
   \   0000002A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000002E   0x.... 0x....      BL       SCCB_delay
    188                  SCCB_SCL_L();                //SCL 时钟线拉低
   \   00000032   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF430 0x6080      BICS     R0,R0,#0x400
   \   0000003A   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \                     ??SCCB_SendByte_0: (+1)
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x1E44             SUBS     R4,R0,#+1
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD008             BEQ.N    ??SCCB_SendByte_3
   \   00000048   0x0628             LSLS     R0,R5,#+24
   \   0000004A   0xD5DD             BPL.N    ??SCCB_SendByte_1
   \   0000004C   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000054   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000056   0x6008             STR      R0,[R1, #+0]
   \   00000058   0xE7DC             B.N      ??SCCB_SendByte_2
    189                  //SCCB_DELAY();
    190              }
    191              //SCL_L();
    192          }
   \                     ??SCCB_SendByte_3: (+1)
   \   0000005A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    193          
    194          /*!
    195           *  @brief      接收SCCB总线的数据
    196           *  @return     接收到的数据
    197           *  @since      v5.0
    198           */

   \                                 In section .text, align 2, keep-with-next
    199          static int SCCB_ReceiveByte(void)
    200          {
   \                     SCCB_ReceiveByte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    201              uint8 i = 8;
   \   00000002   0x2408             MOVS     R4,#+8
    202              uint8 ReceiveByte = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    203          
    204              //SDA_H();
    205              //SCCB_DELAY();
    206              SDA_DDR_IN();
   \   00000006   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ff014
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF430 0x6000      BICS     R0,R0,#0x800
   \   0000000E   0x....             LDR.N    R1,??DataTable7_2  ;; 0x400ff014
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0xE01D             B.N      ??SCCB_ReceiveByte_0
    207          
    208              while(i--)
    209              {
    210                  ReceiveByte <<= 1;
   \                     ??SCCB_ReceiveByte_1: (+1)
   \   00000014   0x006D             LSLS     R5,R5,#+1
    211                  SCCB_SCL_L();
   \   00000016   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF430 0x6080      BICS     R0,R0,#0x400
   \   0000001E   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000020   0x6008             STR      R0,[R1, #+0]
    212                  SCCB_DELAY();
   \   00000022   0xF44F 0x707A      MOV      R0,#+1000
   \   00000026   0x.... 0x....      BL       SCCB_delay
    213                  SCCB_SCL_H();
   \   0000002A   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000032   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000034   0x6008             STR      R0,[R1, #+0]
    214                  SCCB_DELAY();
   \   00000036   0xF44F 0x707A      MOV      R0,#+1000
   \   0000003A   0x.... 0x....      BL       SCCB_delay
    215          
    216                  if(SDA_IN())
   \   0000003E   0x....             LDR.N    R0,??DataTable7_3  ;; 0x400ff010
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x0AC0             LSRS     R0,R0,#+11
   \   00000044   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD001             BEQ.N    ??SCCB_ReceiveByte_0
    217                  {
    218                      ReceiveByte |= 0x01;
   \   0000004C   0xF055 0x0501      ORRS     R5,R5,#0x1
    219                  }
    220          
    221          
    222              }
   \                     ??SCCB_ReceiveByte_0: (+1)
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x1E44             SUBS     R4,R0,#+1
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD1DC             BNE.N    ??SCCB_ReceiveByte_1
    223              SDA_DDR_OUT();
   \   0000005A   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ff014
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000062   0x....             LDR.N    R1,??DataTable7_2  ;; 0x400ff014
   \   00000064   0x6008             STR      R0,[R1, #+0]
    224              SCCB_SCL_L();
   \   00000066   0x....             LDR.N    R0,??DataTable7  ;; 0x400ff000
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0xF430 0x6080      BICS     R0,R0,#0x400
   \   0000006E   0x....             LDR.N    R1,??DataTable7  ;; 0x400ff000
   \   00000070   0x6008             STR      R0,[R1, #+0]
    225              return ReceiveByte;
   \   00000072   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000074   0x0028             MOVS     R0,R5
   \   00000076   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    226          }
    227          
    228          /*****************************************************************************************
    229          * 函数名：SCCB_WriteByte
    230          * 描述  ：写一字节数据
    231          * 输入  ：- WriteAddress: 待写入地址    - SendByte: 待写入数据  - DeviceAddress: 器件类型
    232          * 输出  ：返回为:=1成功写入,=0失败
    233          * 注意  ：无
    234          *****************************************************************************************/
    235          static int SCCB_WriteByte_one( uint16 WriteAddress , uint8 SendByte );
    236          
    237          

   \                                 In section .text, align 2, keep-with-next
    238          int SCCB_WriteByte( uint16 WriteAddress , uint8 SendByte )            //考虑到用sccb的管脚模拟，比较容易失败，因此多试几次
    239          {
   \                     SCCB_WriteByte: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    240              uint8 i = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    241              while( 0 == SCCB_WriteByte_one ( WriteAddress, SendByte ) )
   \                     ??SCCB_WriteByte_0: (+1)
   \   00000008   0x0029             MOVS     R1,R5
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x.... 0x....      BL       SCCB_WriteByte_one
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD105             BNE.N    ??SCCB_WriteByte_1
    242              {
    243                  i++;
   \   00000018   0x1C76             ADDS     R6,R6,#+1
    244                  if(i == 20)
   \   0000001A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001C   0x2E14             CMP      R6,#+20
   \   0000001E   0xD1F3             BNE.N    ??SCCB_WriteByte_0
    245                  {
    246                      return 0 ;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE000             B.N      ??SCCB_WriteByte_2
    247                  }
    248              }
    249              return 1;
   \                     ??SCCB_WriteByte_1: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \                     ??SCCB_WriteByte_2: (+1)
   \   00000026   0xBD70             POP      {R4-R6,PC}       ;; return
    250          }
    251          

   \                                 In section .text, align 2, keep-with-next
    252          int SCCB_WriteByte_one( uint16 WriteAddress , uint8 SendByte )
    253          {
   \                     SCCB_WriteByte_one: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    254              if(!SCCB_Start())
   \   00000006   0x.... 0x....      BL       SCCB_Start
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE.N    ??SCCB_WriteByte_one_0
    255              {
    256                  return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE019             B.N      ??SCCB_WriteByte_one_1
    257              }
    258              SCCB_SendByte( DEV_ADR );                    /* 器件地址 */
   \                     ??SCCB_WriteByte_one_0: (+1)
   \   00000012   0x2042             MOVS     R0,#+66
   \   00000014   0x.... 0x....      BL       SCCB_SendByte
    259              if( !SCCB_WaitAck() )
   \   00000018   0x.... 0x....      BL       SCCB_WaitAck
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD103             BNE.N    ??SCCB_WriteByte_one_2
    260              {
    261                  SCCB_Stop();
   \   00000020   0x.... 0x....      BL       SCCB_Stop
    262                  return 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE00E             B.N      ??SCCB_WriteByte_one_1
    263              }
    264              SCCB_SendByte((uint8)(WriteAddress & 0x00FF));   /* 设置低起始地址 */
   \                     ??SCCB_WriteByte_one_2: (+1)
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       SCCB_SendByte
    265              SCCB_WaitAck();
   \   00000030   0x.... 0x....      BL       SCCB_WaitAck
    266              SCCB_SendByte(SendByte);
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x.... 0x....      BL       SCCB_SendByte
    267              SCCB_WaitAck();
   \   0000003C   0x.... 0x....      BL       SCCB_WaitAck
    268              SCCB_Stop();
   \   00000040   0x.... 0x....      BL       SCCB_Stop
    269              return 1;
   \   00000044   0x2001             MOVS     R0,#+1
   \                     ??SCCB_WriteByte_one_1: (+1)
   \   00000046   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    270          }
    271          
    272          
    273          
    274          
    275          /******************************************************************************************************************
    276           * 函数名：SCCB_ReadByte
    277           * 描述  ：读取一串数据
    278           * 输入  ：- pBuffer: 存放读出数据  - length: 待读出长度    - ReadAddress: 待读出地址        - DeviceAddress: 器件类型
    279           * 输出  ：返回为:=1成功读入,=0失败
    280           * 注意  ：无
    281           **********************************************************************************************************************/
    282          static int SCCB_ReadByte_one(uint8 *pBuffer,   uint16 length,   uint8 ReadAddress);
    283          

   \                                 In section .text, align 2, keep-with-next
    284          int SCCB_ReadByte(uint8 *pBuffer,   uint16 length,   uint8 ReadAddress)
    285          {
   \                     SCCB_ReadByte: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    286              uint8 i = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    287              while( 0 == SCCB_ReadByte_one(pBuffer, length, ReadAddress) )
   \                     ??SCCB_ReadByte_0: (+1)
   \   0000000A   0x0032             MOVS     R2,R6
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       SCCB_ReadByte_one
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD105             BNE.N    ??SCCB_ReadByte_1
    288              {
    289                  i++;
   \   0000001C   0x1C7F             ADDS     R7,R7,#+1
    290                  if(i == 30)
   \   0000001E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000020   0x2F1E             CMP      R7,#+30
   \   00000022   0xD1F2             BNE.N    ??SCCB_ReadByte_0
    291                  {
    292                      return 0 ;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE000             B.N      ??SCCB_ReadByte_2
    293                  }
    294              }
    295              return 1;
   \                     ??SCCB_ReadByte_1: (+1)
   \   00000028   0x2001             MOVS     R0,#+1
   \                     ??SCCB_ReadByte_2: (+1)
   \   0000002A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    296          }
    297          

   \                                 In section .text, align 2, keep-with-next
    298          int SCCB_ReadByte_one(uint8 *pBuffer,   uint16 length,   uint8 ReadAddress)
    299          {
   \                     SCCB_ReadByte_one: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    300              if(!SCCB_Start())
   \   00000008   0x.... 0x....      BL       SCCB_Start
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??SCCB_ReadByte_one_0
    301              {
    302                  return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE036             B.N      ??SCCB_ReadByte_one_1
    303              }
    304              SCCB_SendByte( DEV_ADR );         /* 器件地址 */
   \                     ??SCCB_ReadByte_one_0: (+1)
   \   00000014   0x2042             MOVS     R0,#+66
   \   00000016   0x.... 0x....      BL       SCCB_SendByte
    305              if( !SCCB_WaitAck() )
   \   0000001A   0x.... 0x....      BL       SCCB_WaitAck
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD103             BNE.N    ??SCCB_ReadByte_one_2
    306              {
    307                  SCCB_Stop();
   \   00000022   0x.... 0x....      BL       SCCB_Stop
    308                  return 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xE02B             B.N      ??SCCB_ReadByte_one_1
    309              }
    310              SCCB_SendByte( ReadAddress );           /* 设置低起始地址 */
   \                     ??SCCB_ReadByte_one_2: (+1)
   \   0000002A   0x0030             MOVS     R0,R6
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x.... 0x....      BL       SCCB_SendByte
    311              SCCB_WaitAck();
   \   00000032   0x.... 0x....      BL       SCCB_WaitAck
    312              SCCB_Stop();
   \   00000036   0x.... 0x....      BL       SCCB_Stop
    313          
    314              if(!SCCB_Start())
   \   0000003A   0x.... 0x....      BL       SCCB_Start
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD101             BNE.N    ??SCCB_ReadByte_one_3
    315              {
    316                  return 0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE01D             B.N      ??SCCB_ReadByte_one_1
    317              }
    318              SCCB_SendByte( DEV_ADR + 1 );               /* 器件地址 */
   \                     ??SCCB_ReadByte_one_3: (+1)
   \   00000046   0x2043             MOVS     R0,#+67
   \   00000048   0x.... 0x....      BL       SCCB_SendByte
    319          
    320              if(!SCCB_WaitAck())
   \   0000004C   0x.... 0x....      BL       SCCB_WaitAck
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD107             BNE.N    ??SCCB_ReadByte_one_4
    321              {
    322                  SCCB_Stop();
   \   00000054   0x.... 0x....      BL       SCCB_Stop
    323                  return 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0xE012             B.N      ??SCCB_ReadByte_one_1
    324              }
    325              while(length)
    326              {
    327                  *pBuffer = SCCB_ReceiveByte();
    328                  if(length == 1)
    329                  {
    330                      SCCB_NoAck();
    331                  }
    332                  else
    333                  {
    334                      SCCB_Ack();
   \                     ??SCCB_ReadByte_one_5: (+1)
   \   0000005C   0x.... 0x....      BL       SCCB_Ack
    335                  }
    336                  pBuffer++;
   \                     ??SCCB_ReadByte_one_6: (+1)
   \   00000060   0x1C64             ADDS     R4,R4,#+1
    337                  length--;
   \   00000062   0x1E6D             SUBS     R5,R5,#+1
   \                     ??SCCB_ReadByte_one_4: (+1)
   \   00000064   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000066   0x2D00             CMP      R5,#+0
   \   00000068   0xD008             BEQ.N    ??SCCB_ReadByte_one_7
   \   0000006A   0x.... 0x....      BL       SCCB_ReceiveByte
   \   0000006E   0x7020             STRB     R0,[R4, #+0]
   \   00000070   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000072   0x2D01             CMP      R5,#+1
   \   00000074   0xD1F2             BNE.N    ??SCCB_ReadByte_one_5
   \   00000076   0x.... 0x....      BL       SCCB_NoAck
   \   0000007A   0xE7F1             B.N      ??SCCB_ReadByte_one_6
    338              }
    339              SCCB_Stop();
   \                     ??SCCB_ReadByte_one_7: (+1)
   \   0000007C   0x.... 0x....      BL       SCCB_Stop
    340              return 1;
   \   00000080   0x2001             MOVS     R0,#+1
   \                     ??SCCB_ReadByte_one_1: (+1)
   \   00000082   0xBD70             POP      {R4-R6,PC}       ;; return
    341          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     gpio_struct_sccb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x400FF014         DC32     0x400ff014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x400FF010         DC32     0x400ff010
    342          
    343          
    344          
    345          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SCCB_Ack
         8   -> SCCB_delay
      24   SCCB_GPIO_init
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4
       8   SCCB_NoAck
         8   -> SCCB_delay
      24   SCCB_ReadByte
        24   -> SCCB_ReadByte_one
      16   SCCB_ReadByte_one
        16   -> SCCB_Ack
        16   -> SCCB_NoAck
        16   -> SCCB_ReceiveByte
        16   -> SCCB_SendByte
        16   -> SCCB_Start
        16   -> SCCB_Stop
        16   -> SCCB_WaitAck
      16   SCCB_ReceiveByte
        16   -> SCCB_delay
      16   SCCB_SendByte
        16   -> SCCB_delay
       8   SCCB_Start
         8   -> SCCB_delay
       8   SCCB_Stop
         8   -> SCCB_delay
       8   SCCB_WaitAck
         8   -> SCCB_delay
      16   SCCB_WriteByte
        16   -> SCCB_WriteByte_one
      16   SCCB_WriteByte_one
        16   -> SCCB_SendByte
        16   -> SCCB_Start
        16   -> SCCB_Stop
        16   -> SCCB_WaitAck
       4   SCCB_delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
      84  SCCB_Ack
      92  SCCB_GPIO_init
      84  SCCB_NoAck
      44  SCCB_ReadByte
     132  SCCB_ReadByte_one
     120  SCCB_ReceiveByte
      92  SCCB_SendByte
     154  SCCB_Start
      76  SCCB_Stop
     124  SCCB_WaitAck
      40  SCCB_WriteByte
      72  SCCB_WriteByte_one
      26  SCCB_delay
      20  gpio_struct_sccb

 
    20 bytes in section .bss
 1 156 bytes in section .text
 
 1 156 bytes of CODE memory
    20 bytes of DATA memory

Errors: none
Warnings: none
