###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       27/Jul/2018  20:43:45
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\driver\src\adc.c
#    Command line =  
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\driver\src\adc.c" -D LPLD_K60 -lCN
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\iar\FLASH\List"
#        -lB "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\FLASH\List" -o
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\iar\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\" -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\CPU\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\common\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\HW\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\DEV\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\uCOS-II\Ports\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\uCOS-II\Source\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\FatFs\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\FatFs\option\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\common\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\driver\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\descriptor\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\class\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\FUNC\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\driver\inc\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\driver\src\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\control\inc\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\control\src\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\debug\inc\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\debug\src\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\device\src\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\device\inc\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\signal\inc\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\signal\src\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\system\" -Ol
#        -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\FLASH\List\adc.lst
#    Object file  =  
#        D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\FLASH\Obj\adc.o
#
###############################################################################

D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\driver\src\adc.c
      1          #include "adc.h"
      2          #include "include.h"
      3          
      4          //ADC等待最多用100us左右 故采用中断方式节省时间
      5          

   \                                 In section .bss, align 4
      6          static ADC_InitTypeDef adc0_init_struct;
   \                     adc0_init_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
      7          static ADC_InitTypeDef adc1_init_struct;
   \                     adc1_init_struct:
   \   00000000                      DS8 20
      8          

   \                                 In section .text, align 2, keep-with-next
      9          void ADC_Init()
     10          {
   \                     ADC_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     11              ADC0_Init();
   \   00000002   0x.... 0x....      BL       ADC0_Init
     12              ADC1_Init();
   \   00000006   0x.... 0x....      BL       ADC1_Init
     13                  
     14              ADC_CH_Init();
   \   0000000A   0x.... 0x....      BL       ADC_CH_Init
     15                 
     16              //在NVIC里面使能中断
     17              //LPLD_ADC_EnableIrq(adc0_init_struct);
     18              //LPLD_ADC_EnableIrq(adc1_init_struct);
     19          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
     20          

   \                                 In section .text, align 2, keep-with-next
     21          void ADC0_Init()
     22          {
   \                     ADC0_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     23              //配置ADC采样参数
     24              adc0_init_struct.ADC_Adcx = ADC0;
   \   00000002   0x....             LDR.N    R0,??DataTable3  ;; 0x4003b000
   \   00000004   0x....             LDR.N    R1,??DataTable3_1
   \   00000006   0x6008             STR      R0,[R1, #+0]
     25              adc0_init_struct.ADC_DiffMode = ADC_SE;        //单端采集
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable3_1
   \   0000000C   0x7108             STRB     R0,[R1, #+4]
     26              adc0_init_struct.ADC_BitMode = SE_12BIT;       //单端12位精度
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable3_1
   \   00000012   0x7148             STRB     R0,[R1, #+5]
     27              adc0_init_struct.ADC_SampleTimeCfg = SAMTIME_LONG;    //短采样时间
   \   00000014   0x2010             MOVS     R0,#+16
   \   00000016   0x....             LDR.N    R1,??DataTable3_1
   \   00000018   0x7188             STRB     R0,[R1, #+6]
     28              adc0_init_struct.ADC_LongSampleTimeSel = LSAMTIME_12EX;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable3_1
   \   0000001E   0x71C8             STRB     R0,[R1, #+7]
     29              adc0_init_struct.ADC_HwAvgSel = HW_16AVG;       //4次硬件平均
   \   00000020   0x2006             MOVS     R0,#+6
   \   00000022   0x....             LDR.N    R1,??DataTable3_1
   \   00000024   0x7208             STRB     R0,[R1, #+8]
     30              adc0_init_struct.ADC_CalEnable = TRUE; //使能初始化校验
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x....             LDR.N    R1,??DataTable3_1
   \   0000002A   0x72C8             STRB     R0,[R1, #+11]
     31                 
     32              adc0_init_struct.ADC_Isr = ADC_0_isr; //中断函数 
   \   0000002C   0x.... 0x....      ADR.W    R0,ADC_0_isr
   \   00000030   0x....             LDR.N    R1,??DataTable3_1
   \   00000032   0x6108             STR      R0,[R1, #+16]
     33              //初始化ADC
     34              LPLD_ADC_Init(adc0_init_struct);
   \   00000034   0x....             LDR.N    R1,??DataTable3_1
   \   00000036   0xB084             SUB      SP,SP,#+16
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x2214             MOVS     R2,#+20
   \   0000003C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000040   0xBC0F             POP      {R0-R3}
   \   00000042   0x.... 0x....      BL       LPLD_ADC_Init
     35          }
   \   00000046   0xBD01             POP      {R0,PC}          ;; return
     36          

   \                                 In section .text, align 2, keep-with-next
     37          void ADC1_Init()
     38          {
   \                     ADC1_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     39              //配置ADC采样参数
     40              adc1_init_struct.ADC_Adcx = ADC1;
   \   00000002   0x....             LDR.N    R0,??DataTable3_2  ;; 0x400bb000
   \   00000004   0x....             LDR.N    R1,??DataTable3_3
   \   00000006   0x6008             STR      R0,[R1, #+0]
     41              adc1_init_struct.ADC_DiffMode = ADC_SE;        //单端采集
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable3_3
   \   0000000C   0x7108             STRB     R0,[R1, #+4]
     42              adc1_init_struct.ADC_BitMode = SE_12BIT;       //单端12位精度
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable3_3
   \   00000012   0x7148             STRB     R0,[R1, #+5]
     43              adc1_init_struct.ADC_SampleTimeCfg = SAMTIME_LONG;    //短采样时间
   \   00000014   0x2010             MOVS     R0,#+16
   \   00000016   0x....             LDR.N    R1,??DataTable3_3
   \   00000018   0x7188             STRB     R0,[R1, #+6]
     44              adc1_init_struct.ADC_LongSampleTimeSel = LSAMTIME_12EX;//LSAMTIME_12EX;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable3_3
   \   0000001E   0x71C8             STRB     R0,[R1, #+7]
     45              adc1_init_struct.ADC_HwAvgSel = HW_16AVG;       //4次硬件平均
   \   00000020   0x2006             MOVS     R0,#+6
   \   00000022   0x....             LDR.N    R1,??DataTable3_3
   \   00000024   0x7208             STRB     R0,[R1, #+8]
     46              adc1_init_struct.ADC_CalEnable = TRUE;    //使能初始化校验
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x....             LDR.N    R1,??DataTable3_3
   \   0000002A   0x72C8             STRB     R0,[R1, #+11]
     47              adc1_init_struct.ADC_MuxSel = MUX_ADXXB; //b通道采集
   \   0000002C   0x2010             MOVS     R0,#+16
   \   0000002E   0x....             LDR.N    R1,??DataTable3_3
   \   00000030   0x7288             STRB     R0,[R1, #+10]
     48              
     49              adc1_init_struct.ADC_Isr = ADC_1_isr; //中断函数 
   \   00000032   0x.... 0x....      ADR.W    R0,ADC_1_isr
   \   00000036   0x....             LDR.N    R1,??DataTable3_3
   \   00000038   0x6108             STR      R0,[R1, #+16]
     50              //初始化ADC
     51              LPLD_ADC_Init(adc1_init_struct);
   \   0000003A   0x....             LDR.N    R1,??DataTable3_3
   \   0000003C   0xB084             SUB      SP,SP,#+16
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x2214             MOVS     R2,#+20
   \   00000042   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000046   0xBC0F             POP      {R0-R3}
   \   00000048   0x.... 0x....      BL       LPLD_ADC_Init
     52          }
   \   0000004C   0xBD01             POP      {R0,PC}          ;; return
     53          

   \                                 In section .text, align 2, keep-with-next
     54          void ADC_CH_Init()
     55          {
   \                     ADC_CH_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     56              //使能相应通道
     57              
     58              //电池AD通道初始化
     59          
     60              LPLD_ADC_Chn_Enable(BAT_ADC_ID, BAT_ADC_CH);
   \   00000002   0x2110             MOVS     R1,#+16
   \   00000004   0x....             LDR.N    R0,??DataTable3_2  ;; 0x400bb000
   \   00000006   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
     61              
     62          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
     63          

   \                                 In section .text, align 4, keep-with-next
     64          void ADC_0_isr()
     65          {
     66          
     67          }
   \                     ADC_0_isr: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     68          
     69          

   \                                 In section .text, align 4, keep-with-next
     70          void ADC_1_isr()
     71          {
     72          
     73          }
   \                     ADC_1_isr: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     74          

   \                                 In section .text, align 2, keep-with-next
     75          float ADC_Bat_Vol()
     76          {
   \                     ADC_Bat_Vol: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     77              float result = 0;
   \   00000002   0x2000             MOVS     R0,#+0
     78              
     79              result = LPLD_ADC_Get(BAT_ADC_ID, BAT_ADC_CH);
   \   00000004   0x2110             MOVS     R1,#+16
   \   00000006   0x....             LDR.N    R0,??DataTable3_2  ;; 0x400bb000
   \   00000008   0x.... 0x....      BL       LPLD_ADC_Get
   \   0000000C   0x.... 0x....      BL       __aeabi_ui2f
     80              //gl_u16bat_voltage = 3*3300*gl_u16bat_ADC/0x0fff;
     81              //return 3*(result * 0.0008002 + 0.0189);
     82              return 3*3.3*result/0x0fff;
   \   00000010   0x.... 0x....      BL       __aeabi_f2d
   \   00000014   0xF05F 0x32CC      MOVS     R2,#-858993460
   \   00000018   0x....             LDR.N    R3,??DataTable3_4  ;; 0x4023cccc
   \   0000001A   0x.... 0x....      BL       __aeabi_dmul
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x....             LDR.N    R3,??DataTable3_5  ;; 0x40affe00
   \   00000022   0x.... 0x....      BL       __aeabi_ddiv
   \   00000026   0x.... 0x....      BL       __aeabi_d2f
   \   0000002A   0xBD02             POP      {R1,PC}          ;; return
     83              //return gl_u16bat_voltage;
     84          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     adc0_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x400BB000         DC32     0x400bb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     adc1_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x4023CCCC         DC32     0x4023cccc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40AFFE00         DC32     0x40affe00
     85          
     86          
     87          
     88          
     89          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   ADC0_Init
         8   -> LPLD_ADC_Init
        24   -> __aeabi_memcpy4
      24   ADC1_Init
         8   -> LPLD_ADC_Init
        24   -> __aeabi_memcpy4
       0   ADC_0_isr
       0   ADC_1_isr
       8   ADC_Bat_Vol
         8   -> LPLD_ADC_Get
         8   -> __aeabi_d2f
         8   -> __aeabi_ddiv
         8   -> __aeabi_dmul
         8   -> __aeabi_f2d
         8   -> __aeabi_ui2f
       8   ADC_CH_Init
         8   -> LPLD_ADC_Chn_Enable
       8   ADC_Init
         8   -> ADC0_Init
         8   -> ADC1_Init
         8   -> ADC_CH_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
      72  ADC0_Init
      78  ADC1_Init
       2  ADC_0_isr
       2  ADC_1_isr
      44  ADC_Bat_Vol
      12  ADC_CH_Init
      16  ADC_Init
      20  adc0_init_struct
      20  adc1_init_struct

 
  40 bytes in section .bss
 250 bytes in section .text
 
 250 bytes of CODE memory
  40 bytes of DATA memory

Errors: none
Warnings: none
