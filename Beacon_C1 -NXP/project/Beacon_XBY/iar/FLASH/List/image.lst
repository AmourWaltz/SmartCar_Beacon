###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       27/Jul/2018  20:43:47
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\signal\src\image.c
#    Command line =  
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\signal\src\image.c" -D LPLD_K60 -lCN
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\iar\FLASH\List"
#        -lB "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\FLASH\List" -o
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\iar\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\app\" -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\CPU\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\common\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\HW\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\DEV\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\uCOS-II\Ports\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\uCOS-II\Source\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\FatFs\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\FatFs\option\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\common\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\driver\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\descriptor\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\USB\class\" -I
#        "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\..\..\..\lib\LPLD\FUNC\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\driver\inc\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\driver\src\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\control\inc\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\control\src\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\debug\inc\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\debug\src\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\device\src\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\device\inc\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\signal\inc\"
#        -I "D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\app\signal\src\" -I
#        "D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\system\" -Ol
#        -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\FLASH\List\image.lst
#    Object file  =  
#        D:\Freescale\信标\Beacon_C1
#        -NXP\project\Beacon_XBY\iar\FLASH\Obj\image.o
#
###############################################################################

D:\Freescale\信标\Beacon_C1 -NXP\project\Beacon_XBY\app\signal\src\image.c
      1          /*=============================================
      2              @file         image.c
      3              @brief        图像处理
      4              @programmer   XBY
      5          =============================================*/
      6          #include "image.h"
      7          #include "include.h"
      8          
      9          //每行权重，视调试情况做修改
     10          //vuint8 err_weight[IMAGE_HEIGHT]=
     11          //{100,99,98,98,97,96,95,95,94,93,92,91,91,90,89,88,88,87,86,85,84,
     12          //84,83,82,81,80,80,79,78,77,77,76,75,74,73,73,72,71,70,70,69,68,67,
     13          //66,66,65,64,63,63,62,61,60,59,59,58,57,56,55,55,54,53,52,52,51
     14          //};
     15          
     16          ////#define  BEACON_MAIN//开启主车程序
     17          //#define  BEACON_STANDBY 
     18          //
     19          //#ifndef  BEACON_MAIN
     20          
     21          /*===============================================================
     22          	@brief     图像处理
     23          	@function  所有图像处理函数调用函数
     24          	@note      可外部调用
     25          ==================================================================*/
     26          

   \                                 In section .text, align 2, keep-with-next
     27          void Image_Process()
     28          {
   \                     Image_Process: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     29              Image_Filter();//二值图像去噪
   \   00000002   0x.... 0x....      BL       Image_Filter
     30              
     31              guc_cur_image = guc_corrected_image;//保存去噪后的图像数组
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable10
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable9
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     32              
     33              Image_Get_Edge(guc_cur_image, gi_edge_left, gi_edge_right);//信标边线提取
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable9_1
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable9
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x.... 0x....      BL       Image_Get_Edge
     34              
     35              Image_Get_Vertical(gi_edge_left);//纵向边线提取
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00000026   0x.... 0x....      BL       Image_Get_Vertical
     36          
     37              Image_Pre_Process(gi_edge_left,gi_edge_right);//预处理矩形矫正
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable9_1
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00000032   0x.... 0x....      BL       Image_Pre_Process
     38              
     39              Image_Area();//面积计算及连续采集
   \   00000036   0x.... 0x....      BL       Image_Area
     40              
     41              Average_Filter();//均值滤波
   \   0000003A   0x.... 0x....      BL       Average_Filter
     42              
     43          //    Track_Liner();//切灯系数调整
     44              
     45              Horizon_Count();//无视野判断延时调整
   \   0000003E   0x.... 0x....      BL       Horizon_Count
     46              
     47              Image_Center();//旁侧切灯中心线定位
   \   00000042   0x.... 0x....      BL       Image_Center
     48              
     49              Route_Planning();//路径规划
   \   00000046   0x.... 0x....      BL       Route_Planning
     50              
     51          //    Direction_Control();
     52          
     53          }
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
     54          
     55          /*===============================================================
     56          	@brief     图像去噪
     57          	@function  二值图像处理椒盐噪声
     58          	@note      相对于对原始灰度图进行中值滤波，采用这种滤波方法
     59                             简洁有效，处理速度快
     60          ==================================================================*/
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void Image_Filter()
     63          {
     64              int16 i,j;
     65              //连续采集三个点,三个点均为白点则认为采集到三个白点
     66              for(i=0; i<IMAGE_HEIGHT; i++)
   \                     Image_Filter: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE000             B.N      ??Image_Filter_0
   \                     ??Image_Filter_1: (+1)
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \                     ??Image_Filter_0: (+1)
   \   00000006   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000008   0x2840             CMP      R0,#+64
   \   0000000A   0xDA39             BGE.N    ??Image_Filter_2
     67              {
     68                  for(j=1; j< IMAGE_WIDTH-1; j++)
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0xE009             B.N      ??Image_Filter_3
     69                  {
     70          //            if(j < IMAGE_WIDTH-1)
     71          //            {
     72          //                if(guc_corrected_image[i][j]==1&&guc_corrected_image[i][j+1]==1&&guc_corrected_image[i][j+2]==1)
     73          //                {
     74          //                    guc_corrected_image[i][j]=1;
     75          //                    guc_corrected_image[i][j+1]=1;
     76          //                    guc_corrected_image[i][j+2]=1;
     77          ////                    guc_corrected_image[i][j+3]=1;
     78          ////                    guc_corrected_image[i][j+4]=1;
     79          //                    j+=2;
     80          //                }
     81          //                else 
     82          //                    guc_corrected_image[i][j]=0;
     83          //            
     84          //            }
     85          //            if(j == IMAGE_WIDTH-1)
     86          //            {
     87          //                if(guc_corrected_image[i][j-2]==1&&guc_corrected_image[i][j-1]==1&&guc_corrected_image[i][j]==1)
     88          //                {
     89          //                    guc_corrected_image[i][j]=1;
     90          //                }
     91          //                else 
     92          //                    guc_corrected_image[i][j]=0;
     93          //            
     94          //            }      
     95                    
     96                        if(guc_corrected_image[i][j]==1)
     97                        {   
     98                            if((guc_corrected_image[i][j-1] == 1) || (guc_corrected_image[i][j+1] == 1))
     99                            {
    100                                guc_corrected_image[i][j]=1;
    101                            }
    102                            else 
    103                            guc_corrected_image[i][j]=0;
   \                     ??Image_Filter_4: (+1)
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable10
   \   00000014   0x2380             MOVS     R3,#+128
   \   00000016   0xFB10 0xF303      SMULBB   R3,R0,R3
   \   0000001A   0x441A             ADD      R2,R2,R3
   \   0000001C   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000001E   0x2300             MOVS     R3,#+0
   \   00000020   0x5453             STRB     R3,[R2, R1]
   \                     ??Image_Filter_5: (+1)
   \   00000022   0x1C49             ADDS     R1,R1,#+1
   \                     ??Image_Filter_3: (+1)
   \   00000024   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000026   0x297F             CMP      R1,#+127
   \   00000028   0xDAEC             BGE.N    ??Image_Filter_1
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable10
   \   0000002E   0x2380             MOVS     R3,#+128
   \   00000030   0xFB10 0xF303      SMULBB   R3,R0,R3
   \   00000034   0x441A             ADD      R2,R2,R3
   \   00000036   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000038   0x5C52             LDRB     R2,[R2, R1]
   \   0000003A   0x2A01             CMP      R2,#+1
   \   0000003C   0xD1F1             BNE.N    ??Image_Filter_5
   \   0000003E   0x.... 0x....      LDR.W    R2,??DataTable10
   \   00000042   0x2380             MOVS     R3,#+128
   \   00000044   0xFB10 0xF303      SMULBB   R3,R0,R3
   \   00000048   0x441A             ADD      R2,R2,R3
   \   0000004A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000004C   0x440A             ADD      R2,R2,R1
   \   0000004E   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   00000052   0x2A01             CMP      R2,#+1
   \   00000054   0xD00A             BEQ.N    ??Image_Filter_6
   \   00000056   0x.... 0x....      LDR.W    R2,??DataTable10
   \   0000005A   0x2380             MOVS     R3,#+128
   \   0000005C   0xFB10 0xF303      SMULBB   R3,R0,R3
   \   00000060   0x441A             ADD      R2,R2,R3
   \   00000062   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000064   0x440A             ADD      R2,R2,R1
   \   00000066   0x7852             LDRB     R2,[R2, #+1]
   \   00000068   0x2A01             CMP      R2,#+1
   \   0000006A   0xD1D1             BNE.N    ??Image_Filter_4
   \                     ??Image_Filter_6: (+1)
   \   0000006C   0x.... 0x....      LDR.W    R2,??DataTable10
   \   00000070   0x2380             MOVS     R3,#+128
   \   00000072   0xFB10 0xF303      SMULBB   R3,R0,R3
   \   00000076   0x441A             ADD      R2,R2,R3
   \   00000078   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000007A   0x2301             MOVS     R3,#+1
   \   0000007C   0x5453             STRB     R3,[R2, R1]
   \   0000007E   0xE7D0             B.N      ??Image_Filter_5
    104                        }
    105                  }
    106              }
    107          }
   \                     ??Image_Filter_2: (+1)
   \   00000080   0x4770             BX       LR               ;; return
    108          
    109          /*===============================================================
    110          	@brief      边线提取
    111          	@function   去噪后二值化图像边线提取   
    112          	@parameter1 图像接收数组
    113          	@parameter2 左边线存储数组
    114          	@parameter3 右边线存储数组
    115          	@note       个人感觉还能继续优化，提高处理速度
    116          ==================================================================*/
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void Image_Get_Edge(vuint8 cameraimage[IMAGE_HEIGHT][IMAGE_WIDTH], int16 *left_edge, int16 *right_edge)
    119          {
   \                     Image_Get_Edge: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    120              int linecount;
    121              int pointcount;
    122              uint8 last_point=0;
   \   0000000A   0xF05F 0x0C00      MOVS     R12,#+0
    123              int left_start_point;//寻找左边界扫描起始行
    124              int right_start_point;//寻找右边界扫描起始行
    125              int left_end_point;//寻找左边界扫描结束行
    126              int right_end_point;//寻找右边界扫描结束行
    127              
    128              vuint8 *image_line;
    129          
    130              image_line = cameraimage[0];
   \   0000000E   0x46A0             MOV      R8,R4
    131              guc_cur_image = cameraimage;
   \   00000010   0x.... 0x....      LDR.W    R3,??DataTable9
   \   00000014   0x601C             STR      R4,[R3, #+0]
    132          
    133              for(linecount = 0;linecount < IMAGE_HEIGHT; linecount++)
   \   00000016   0xF05F 0x0900      MOVS     R9,#+0
   \   0000001A   0xE008             B.N      ??Image_Get_Edge_0
    134              {
    135                  image_line = cameraimage[linecount];
    136                  if(linecount < 1)
    137                  {
    138                      left_start_point = 0;
    139                      right_start_point = IMAGE_WIDTH-1;
    140                      left_end_point = IMAGE_WIDTH-1;
    141                      right_end_point = 0;
    142                  }
    143                  else if((left_edge[linecount-1] == NOT_FOUND)||(right_edge[linecount-1] == NOT_FOUND))
    144                  {
    145                      left_start_point = 0;
    146                      right_start_point = IMAGE_WIDTH-1;
    147                      left_end_point = IMAGE_WIDTH-1;
    148                      right_end_point = 0;
    149                  }
    150                  else if(linecount < IMAGE_HEIGHT)
    151                  {
    152                      left_start_point = (int)Limiter(left_edge[linecount-1]-10,0,IMAGE_WIDTH-1);
    153                      right_start_point = (int)Limiter(right_edge[linecount-1]+10,0,IMAGE_WIDTH-1);
    154                      left_end_point = IMAGE_WIDTH-1;
    155                      right_end_point = 0;
    156                  }
    157                  //从左向右搜寻左边界
    158                  for(pointcount = left_start_point, last_point = 0;pointcount < left_end_point; pointcount++)
    159                  {
    160                      if((last_point==1)&&(image_line[pointcount]==1))
    161                      {
    162                          left_edge[linecount] = pointcount;
    163                          {
    164                            break;
    165                          }    
    166                      }
    167                      last_point = image_line[pointcount];
    168                  }
    169                  if(pointcount==left_end_point)
    170                  {
    171                      if(last_point == 0)
    172                      {
    173                           left_edge[linecount] = NOT_FOUND;
    174                      }
    175                      else if(last_point == 1)
    176                      {
    177                           left_edge[linecount] = left_end_point;
    178                      }
    179                  }
    180                  //从右向左搜右边界 
    181                  for(pointcount = right_start_point,last_point = 0;pointcount > right_end_point;pointcount--)
    182                  {
    183                      if((last_point==1)&&(image_line[pointcount]==1))
    184                      {
    185                          right_edge[linecount] = pointcount;
    186                          {
    187                            break;
    188                          }
    189                      }
    190                      last_point = image_line[pointcount];
    191                  }
    192                  if(pointcount==right_end_point)
    193                  {
    194                      if(last_point == 0)
    195                      {
    196                         right_edge[linecount] = NOT_FOUND;
    197                      }
    198                      else if(last_point == 1)
   \                     ??Image_Get_Edge_1: (+1)
   \   0000001C   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000020   0xF1BC 0x0F01      CMP      R12,#+1
   \   00000024   0xD101             BNE.N    ??Image_Get_Edge_2
    199                      {
    200                          right_edge[linecount] = right_end_point;
   \   00000026   0xF826 0x2019      STRH     R2,[R6, R9, LSL #+1]
    201                      }
   \                     ??Image_Get_Edge_2: (+1)
   \   0000002A   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??Image_Get_Edge_0: (+1)
   \   0000002E   0xF1B9 0x0F40      CMP      R9,#+64
   \   00000032   0xF280 0x8097      BGE.W    ??Image_Get_Edge_3
   \   00000036   0x2380             MOVS     R3,#+128
   \   00000038   0xFB03 0xF309      MUL      R3,R3,R9
   \   0000003C   0xEB04 0x0803      ADD      R8,R4,R3
   \   00000040   0xF1B9 0x0F01      CMP      R9,#+1
   \   00000044   0xDA04             BGE.N    ??Image_Get_Edge_4
   \   00000046   0x2700             MOVS     R7,#+0
   \   00000048   0x207F             MOVS     R0,#+127
   \   0000004A   0x217F             MOVS     R1,#+127
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0xE03E             B.N      ??Image_Get_Edge_5
   \                     ??Image_Get_Edge_4: (+1)
   \   00000050   0xEB05 0x0349      ADD      R3,R5,R9, LSL #+1
   \   00000054   0xF933 0x3C02      LDRSH    R3,[R3, #-2]
   \   00000058   0xF640 0x7CFF      MOVW     R12,#+4095
   \   0000005C   0x4563             CMP      R3,R12
   \   0000005E   0xD007             BEQ.N    ??Image_Get_Edge_6
   \   00000060   0xEB06 0x0349      ADD      R3,R6,R9, LSL #+1
   \   00000064   0xF933 0x3C02      LDRSH    R3,[R3, #-2]
   \   00000068   0xF640 0x7CFF      MOVW     R12,#+4095
   \   0000006C   0x4563             CMP      R3,R12
   \   0000006E   0xD104             BNE.N    ??Image_Get_Edge_7
   \                     ??Image_Get_Edge_6: (+1)
   \   00000070   0x2700             MOVS     R7,#+0
   \   00000072   0x207F             MOVS     R0,#+127
   \   00000074   0x217F             MOVS     R1,#+127
   \   00000076   0x2200             MOVS     R2,#+0
   \   00000078   0xE029             B.N      ??Image_Get_Edge_5
   \                     ??Image_Get_Edge_7: (+1)
   \   0000007A   0xF1B9 0x0F40      CMP      R9,#+64
   \   0000007E   0xDA26             BGE.N    ??Image_Get_Edge_5
   \   00000080   0x.... 0x....      LDR.W    R2,??DataTable10_2  ;; 0x42fe0000
   \   00000084   0x2100             MOVS     R1,#+0
   \   00000086   0x000F             MOVS     R7,R1
   \   00000088   0x4692             MOV      R10,R2
   \   0000008A   0xEB05 0x0049      ADD      R0,R5,R9, LSL #+1
   \   0000008E   0xF930 0x0C02      LDRSH    R0,[R0, #-2]
   \   00000092   0x380A             SUBS     R0,R0,#+10
   \   00000094   0x.... 0x....      BL       __aeabi_i2f
   \   00000098   0x4652             MOV      R2,R10
   \   0000009A   0x0039             MOVS     R1,R7
   \   0000009C   0x.... 0x....      BL       Limiter
   \   000000A0   0x.... 0x....      BL       __aeabi_f2iz
   \   000000A4   0x0007             MOVS     R7,R0
   \   000000A6   0x.... 0x....      LDR.W    R2,??DataTable10_2  ;; 0x42fe0000
   \   000000AA   0x2100             MOVS     R1,#+0
   \   000000AC   0x468A             MOV      R10,R1
   \   000000AE   0x4693             MOV      R11,R2
   \   000000B0   0xEB06 0x0049      ADD      R0,R6,R9, LSL #+1
   \   000000B4   0xF930 0x0C02      LDRSH    R0,[R0, #-2]
   \   000000B8   0x300A             ADDS     R0,R0,#+10
   \   000000BA   0x.... 0x....      BL       __aeabi_i2f
   \   000000BE   0x465A             MOV      R2,R11
   \   000000C0   0x4651             MOV      R1,R10
   \   000000C2   0x.... 0x....      BL       Limiter
   \   000000C6   0x.... 0x....      BL       __aeabi_f2iz
   \   000000CA   0x217F             MOVS     R1,#+127
   \   000000CC   0x2200             MOVS     R2,#+0
   \                     ??Image_Get_Edge_5: (+1)
   \   000000CE   0x003B             MOVS     R3,R7
   \   000000D0   0xF05F 0x0C00      MOVS     R12,#+0
   \   000000D4   0xE002             B.N      ??Image_Get_Edge_8
   \                     ??Image_Get_Edge_9: (+1)
   \   000000D6   0xF818 0xC003      LDRB     R12,[R8, R3]
   \   000000DA   0x1C5B             ADDS     R3,R3,#+1
   \                     ??Image_Get_Edge_8: (+1)
   \   000000DC   0x428B             CMP      R3,R1
   \   000000DE   0xDA0B             BGE.N    ??Image_Get_Edge_10
   \   000000E0   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000000E4   0xF1BC 0x0F01      CMP      R12,#+1
   \   000000E8   0xD1F5             BNE.N    ??Image_Get_Edge_9
   \   000000EA   0xF818 0xE003      LDRB     LR,[R8, R3]
   \   000000EE   0xF1BE 0x0F01      CMP      LR,#+1
   \   000000F2   0xD1F0             BNE.N    ??Image_Get_Edge_9
   \   000000F4   0xF825 0x3019      STRH     R3,[R5, R9, LSL #+1]
   \                     ??Image_Get_Edge_10: (+1)
   \   000000F8   0x428B             CMP      R3,R1
   \   000000FA   0xD110             BNE.N    ??Image_Get_Edge_11
   \   000000FC   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000100   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000104   0xD104             BNE.N    ??Image_Get_Edge_12
   \   00000106   0xF640 0x73FF      MOVW     R3,#+4095
   \   0000010A   0xF825 0x3019      STRH     R3,[R5, R9, LSL #+1]
   \   0000010E   0xE006             B.N      ??Image_Get_Edge_11
   \                     ??Image_Get_Edge_12: (+1)
   \   00000110   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000114   0xF1BC 0x0F01      CMP      R12,#+1
   \   00000118   0xD101             BNE.N    ??Image_Get_Edge_11
   \   0000011A   0xF825 0x1019      STRH     R1,[R5, R9, LSL #+1]
   \                     ??Image_Get_Edge_11: (+1)
   \   0000011E   0x0003             MOVS     R3,R0
   \   00000120   0xF05F 0x0C00      MOVS     R12,#+0
   \   00000124   0xE002             B.N      ??Image_Get_Edge_13
   \                     ??Image_Get_Edge_14: (+1)
   \   00000126   0xF818 0xC003      LDRB     R12,[R8, R3]
   \   0000012A   0x1E5B             SUBS     R3,R3,#+1
   \                     ??Image_Get_Edge_13: (+1)
   \   0000012C   0x429A             CMP      R2,R3
   \   0000012E   0xDA0B             BGE.N    ??Image_Get_Edge_15
   \   00000130   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000134   0xF1BC 0x0F01      CMP      R12,#+1
   \   00000138   0xD1F5             BNE.N    ??Image_Get_Edge_14
   \   0000013A   0xF818 0xE003      LDRB     LR,[R8, R3]
   \   0000013E   0xF1BE 0x0F01      CMP      LR,#+1
   \   00000142   0xD1F0             BNE.N    ??Image_Get_Edge_14
   \   00000144   0xF826 0x3019      STRH     R3,[R6, R9, LSL #+1]
   \                     ??Image_Get_Edge_15: (+1)
   \   00000148   0x4293             CMP      R3,R2
   \   0000014A   0xF47F 0xAF6E      BNE.W    ??Image_Get_Edge_2
   \   0000014E   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000152   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000156   0xF47F 0xAF61      BNE.W    ??Image_Get_Edge_1
   \   0000015A   0xF640 0x73FF      MOVW     R3,#+4095
   \   0000015E   0xF826 0x3019      STRH     R3,[R6, R9, LSL #+1]
   \   00000162   0xE762             B.N      ??Image_Get_Edge_2
    202                  }
    203              } 
    204          }
   \                     ??Image_Get_Edge_3: (+1)
   \   00000164   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    205          
    206          /*===============================================================
    207          	@brief     纵向边线提取
    208          	@function  将传回来的不规则图像进行矫正使之为矩形
    209          	@note      由于摄像头以一定角度俯视并为广角镜头，因此信标形状不规则
    210                             通过加权平均可以矫正为矩形便于后续处理
    211          ==================================================================*/
    212          

   \                                 In section .text, align 2, keep-with-next
    213          void Image_Get_Vertical(int16 *left_edge)
    214          {
    215              int i;
    216              
    217              for(i=0; i<IMAGE_HEIGHT; i++)
   \                     Image_Get_Vertical: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE005             B.N      ??Image_Get_Vertical_0
    218              {
    219                  if(i == 0)
    220                  {
    221                      if((left_edge[i] != NOT_FOUND) && (left_edge[i+1] != NOT_FOUND) && (left_edge[i+2] != NOT_FOUND))
    222                      {
    223                          gi_start_line = i;
    224                          break;
    225                      }
    226                  }
    227                  else if(i == 1)
    228                  {
    229                      if((left_edge[i-1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND) && (left_edge[i+1] != NOT_FOUND) && (left_edge[i+2] != NOT_FOUND))
    230                      {
    231                          gi_start_line = i;
    232                          break;
    233                      }
    234                  }
    235                  else if((i >= 2) && (i <= IMAGE_HEIGHT-3))
    236                  {
    237                      if((left_edge[i-2] == NOT_FOUND) && (left_edge[i-1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND) && (left_edge[i+1] != NOT_FOUND) && (left_edge[i+2] != NOT_FOUND))
    238                      {
    239                          gi_start_line = i;
    240                          break;
    241                      }
    242                  }
    243                  else if(i == IMAGE_HEIGHT-2)
    244                  {
    245                      if((left_edge[i-2] == NOT_FOUND) && (left_edge[i-1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND) && (left_edge[i+1] != NOT_FOUND))
    246                      {
    247                          gi_start_line = i;
    248                          break;
    249                      }
    250                  }
    251                  else if(i == IMAGE_HEIGHT-1)
    252                  {
    253                      if((left_edge[i-2] == NOT_FOUND) && (left_edge[i-1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND))
    254                      {
    255                          gi_start_line = i;
    256                          break;
    257                      }
    258                      else
    259                        gi_start_line = NOT_FOUND;
   \                     ??Image_Get_Vertical_1: (+1)
   \   00000004   0xF640 0x72FF      MOVW     R2,#+4095
   \   00000008   0x.... 0x....      LDR.W    R3,??DataTable10_3
   \   0000000C   0x801A             STRH     R2,[R3, #+0]
   \                     ??Image_Get_Vertical_2: (+1)
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
   \                     ??Image_Get_Vertical_0: (+1)
   \   00000010   0x2940             CMP      R1,#+64
   \   00000012   0xF280 0x80B3      BGE.W    ??Image_Get_Vertical_3
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD119             BNE.N    ??Image_Get_Vertical_4
   \   0000001A   0xF930 0x2011      LDRSH    R2,[R0, R1, LSL #+1]
   \   0000001E   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000022   0x429A             CMP      R2,R3
   \   00000024   0xD0F3             BEQ.N    ??Image_Get_Vertical_2
   \   00000026   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   0000002A   0xF9B2 0x2002      LDRSH    R2,[R2, #+2]
   \   0000002E   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000032   0x429A             CMP      R2,R3
   \   00000034   0xD0EB             BEQ.N    ??Image_Get_Vertical_2
   \   00000036   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   0000003A   0xF9B2 0x2004      LDRSH    R2,[R2, #+4]
   \   0000003E   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000042   0x429A             CMP      R2,R3
   \   00000044   0xD0E3             BEQ.N    ??Image_Get_Vertical_2
   \   00000046   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   0000004A   0x8011             STRH     R1,[R2, #+0]
   \   0000004C   0xE096             B.N      ??Image_Get_Vertical_3
   \                     ??Image_Get_Vertical_4: (+1)
   \   0000004E   0x2901             CMP      R1,#+1
   \   00000050   0xD121             BNE.N    ??Image_Get_Vertical_5
   \   00000052   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   00000056   0xF932 0x2C02      LDRSH    R2,[R2, #-2]
   \   0000005A   0xF640 0x73FF      MOVW     R3,#+4095
   \   0000005E   0x429A             CMP      R2,R3
   \   00000060   0xD1D5             BNE.N    ??Image_Get_Vertical_2
   \   00000062   0xF930 0x2011      LDRSH    R2,[R0, R1, LSL #+1]
   \   00000066   0xF640 0x73FF      MOVW     R3,#+4095
   \   0000006A   0x429A             CMP      R2,R3
   \   0000006C   0xD0CF             BEQ.N    ??Image_Get_Vertical_2
   \   0000006E   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   00000072   0xF9B2 0x2002      LDRSH    R2,[R2, #+2]
   \   00000076   0xF640 0x73FF      MOVW     R3,#+4095
   \   0000007A   0x429A             CMP      R2,R3
   \   0000007C   0xD0C7             BEQ.N    ??Image_Get_Vertical_2
   \   0000007E   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   00000082   0xF9B2 0x2004      LDRSH    R2,[R2, #+4]
   \   00000086   0xF640 0x73FF      MOVW     R3,#+4095
   \   0000008A   0x429A             CMP      R2,R3
   \   0000008C   0xD0BF             BEQ.N    ??Image_Get_Vertical_2
   \   0000008E   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   00000092   0x8011             STRH     R1,[R2, #+0]
   \   00000094   0xE072             B.N      ??Image_Get_Vertical_3
   \                     ??Image_Get_Vertical_5: (+1)
   \   00000096   0x1E8A             SUBS     R2,R1,#+2
   \   00000098   0x2A3C             CMP      R2,#+60
   \   0000009A   0xD229             BCS.N    ??Image_Get_Vertical_6
   \   0000009C   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000000A0   0xF932 0x2C04      LDRSH    R2,[R2, #-4]
   \   000000A4   0xF640 0x73FF      MOVW     R3,#+4095
   \   000000A8   0x429A             CMP      R2,R3
   \   000000AA   0xD1B0             BNE.N    ??Image_Get_Vertical_2
   \   000000AC   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000000B0   0xF932 0x2C02      LDRSH    R2,[R2, #-2]
   \   000000B4   0xF640 0x73FF      MOVW     R3,#+4095
   \   000000B8   0x429A             CMP      R2,R3
   \   000000BA   0xD1A8             BNE.N    ??Image_Get_Vertical_2
   \   000000BC   0xF930 0x2011      LDRSH    R2,[R0, R1, LSL #+1]
   \   000000C0   0xF640 0x73FF      MOVW     R3,#+4095
   \   000000C4   0x429A             CMP      R2,R3
   \   000000C6   0xD0A2             BEQ.N    ??Image_Get_Vertical_2
   \   000000C8   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000000CC   0xF9B2 0x2002      LDRSH    R2,[R2, #+2]
   \   000000D0   0xF640 0x73FF      MOVW     R3,#+4095
   \   000000D4   0x429A             CMP      R2,R3
   \   000000D6   0xD09A             BEQ.N    ??Image_Get_Vertical_2
   \   000000D8   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000000DC   0xF9B2 0x2004      LDRSH    R2,[R2, #+4]
   \   000000E0   0xF640 0x73FF      MOVW     R3,#+4095
   \   000000E4   0x429A             CMP      R2,R3
   \   000000E6   0xD092             BEQ.N    ??Image_Get_Vertical_2
   \   000000E8   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   000000EC   0x8011             STRH     R1,[R2, #+0]
   \   000000EE   0xE045             B.N      ??Image_Get_Vertical_3
   \                     ??Image_Get_Vertical_6: (+1)
   \   000000F0   0x293E             CMP      R1,#+62
   \   000000F2   0xD124             BNE.N    ??Image_Get_Vertical_7
   \   000000F4   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000000F8   0xF932 0x2C04      LDRSH    R2,[R2, #-4]
   \   000000FC   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000100   0x429A             CMP      R2,R3
   \   00000102   0xD184             BNE.N    ??Image_Get_Vertical_2
   \   00000104   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   00000108   0xF932 0x2C02      LDRSH    R2,[R2, #-2]
   \   0000010C   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000110   0x429A             CMP      R2,R3
   \   00000112   0xF47F 0xAF7C      BNE.W    ??Image_Get_Vertical_2
   \   00000116   0xF930 0x2011      LDRSH    R2,[R0, R1, LSL #+1]
   \   0000011A   0xF640 0x73FF      MOVW     R3,#+4095
   \   0000011E   0x429A             CMP      R2,R3
   \   00000120   0xF43F 0xAF75      BEQ.W    ??Image_Get_Vertical_2
   \   00000124   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   00000128   0xF9B2 0x2002      LDRSH    R2,[R2, #+2]
   \   0000012C   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000130   0x429A             CMP      R2,R3
   \   00000132   0xF43F 0xAF6C      BEQ.W    ??Image_Get_Vertical_2
   \   00000136   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   0000013A   0x8011             STRH     R1,[R2, #+0]
   \   0000013C   0xE01E             B.N      ??Image_Get_Vertical_3
   \                     ??Image_Get_Vertical_7: (+1)
   \   0000013E   0x293F             CMP      R1,#+63
   \   00000140   0xF47F 0xAF65      BNE.W    ??Image_Get_Vertical_2
   \   00000144   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   00000148   0xF932 0x2C04      LDRSH    R2,[R2, #-4]
   \   0000014C   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000150   0x429A             CMP      R2,R3
   \   00000152   0xF47F 0xAF57      BNE.W    ??Image_Get_Vertical_1
   \   00000156   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   0000015A   0xF932 0x2C02      LDRSH    R2,[R2, #-2]
   \   0000015E   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000162   0x429A             CMP      R2,R3
   \   00000164   0xF47F 0xAF4E      BNE.W    ??Image_Get_Vertical_1
   \   00000168   0xF930 0x2011      LDRSH    R2,[R0, R1, LSL #+1]
   \   0000016C   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000170   0x429A             CMP      R2,R3
   \   00000172   0xF43F 0xAF47      BEQ.W    ??Image_Get_Vertical_1
   \   00000176   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   0000017A   0x8011             STRH     R1,[R2, #+0]
    260                  }
    261              }
    262              
    263              for(i=IMAGE_HEIGHT-1; i>=0; i--)
   \                     ??Image_Get_Vertical_3: (+1)
   \   0000017C   0x213F             MOVS     R1,#+63
   \   0000017E   0xE005             B.N      ??Image_Get_Vertical_8
    264              {
    265                  if(i == IMAGE_HEIGHT-1)
    266                  {
    267                      if((left_edge[i] != NOT_FOUND) && (left_edge[i-1] != NOT_FOUND) && (left_edge[i-2] != NOT_FOUND))
    268                      {
    269                          gi_end_line = i;
    270                          break;
    271                      }
    272                  }
    273                  else if(i == IMAGE_HEIGHT-2)
    274                  {
    275                      if((left_edge[i+1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND) && (left_edge[i-1] != NOT_FOUND) && (left_edge[i-2] != NOT_FOUND))
    276                      {
    277                          gi_end_line = i;
    278                          break;
    279                      }
    280                  }
    281                  else if((i >= 2) && (i <= IMAGE_HEIGHT-3))
    282                  {
    283                      if((left_edge[i+2] == NOT_FOUND) && (left_edge[i+1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND) && (left_edge[i-1] != NOT_FOUND) && (left_edge[i-2] != NOT_FOUND))
    284                      {
    285                          gi_end_line = i;
    286                          break;
    287                      }
    288                  }
    289                  else if(i == 1)
    290                  {
    291                      if((left_edge[i+2] == NOT_FOUND) && (left_edge[i+1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND) && (left_edge[i-1] != NOT_FOUND))
    292                      {
    293                          gi_end_line = i;
    294                          break;
    295                      }
    296                  }
    297                  else if(i == 0)
    298                  {
    299                      if((left_edge[i+2] == NOT_FOUND) && (left_edge[i+1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND))
    300                      {
    301                          gi_end_line = i;
    302                          break;
    303                      }
    304                      else
    305                        gi_end_line = NOT_FOUND;
   \                     ??Image_Get_Vertical_9: (+1)
   \   00000180   0xF640 0x72FF      MOVW     R2,#+4095
   \   00000184   0x.... 0x....      LDR.W    R3,??DataTable10_4
   \   00000188   0x801A             STRH     R2,[R3, #+0]
   \                     ??Image_Get_Vertical_10: (+1)
   \   0000018A   0x1E49             SUBS     R1,R1,#+1
   \                     ??Image_Get_Vertical_8: (+1)
   \   0000018C   0x2900             CMP      R1,#+0
   \   0000018E   0xF100 0x80B3      BMI.W    ??Image_Get_Vertical_11
   \   00000192   0x293F             CMP      R1,#+63
   \   00000194   0xD119             BNE.N    ??Image_Get_Vertical_12
   \   00000196   0xF930 0x2011      LDRSH    R2,[R0, R1, LSL #+1]
   \   0000019A   0xF640 0x73FF      MOVW     R3,#+4095
   \   0000019E   0x429A             CMP      R2,R3
   \   000001A0   0xD0F3             BEQ.N    ??Image_Get_Vertical_10
   \   000001A2   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000001A6   0xF932 0x2C02      LDRSH    R2,[R2, #-2]
   \   000001AA   0xF640 0x73FF      MOVW     R3,#+4095
   \   000001AE   0x429A             CMP      R2,R3
   \   000001B0   0xD0EB             BEQ.N    ??Image_Get_Vertical_10
   \   000001B2   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000001B6   0xF932 0x2C04      LDRSH    R2,[R2, #-4]
   \   000001BA   0xF640 0x73FF      MOVW     R3,#+4095
   \   000001BE   0x429A             CMP      R2,R3
   \   000001C0   0xD0E3             BEQ.N    ??Image_Get_Vertical_10
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   000001C6   0x8001             STRH     R1,[R0, #+0]
   \   000001C8   0xE096             B.N      ??Image_Get_Vertical_11
   \                     ??Image_Get_Vertical_12: (+1)
   \   000001CA   0x293E             CMP      R1,#+62
   \   000001CC   0xD121             BNE.N    ??Image_Get_Vertical_13
   \   000001CE   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000001D2   0xF9B2 0x2002      LDRSH    R2,[R2, #+2]
   \   000001D6   0xF640 0x73FF      MOVW     R3,#+4095
   \   000001DA   0x429A             CMP      R2,R3
   \   000001DC   0xD1D5             BNE.N    ??Image_Get_Vertical_10
   \   000001DE   0xF930 0x2011      LDRSH    R2,[R0, R1, LSL #+1]
   \   000001E2   0xF640 0x73FF      MOVW     R3,#+4095
   \   000001E6   0x429A             CMP      R2,R3
   \   000001E8   0xD0CF             BEQ.N    ??Image_Get_Vertical_10
   \   000001EA   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000001EE   0xF932 0x2C02      LDRSH    R2,[R2, #-2]
   \   000001F2   0xF640 0x73FF      MOVW     R3,#+4095
   \   000001F6   0x429A             CMP      R2,R3
   \   000001F8   0xD0C7             BEQ.N    ??Image_Get_Vertical_10
   \   000001FA   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000001FE   0xF932 0x2C04      LDRSH    R2,[R2, #-4]
   \   00000202   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000206   0x429A             CMP      R2,R3
   \   00000208   0xD0BF             BEQ.N    ??Image_Get_Vertical_10
   \   0000020A   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   0000020E   0x8001             STRH     R1,[R0, #+0]
   \   00000210   0xE072             B.N      ??Image_Get_Vertical_11
   \                     ??Image_Get_Vertical_13: (+1)
   \   00000212   0x1E8A             SUBS     R2,R1,#+2
   \   00000214   0x2A3C             CMP      R2,#+60
   \   00000216   0xD229             BCS.N    ??Image_Get_Vertical_14
   \   00000218   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   0000021C   0xF9B2 0x2004      LDRSH    R2,[R2, #+4]
   \   00000220   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000224   0x429A             CMP      R2,R3
   \   00000226   0xD1B0             BNE.N    ??Image_Get_Vertical_10
   \   00000228   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   0000022C   0xF9B2 0x2002      LDRSH    R2,[R2, #+2]
   \   00000230   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000234   0x429A             CMP      R2,R3
   \   00000236   0xD1A8             BNE.N    ??Image_Get_Vertical_10
   \   00000238   0xF930 0x2011      LDRSH    R2,[R0, R1, LSL #+1]
   \   0000023C   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000240   0x429A             CMP      R2,R3
   \   00000242   0xD0A2             BEQ.N    ??Image_Get_Vertical_10
   \   00000244   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   00000248   0xF932 0x2C02      LDRSH    R2,[R2, #-2]
   \   0000024C   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000250   0x429A             CMP      R2,R3
   \   00000252   0xD09A             BEQ.N    ??Image_Get_Vertical_10
   \   00000254   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   00000258   0xF932 0x2C04      LDRSH    R2,[R2, #-4]
   \   0000025C   0xF640 0x73FF      MOVW     R3,#+4095
   \   00000260   0x429A             CMP      R2,R3
   \   00000262   0xD092             BEQ.N    ??Image_Get_Vertical_10
   \   00000264   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   00000268   0x8001             STRH     R1,[R0, #+0]
   \   0000026A   0xE045             B.N      ??Image_Get_Vertical_11
   \                     ??Image_Get_Vertical_14: (+1)
   \   0000026C   0x2901             CMP      R1,#+1
   \   0000026E   0xD124             BNE.N    ??Image_Get_Vertical_15
   \   00000270   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   00000274   0xF9B2 0x2004      LDRSH    R2,[R2, #+4]
   \   00000278   0xF640 0x73FF      MOVW     R3,#+4095
   \   0000027C   0x429A             CMP      R2,R3
   \   0000027E   0xD184             BNE.N    ??Image_Get_Vertical_10
   \   00000280   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   00000284   0xF9B2 0x2002      LDRSH    R2,[R2, #+2]
   \   00000288   0xF640 0x73FF      MOVW     R3,#+4095
   \   0000028C   0x429A             CMP      R2,R3
   \   0000028E   0xF47F 0xAF7C      BNE.W    ??Image_Get_Vertical_10
   \   00000292   0xF930 0x2011      LDRSH    R2,[R0, R1, LSL #+1]
   \   00000296   0xF640 0x73FF      MOVW     R3,#+4095
   \   0000029A   0x429A             CMP      R2,R3
   \   0000029C   0xF43F 0xAF75      BEQ.W    ??Image_Get_Vertical_10
   \   000002A0   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000002A4   0xF932 0x2C02      LDRSH    R2,[R2, #-2]
   \   000002A8   0xF640 0x73FF      MOVW     R3,#+4095
   \   000002AC   0x429A             CMP      R2,R3
   \   000002AE   0xF43F 0xAF6C      BEQ.W    ??Image_Get_Vertical_10
   \   000002B2   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   000002B6   0x8001             STRH     R1,[R0, #+0]
   \   000002B8   0xE01E             B.N      ??Image_Get_Vertical_11
   \                     ??Image_Get_Vertical_15: (+1)
   \   000002BA   0x2900             CMP      R1,#+0
   \   000002BC   0xF47F 0xAF65      BNE.W    ??Image_Get_Vertical_10
   \   000002C0   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000002C4   0xF9B2 0x2004      LDRSH    R2,[R2, #+4]
   \   000002C8   0xF640 0x73FF      MOVW     R3,#+4095
   \   000002CC   0x429A             CMP      R2,R3
   \   000002CE   0xF47F 0xAF57      BNE.W    ??Image_Get_Vertical_9
   \   000002D2   0xEB00 0x0241      ADD      R2,R0,R1, LSL #+1
   \   000002D6   0xF9B2 0x2002      LDRSH    R2,[R2, #+2]
   \   000002DA   0xF640 0x73FF      MOVW     R3,#+4095
   \   000002DE   0x429A             CMP      R2,R3
   \   000002E0   0xF47F 0xAF4E      BNE.W    ??Image_Get_Vertical_9
   \   000002E4   0xF930 0x2011      LDRSH    R2,[R0, R1, LSL #+1]
   \   000002E8   0xF640 0x73FF      MOVW     R3,#+4095
   \   000002EC   0x429A             CMP      R2,R3
   \   000002EE   0xF43F 0xAF47      BEQ.W    ??Image_Get_Vertical_9
   \   000002F2   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   000002F6   0x8001             STRH     R1,[R0, #+0]
    306                  }
    307              }
    308          }
   \                     ??Image_Get_Vertical_11: (+1)
   \   000002F8   0x4770             BX       LR               ;; return
    309          
    310          /*===============================================================
    311          	@brief     矩形矫正
    312          	@function  将传回来的不规则图像进行矫正使之为矩形
    313          	@note      由于摄像头以一定角度俯视并为广角镜头，因此信标形状不规则
    314                             通过加权平均可以矫正为矩形便于后续处理
    315          ==================================================================*/
    316          

   \                                 In section .text, align 2, keep-with-next
    317          void Image_Pre_Process(int16 *left_edge, int16 *right_edge)
    318          {
   \                     Image_Pre_Process: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    319              uint32 leftweight=0,rightweight=0;//左右边界权重和
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2200             MOVS     R2,#+0
    320              int i;
    321              gi_left_count = 1;
   \   00000006   0x2401             MOVS     R4,#+1
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable10_5
   \   0000000C   0x802C             STRH     R4,[R5, #+0]
    322              gi_right_count = 1;
   \   0000000E   0x2401             MOVS     R4,#+1
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable10_6
   \   00000014   0x802C             STRH     R4,[R5, #+0]
    323              
    324              for(i=0; i<IMAGE_HEIGHT; i++)
   \   00000016   0x2400             MOVS     R4,#+0
   \   00000018   0xE020             B.N      ??Image_Pre_Process_0
    325              {
    326                  if(left_edge[i] != NOT_FOUND)
   \                     ??Image_Pre_Process_1: (+1)
   \   0000001A   0xF930 0x5014      LDRSH    R5,[R0, R4, LSL #+1]
   \   0000001E   0xF640 0x76FF      MOVW     R6,#+4095
   \   00000022   0x42B5             CMP      R5,R6
   \   00000024   0xD009             BEQ.N    ??Image_Pre_Process_2
    327                  {
    328                      leftweight += left_edge[i];
   \   00000026   0xF930 0x5014      LDRSH    R5,[R0, R4, LSL #+1]
   \   0000002A   0x195B             ADDS     R3,R3,R5
    329                      //leftweight += left_edge[i] * err_weight[IMAGE_HEIGHT-1-i];
    330                      gi_left_count++;
   \   0000002C   0x.... 0x....      LDR.W    R5,??DataTable10_5
   \   00000030   0x882D             LDRH     R5,[R5, #+0]
   \   00000032   0x1C6D             ADDS     R5,R5,#+1
   \   00000034   0x.... 0x....      LDR.W    R6,??DataTable10_5
   \   00000038   0x8035             STRH     R5,[R6, #+0]
    331                  }
    332                  if(right_edge[i] != NOT_FOUND)
   \                     ??Image_Pre_Process_2: (+1)
   \   0000003A   0xF931 0x5014      LDRSH    R5,[R1, R4, LSL #+1]
   \   0000003E   0xF640 0x76FF      MOVW     R6,#+4095
   \   00000042   0x42B5             CMP      R5,R6
   \   00000044   0xD009             BEQ.N    ??Image_Pre_Process_3
    333                  {
    334                      rightweight += right_edge[i];
   \   00000046   0xF931 0x5014      LDRSH    R5,[R1, R4, LSL #+1]
   \   0000004A   0x1952             ADDS     R2,R2,R5
    335                      //rightweight += right_edge[i] * err_weight[IMAGE_HEIGHT-1-i];
    336                      gi_right_count++;
   \   0000004C   0x.... 0x....      LDR.W    R5,??DataTable10_6
   \   00000050   0x882D             LDRH     R5,[R5, #+0]
   \   00000052   0x1C6D             ADDS     R5,R5,#+1
   \   00000054   0x.... 0x....      LDR.W    R6,??DataTable10_6
   \   00000058   0x8035             STRH     R5,[R6, #+0]
    337                  }
    338              }
   \                     ??Image_Pre_Process_3: (+1)
   \   0000005A   0x1C64             ADDS     R4,R4,#+1
   \                     ??Image_Pre_Process_0: (+1)
   \   0000005C   0x2C40             CMP      R4,#+64
   \   0000005E   0xDBDC             BLT.N    ??Image_Pre_Process_1
    339              
    340              gi_edge_left_value = (int16)(leftweight / gi_left_count);
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable10_5
   \   00000064   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000068   0xFBB3 0xF0F0      UDIV     R0,R3,R0
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable10_7
   \   00000070   0x8008             STRH     R0,[R1, #+0]
    341              gi_edge_right_value = (int16)(rightweight / gi_right_count);
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   00000076   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000007A   0xFBB2 0xF0F0      UDIV     R0,R2,R0
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable10_8
   \   00000082   0x8008             STRH     R0,[R1, #+0]
    342          }
   \   00000084   0xBC70             POP      {R4-R6}
   \   00000086   0x4770             BX       LR               ;; return
    343          
    344          /*===============================================================
    345          	@brief     面积计算及连续采集
    346          	@function  对识别的信标图像面积进行计算，方便估算距离，连续采集防闪烁
    347          	@note      两种思路，一种是对检测的边界进行计算，另一种是数像素点
    348                             前者速度相对较快，但可能不如后者精确
    349                             如果连续采集三次仍未得到图像则认为失去视野
    350          ==================================================================*/
    351          

   \                                 In section .text, align 2, keep-with-next
    352          void Image_Area()
    353          {
    354              int16 leftcount,rightcount;
    355              int16 leftedge,rightedge;
    356              static uint8 suc_image_count = 0;
    357              static int16 si_image_area_temp = 0;//储存检测到信标灯时的面积
    358              static int16 si_image_center_temp = 0;//储存检测到信标灯时的中心线
    359              static int16 si_image_vertical_temp = 0;//储存检测到信标灯时的纵坐标
    360              
    361              leftcount = gi_left_count;
   \                     Image_Area: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable10_5
   \   00000004   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
    362              rightcount = gi_right_count;
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable10_6
   \   0000000C   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
    363              leftedge = gi_edge_left_value;
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable10_7
   \   00000014   0xF9B2 0x2000      LDRSH    R2,[R2, #+0]
    364              rightedge = gi_edge_right_value;
   \   00000018   0x.... 0x....      LDR.W    R3,??DataTable10_8
   \   0000001C   0xF9B3 0x3000      LDRSH    R3,[R3, #+0]
    365              
    366              gi_image_area = (int16)((leftcount + rightcount)* (rightedge - leftedge)/2);
   \   00000020   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000022   0xFA01 0xF080      SXTAH    R0,R1,R0
   \   00000026   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00000028   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   0000002A   0x1A99             SUBS     R1,R3,R2
   \   0000002C   0x4348             MULS     R0,R1,R0
   \   0000002E   0x2102             MOVS     R1,#+2
   \   00000030   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable10_9
   \   00000038   0x8008             STRH     R0,[R1, #+0]
    367              gi_image_center = (int16)((rightedge + leftedge)/2);
   \   0000003A   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   0000003C   0xFA02 0xF083      SXTAH    R0,R2,R3
   \   00000040   0x2102             MOVS     R1,#+2
   \   00000042   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable10_10
   \   0000004A   0x8008             STRH     R0,[R1, #+0]
    368              gi_image_vertical = (int16)((gi_end_line + gi_start_line)/2);
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   00000050   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   00000058   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000005C   0x1808             ADDS     R0,R1,R0
   \   0000005E   0x2102             MOVS     R1,#+2
   \   00000060   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable10_11
   \   00000068   0x8008             STRH     R0,[R1, #+0]
    369              
    370          //    if((rightedge == leftedge) && (!rightedge) && (!leftedge))
    371          //      gi_image_area =1;
    372              
    373              if((gi_image_area == 0)&&(gi_image_center == 0))
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable10_9
   \   0000006E   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD13B             BNE.N    ??Image_Area_0
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable10_10
   \   0000007A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD135             BNE.N    ??Image_Area_0
    374              {
    375                  suc_image_count++;
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0x1C40             ADDS     R0,R0,#+1
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable10_12
   \   0000008E   0x7008             STRB     R0,[R1, #+0]
    376                  if(suc_image_count == gc_not_found_count)
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   00000094   0x7800             LDRB     R0,[R0, #+0]
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable10_13
   \   0000009A   0xF991 0x1000      LDRSB    R1,[R1, #+0]
   \   0000009E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000A0   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000000A2   0x4288             CMP      R0,R1
   \   000000A4   0xD10B             BNE.N    ??Image_Area_1
    377                  {
    378                      guc_find_image_flag = NOT_FOUND_IMAGE;
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable10_14
   \   000000AC   0x7008             STRB     R0,[R1, #+0]
    379                      suc_image_count = 0;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable10_12
   \   000000B4   0x7008             STRB     R0,[R1, #+0]
    380                      gc_not_found_count = 3;
   \   000000B6   0x2003             MOVS     R0,#+3
   \   000000B8   0x.... 0x....      LDR.W    R1,??DataTable10_13
   \   000000BC   0x7008             STRB     R0,[R1, #+0]
    381                  }
    382                  if(guc_find_image_flag != NOT_FOUND_IMAGE)
   \                     ??Image_Area_1: (+1)
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable10_14
   \   000000C2   0x7800             LDRB     R0,[R0, #+0]
   \   000000C4   0x2801             CMP      R0,#+1
   \   000000C6   0xD02C             BEQ.N    ??Image_Area_2
    383                  {
    384                      gi_image_center = si_image_center_temp;
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable10_15
   \   000000CC   0x8800             LDRH     R0,[R0, #+0]
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable10_10
   \   000000D2   0x8008             STRH     R0,[R1, #+0]
    385                      gi_image_area = si_image_area_temp;
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable10_16
   \   000000D8   0x8800             LDRH     R0,[R0, #+0]
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable10_9
   \   000000DE   0x8008             STRH     R0,[R1, #+0]
    386                      gi_image_vertical = si_image_vertical_temp;
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable10_17
   \   000000E4   0x8800             LDRH     R0,[R0, #+0]
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable10_11
   \   000000EA   0x8008             STRH     R0,[R1, #+0]
   \   000000EC   0xE019             B.N      ??Image_Area_2
    387                  }
    388              }
    389              else
    390              {
    391                  si_image_center_temp = gi_image_center;
   \                     ??Image_Area_0: (+1)
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable10_10
   \   000000F2   0x8800             LDRH     R0,[R0, #+0]
   \   000000F4   0x.... 0x....      LDR.W    R1,??DataTable10_15
   \   000000F8   0x8008             STRH     R0,[R1, #+0]
    392                  si_image_area_temp = gi_image_area;
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable10_9
   \   000000FE   0x8800             LDRH     R0,[R0, #+0]
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable10_16
   \   00000104   0x8008             STRH     R0,[R1, #+0]
    393                  si_image_vertical_temp = gi_image_vertical;
   \   00000106   0x.... 0x....      LDR.W    R0,??DataTable10_11
   \   0000010A   0x8800             LDRH     R0,[R0, #+0]
   \   0000010C   0x.... 0x....      LDR.W    R1,??DataTable10_17
   \   00000110   0x8008             STRH     R0,[R1, #+0]
    394                  guc_find_image_flag = FOUND_IMAGE;
   \   00000112   0x2000             MOVS     R0,#+0
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable10_14
   \   00000118   0x7008             STRB     R0,[R1, #+0]
    395                  suc_image_count = 0;
   \   0000011A   0x2000             MOVS     R0,#+0
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable10_12
   \   00000120   0x7008             STRB     R0,[R1, #+0]
    396              }
    397          }
   \                     ??Image_Area_2: (+1)
   \   00000122   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 1
   \                     `Image_Area::suc_image_count`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     `Image_Area::si_image_area_temp`:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     `Image_Area::si_image_center_temp`:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     `Image_Area::si_image_vertical_temp`:
   \   00000000                      DS8 2
    398          
    399          /*===============================================================
    400          	@brief     中心线及面积均值滤波
    401          	@function  对中心线及面积取n次均值后平滑输出克服图像畸变
    402                             测试图像处理中断最大为12ms，小车速度即使达到3m/s以上
    403          ==================================================================*/
    404          

   \                                 In section .text, align 2, keep-with-next
    405          void Average_Filter()
    406          {
   \                     Average_Filter: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
    407              static int16 last_img_center[3];
    408              static int16 last_img_vertical[3];
    409              static int16 last_img_area[8]; 
    410              static int16 last_img_right[3];
    411              static int16 last_img_left[3];
    412              static int16 last_img_start_line[3];
    413              static int16 last_img_end_line[3];
    414              
    415              int8 i;
    416              int8 count_left = 0;
   \   00000004   0x2000             MOVS     R0,#+0
    417              int8 count_right = 0;
   \   00000006   0x2100             MOVS     R1,#+0
    418              int8 count_start_line = 0;
   \   00000008   0x2200             MOVS     R2,#+0
    419              int8 count_end_line = 0;    
   \   0000000A   0x2300             MOVS     R3,#+0
    420              int16 sum_center = 0;
   \   0000000C   0x2400             MOVS     R4,#+0
    421              int16 sum_vertical = 0;
   \   0000000E   0x2500             MOVS     R5,#+0
    422              int32 sum_area = 0;
   \   00000010   0x2600             MOVS     R6,#+0
    423              int16 sum_right = 0;
   \   00000012   0x2700             MOVS     R7,#+0
    424              int16 sum_left = 0;
   \   00000014   0xF05F 0x0C00      MOVS     R12,#+0
    425              int16 sum_start_line = 0;
   \   00000018   0xF05F 0x0E00      MOVS     LR,#+0
    426              int16 sum_end_line = 0;        
   \   0000001C   0xF05F 0x0800      MOVS     R8,#+0
    427          
    428              last_img_area[0] = last_img_area[1];
   \   00000020   0x.... 0x....      LDR.W    R9,??DataTable10_18
   \   00000024   0xF8B9 0x9002      LDRH     R9,[R9, #+2]
   \   00000028   0x.... 0x....      LDR.W    R10,??DataTable10_18
   \   0000002C   0xF8AA 0x9000      STRH     R9,[R10, #+0]
    429              last_img_area[1] = last_img_area[2];
   \   00000030   0x.... 0x....      LDR.W    R9,??DataTable10_18
   \   00000034   0xF8B9 0x9004      LDRH     R9,[R9, #+4]
   \   00000038   0x.... 0x....      LDR.W    R10,??DataTable10_18
   \   0000003C   0xF8AA 0x9002      STRH     R9,[R10, #+2]
    430              last_img_area[2] = last_img_area[3];
   \   00000040   0x.... 0x....      LDR.W    R9,??DataTable10_18
   \   00000044   0xF8B9 0x9006      LDRH     R9,[R9, #+6]
   \   00000048   0x.... 0x....      LDR.W    R10,??DataTable10_18
   \   0000004C   0xF8AA 0x9004      STRH     R9,[R10, #+4]
    431              last_img_area[3] = last_img_area[4];
   \   00000050   0x.... 0x....      LDR.W    R9,??DataTable10_18
   \   00000054   0xF8B9 0x9008      LDRH     R9,[R9, #+8]
   \   00000058   0x.... 0x....      LDR.W    R10,??DataTable10_18
   \   0000005C   0xF8AA 0x9006      STRH     R9,[R10, #+6]
    432              last_img_area[4] = last_img_area[5];
   \   00000060   0x.... 0x....      LDR.W    R9,??DataTable10_18
   \   00000064   0xF8B9 0x900A      LDRH     R9,[R9, #+10]
   \   00000068   0x.... 0x....      LDR.W    R10,??DataTable10_18
   \   0000006C   0xF8AA 0x9008      STRH     R9,[R10, #+8]
    433              last_img_area[5] = last_img_area[6];
   \   00000070   0x.... 0x....      LDR.W    R9,??DataTable10_18
   \   00000074   0xF8B9 0x900C      LDRH     R9,[R9, #+12]
   \   00000078   0x.... 0x....      LDR.W    R10,??DataTable10_18
   \   0000007C   0xF8AA 0x900A      STRH     R9,[R10, #+10]
    434              last_img_area[6] = last_img_area[7];
   \   00000080   0x.... 0x....      LDR.W    R9,??DataTable10_18
   \   00000084   0xF8B9 0x900E      LDRH     R9,[R9, #+14]
   \   00000088   0x.... 0x....      LDR.W    R10,??DataTable10_18
   \   0000008C   0xF8AA 0x900C      STRH     R9,[R10, #+12]
    435              last_img_area[7] = gi_image_area;
   \   00000090   0x.... 0x....      LDR.W    R9,??DataTable10_9
   \   00000094   0xF8B9 0x9000      LDRH     R9,[R9, #+0]
   \   00000098   0x.... 0x....      LDR.W    R10,??DataTable10_18
   \   0000009C   0xF8AA 0x900E      STRH     R9,[R10, #+14]
    436          
    437              last_img_right[0] = last_img_right[1];
   \   000000A0   0x.... 0x....      LDR.W    R9,??DataTable10_19
   \   000000A4   0xF8B9 0x9002      LDRH     R9,[R9, #+2]
   \   000000A8   0x.... 0x....      LDR.W    R10,??DataTable10_19
   \   000000AC   0xF8AA 0x9000      STRH     R9,[R10, #+0]
    438              last_img_right[1] = last_img_right[2];
   \   000000B0   0x.... 0x....      LDR.W    R9,??DataTable10_19
   \   000000B4   0xF8B9 0x9004      LDRH     R9,[R9, #+4]
   \   000000B8   0x.... 0x....      LDR.W    R10,??DataTable10_19
   \   000000BC   0xF8AA 0x9002      STRH     R9,[R10, #+2]
    439              last_img_right[2] = gi_edge_right_value;
   \   000000C0   0x.... 0x....      LDR.W    R9,??DataTable10_8
   \   000000C4   0xF8B9 0x9000      LDRH     R9,[R9, #+0]
   \   000000C8   0x.... 0x....      LDR.W    R10,??DataTable10_19
   \   000000CC   0xF8AA 0x9004      STRH     R9,[R10, #+4]
    440              
    441              last_img_left[0] = last_img_left[1];
   \   000000D0   0x.... 0x....      LDR.W    R9,??DataTable10_20
   \   000000D4   0xF8B9 0x9002      LDRH     R9,[R9, #+2]
   \   000000D8   0x.... 0x....      LDR.W    R10,??DataTable10_20
   \   000000DC   0xF8AA 0x9000      STRH     R9,[R10, #+0]
    442              last_img_left[1] = last_img_left[2];
   \   000000E0   0x.... 0x....      LDR.W    R9,??DataTable10_20
   \   000000E4   0xF8B9 0x9004      LDRH     R9,[R9, #+4]
   \   000000E8   0x.... 0x....      LDR.W    R10,??DataTable10_20
   \   000000EC   0xF8AA 0x9002      STRH     R9,[R10, #+2]
    443              last_img_left[2] = gi_edge_left_value;
   \   000000F0   0x.... 0x....      LDR.W    R9,??DataTable10_7
   \   000000F4   0xF8B9 0x9000      LDRH     R9,[R9, #+0]
   \   000000F8   0x.... 0x....      LDR.W    R10,??DataTable10_20
   \   000000FC   0xF8AA 0x9004      STRH     R9,[R10, #+4]
    444              
    445              last_img_start_line[0] = last_img_start_line[1];
   \   00000100   0x.... 0x....      LDR.W    R9,??DataTable10_21
   \   00000104   0xF8B9 0x9002      LDRH     R9,[R9, #+2]
   \   00000108   0x.... 0x....      LDR.W    R10,??DataTable10_21
   \   0000010C   0xF8AA 0x9000      STRH     R9,[R10, #+0]
    446              last_img_start_line[1] = last_img_start_line[2];
   \   00000110   0x.... 0x....      LDR.W    R9,??DataTable10_21
   \   00000114   0xF8B9 0x9004      LDRH     R9,[R9, #+4]
   \   00000118   0x.... 0x....      LDR.W    R10,??DataTable10_21
   \   0000011C   0xF8AA 0x9002      STRH     R9,[R10, #+2]
    447              last_img_start_line[2] = gi_start_line;
   \   00000120   0x.... 0x....      LDR.W    R9,??DataTable10_3
   \   00000124   0xF8B9 0x9000      LDRH     R9,[R9, #+0]
   \   00000128   0x.... 0x....      LDR.W    R10,??DataTable10_21
   \   0000012C   0xF8AA 0x9004      STRH     R9,[R10, #+4]
    448              
    449              last_img_end_line[0] = last_img_end_line[1];
   \   00000130   0x.... 0x....      LDR.W    R9,??DataTable10_22
   \   00000134   0xF8B9 0x9002      LDRH     R9,[R9, #+2]
   \   00000138   0x.... 0x....      LDR.W    R10,??DataTable10_22
   \   0000013C   0xF8AA 0x9000      STRH     R9,[R10, #+0]
    450              last_img_end_line[1] = last_img_end_line[2];
   \   00000140   0x.... 0x....      LDR.W    R9,??DataTable10_22
   \   00000144   0xF8B9 0x9004      LDRH     R9,[R9, #+4]
   \   00000148   0x.... 0x....      LDR.W    R10,??DataTable10_22
   \   0000014C   0xF8AA 0x9002      STRH     R9,[R10, #+2]
    451              last_img_end_line[2] = gi_end_line;    
   \   00000150   0x.... 0x....      LDR.W    R9,??DataTable10_4
   \   00000154   0xF8B9 0x9000      LDRH     R9,[R9, #+0]
   \   00000158   0x.... 0x....      LDR.W    R10,??DataTable10_22
   \   0000015C   0xF8AA 0x9004      STRH     R9,[R10, #+4]
    452              
    453              for(i=0; i<3; i++)
   \   00000160   0xF05F 0x0900      MOVS     R9,#+0
   \   00000164   0xE04B             B.N      ??Average_Filter_0
    454              {
    455          //      sum_center += last_img_center[i];
    456                //sum_area += last_img_area[i];
    457                  if(last_img_right[i])
   \                     ??Average_Filter_1: (+1)
   \   00000166   0x.... 0x....      LDR.W    R10,??DataTable10_19
   \   0000016A   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   0000016E   0xF93A 0xA019      LDRSH    R10,[R10, R9, LSL #+1]
   \   00000172   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000176   0xD008             BEQ.N    ??Average_Filter_2
    458                  {
    459                      sum_right += last_img_right[i];
   \   00000178   0x.... 0x....      LDR.W    R10,??DataTable10_19
   \   0000017C   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   00000180   0xF83A 0xA019      LDRH     R10,[R10, R9, LSL #+1]
   \   00000184   0xEB1A 0x0707      ADDS     R7,R10,R7
    460                      count_right++;
   \   00000188   0x1C49             ADDS     R1,R1,#+1
    461                  }
    462                  if(last_img_left[i])
   \                     ??Average_Filter_2: (+1)
   \   0000018A   0x.... 0x....      LDR.W    R10,??DataTable10_20
   \   0000018E   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   00000192   0xF93A 0xA019      LDRSH    R10,[R10, R9, LSL #+1]
   \   00000196   0xF1BA 0x0F00      CMP      R10,#+0
   \   0000019A   0xD008             BEQ.N    ??Average_Filter_3
    463                  {
    464                      sum_left += last_img_left[i];
   \   0000019C   0x.... 0x....      LDR.W    R10,??DataTable10_20
   \   000001A0   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   000001A4   0xF83A 0xA019      LDRH     R10,[R10, R9, LSL #+1]
   \   000001A8   0xEB1A 0x0C0C      ADDS     R12,R10,R12
    465                      count_left++;
   \   000001AC   0x1C40             ADDS     R0,R0,#+1
    466                  }
    467                  if(last_img_start_line[i] != NOT_FOUND)
   \                     ??Average_Filter_3: (+1)
   \   000001AE   0x.... 0x....      LDR.W    R10,??DataTable10_21
   \   000001B2   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   000001B6   0xF93A 0xA019      LDRSH    R10,[R10, R9, LSL #+1]
   \   000001BA   0xF640 0x7BFF      MOVW     R11,#+4095
   \   000001BE   0x45DA             CMP      R10,R11
   \   000001C0   0xD008             BEQ.N    ??Average_Filter_4
    468                  {
    469                      sum_start_line += last_img_start_line[i];
   \   000001C2   0x.... 0x....      LDR.W    R10,??DataTable10_21
   \   000001C6   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   000001CA   0xF83A 0xA019      LDRH     R10,[R10, R9, LSL #+1]
   \   000001CE   0xEB1A 0x0E0E      ADDS     LR,R10,LR
    470                      count_start_line++;
   \   000001D2   0x1C52             ADDS     R2,R2,#+1
    471                  }
    472                  if(last_img_end_line[i] != NOT_FOUND)
   \                     ??Average_Filter_4: (+1)
   \   000001D4   0x.... 0x....      LDR.W    R10,??DataTable10_22
   \   000001D8   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   000001DC   0xF93A 0xA019      LDRSH    R10,[R10, R9, LSL #+1]
   \   000001E0   0xF640 0x7BFF      MOVW     R11,#+4095
   \   000001E4   0x45DA             CMP      R10,R11
   \   000001E6   0xD008             BEQ.N    ??Average_Filter_5
    473                  {
    474                      sum_end_line += last_img_end_line[i];
   \   000001E8   0x.... 0x....      LDR.W    R10,??DataTable10_22
   \   000001EC   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   000001F0   0xF83A 0xA019      LDRH     R10,[R10, R9, LSL #+1]
   \   000001F4   0xEB1A 0x0808      ADDS     R8,R10,R8
    475                      count_end_line++;
   \   000001F8   0x1C5B             ADDS     R3,R3,#+1
    476                  }
    477              }
   \                     ??Average_Filter_5: (+1)
   \   000001FA   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??Average_Filter_0: (+1)
   \   000001FE   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   00000202   0xF1B9 0x0F03      CMP      R9,#+3
   \   00000206   0xDBAE             BLT.N    ??Average_Filter_1
    478              
    479              for(i=0; i<8; i++)
   \   00000208   0xF05F 0x0900      MOVS     R9,#+0
   \   0000020C   0xE009             B.N      ??Average_Filter_6
    480              {
    481                  sum_area += last_img_area[i];
   \                     ??Average_Filter_7: (+1)
   \   0000020E   0x.... 0x....      LDR.W    R10,??DataTable10_18
   \   00000212   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   00000216   0xF93A 0xA019      LDRSH    R10,[R10, R9, LSL #+1]
   \   0000021A   0xEB16 0x060A      ADDS     R6,R6,R10
    482              }
   \   0000021E   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??Average_Filter_6: (+1)
   \   00000222   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   00000226   0xF1B9 0x0F08      CMP      R9,#+8
   \   0000022A   0xDBF0             BLT.N    ??Average_Filter_7
    483              
    484              gi_image_area_ave = (int16)(sum_area / 8);
   \   0000022C   0xF05F 0x0908      MOVS     R9,#+8
   \   00000230   0xFB96 0xF6F9      SDIV     R6,R6,R9
   \   00000234   0x.... 0x....      LDR.W    R9,??DataTable10_23
   \   00000238   0xF8A9 0x6000      STRH     R6,[R9, #+0]
    485              
    486              if(!count_right)
   \   0000023C   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000023E   0x2900             CMP      R1,#+0
   \   00000240   0xD104             BNE.N    ??Average_Filter_8
    487              {
    488                  gi_image_right_ave = 0;
   \   00000242   0x2100             MOVS     R1,#+0
   \   00000244   0x.... 0x....      LDR.W    R6,??DataTable10_24
   \   00000248   0x8031             STRH     R1,[R6, #+0]
   \   0000024A   0xE006             B.N      ??Average_Filter_9
    489              }
    490              else
    491                 gi_image_right_ave = (int16)((sum_right / count_right));
   \                     ??Average_Filter_8: (+1)
   \   0000024C   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   0000024E   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000250   0xFB97 0xF1F1      SDIV     R1,R7,R1
   \   00000254   0x.... 0x....      LDR.W    R6,??DataTable10_24
   \   00000258   0x8031             STRH     R1,[R6, #+0]
    492              
    493              
    494              if(!count_left)
   \                     ??Average_Filter_9: (+1)
   \   0000025A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000025C   0x2800             CMP      R0,#+0
   \   0000025E   0xD104             BNE.N    ??Average_Filter_10
    495              {
    496                gi_image_left_ave = 0;
   \   00000260   0x2000             MOVS     R0,#+0
   \   00000262   0x.... 0x....      LDR.W    R1,??DataTable10_25
   \   00000266   0x8008             STRH     R0,[R1, #+0]
   \   00000268   0xE007             B.N      ??Average_Filter_11
    497              }
    498              else
    499                 gi_image_left_ave = (int16)((sum_left / count_left)); 
   \                     ??Average_Filter_10: (+1)
   \   0000026A   0xFA0F 0xFC8C      SXTH     R12,R12          ;; SignExt  R12,R12,#+16,#+16
   \   0000026E   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000270   0xFB9C 0xF0F0      SDIV     R0,R12,R0
   \   00000274   0x.... 0x....      LDR.W    R1,??DataTable10_25
   \   00000278   0x8008             STRH     R0,[R1, #+0]
    500              
    501              if(!count_start_line)
   \                     ??Average_Filter_11: (+1)
   \   0000027A   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   0000027C   0x2A00             CMP      R2,#+0
   \   0000027E   0xD104             BNE.N    ??Average_Filter_12
    502              {
    503                  gi_image_start_ave = 0;
   \   00000280   0x2000             MOVS     R0,#+0
   \   00000282   0x.... 0x....      LDR.W    R1,??DataTable10_26
   \   00000286   0x8008             STRH     R0,[R1, #+0]
   \   00000288   0xE006             B.N      ??Average_Filter_13
    504              }
    505              else
    506                 gi_image_start_ave = (int16)((sum_start_line / count_start_line));
   \                     ??Average_Filter_12: (+1)
   \   0000028A   0xFA0F 0xFE8E      SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \   0000028E   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   00000290   0xFB9E 0xF0F2      SDIV     R0,LR,R2
   \   00000294   0x....             LDR.N    R1,??DataTable10_26
   \   00000296   0x8008             STRH     R0,[R1, #+0]
    507              
    508              if(!count_end_line)
   \                     ??Average_Filter_13: (+1)
   \   00000298   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \   0000029A   0x2B00             CMP      R3,#+0
   \   0000029C   0xD103             BNE.N    ??Average_Filter_14
    509              {
    510                gi_image_end_ave = 0;
   \   0000029E   0x2000             MOVS     R0,#+0
   \   000002A0   0x....             LDR.N    R1,??DataTable10_27
   \   000002A2   0x8008             STRH     R0,[R1, #+0]
   \   000002A4   0xE006             B.N      ??Average_Filter_15
    511              }
    512              else
    513                 gi_image_end_ave = (int16)((sum_end_line / count_end_line)); 
   \                     ??Average_Filter_14: (+1)
   \   000002A6   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   000002AA   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \   000002AC   0xFB98 0xF0F3      SDIV     R0,R8,R3
   \   000002B0   0x....             LDR.N    R1,??DataTable10_27
   \   000002B2   0x8008             STRH     R0,[R1, #+0]
    514              
    515              last_img_vertical[0] = last_img_vertical[1];
   \                     ??Average_Filter_15: (+1)
   \   000002B4   0x....             LDR.N    R0,??DataTable10_28
   \   000002B6   0x8840             LDRH     R0,[R0, #+2]
   \   000002B8   0x....             LDR.N    R1,??DataTable10_28
   \   000002BA   0x8008             STRH     R0,[R1, #+0]
    516              last_img_vertical[1] = last_img_vertical[2];
   \   000002BC   0x....             LDR.N    R0,??DataTable10_28
   \   000002BE   0x8880             LDRH     R0,[R0, #+4]
   \   000002C0   0x....             LDR.N    R1,??DataTable10_28
   \   000002C2   0x8048             STRH     R0,[R1, #+2]
    517              last_img_vertical[2] = gi_image_vertical;
   \   000002C4   0x....             LDR.N    R0,??DataTable10_11
   \   000002C6   0x8800             LDRH     R0,[R0, #+0]
   \   000002C8   0x....             LDR.N    R1,??DataTable10_28
   \   000002CA   0x8088             STRH     R0,[R1, #+4]
    518              
    519              for(i=0; i<3; i++)
   \   000002CC   0xF05F 0x0900      MOVS     R9,#+0
   \   000002D0   0xE007             B.N      ??Average_Filter_16
    520              {
    521                sum_vertical += last_img_vertical[i]; 
   \                     ??Average_Filter_17: (+1)
   \   000002D2   0x....             LDR.N    R0,??DataTable10_28
   \   000002D4   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   000002D8   0xF830 0x0019      LDRH     R0,[R0, R9, LSL #+1]
   \   000002DC   0x1945             ADDS     R5,R0,R5
    522              }
   \   000002DE   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??Average_Filter_16: (+1)
   \   000002E2   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   000002E6   0xF1B9 0x0F03      CMP      R9,#+3
   \   000002EA   0xDBF2             BLT.N    ??Average_Filter_17
    523              gi_image_vertical_ave = (int16)((sum_vertical / 3));
   \   000002EC   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   000002EE   0x2003             MOVS     R0,#+3
   \   000002F0   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   000002F4   0x....             LDR.N    R1,??DataTable10_29
   \   000002F6   0x8008             STRH     R0,[R1, #+0]
    524              
    525              last_img_center[0] = last_img_center[1];
   \   000002F8   0x....             LDR.N    R0,??DataTable10_30
   \   000002FA   0x8840             LDRH     R0,[R0, #+2]
   \   000002FC   0x....             LDR.N    R1,??DataTable10_30
   \   000002FE   0x8008             STRH     R0,[R1, #+0]
    526              last_img_center[1] = last_img_center[2];
   \   00000300   0x....             LDR.N    R0,??DataTable10_30
   \   00000302   0x8880             LDRH     R0,[R0, #+4]
   \   00000304   0x....             LDR.N    R1,??DataTable10_30
   \   00000306   0x8048             STRH     R0,[R1, #+2]
    527              last_img_center[2] = gi_image_center;
   \   00000308   0x....             LDR.N    R0,??DataTable10_10
   \   0000030A   0x8800             LDRH     R0,[R0, #+0]
   \   0000030C   0x....             LDR.N    R1,??DataTable10_30
   \   0000030E   0x8088             STRH     R0,[R1, #+4]
    528              
    529              for(i=0; i<3; i++)
   \   00000310   0xF05F 0x0900      MOVS     R9,#+0
   \   00000314   0xE007             B.N      ??Average_Filter_18
    530              {
    531                sum_center += last_img_center[i]; 
   \                     ??Average_Filter_19: (+1)
   \   00000316   0x....             LDR.N    R0,??DataTable10_30
   \   00000318   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   0000031C   0xF830 0x0019      LDRH     R0,[R0, R9, LSL #+1]
   \   00000320   0x1904             ADDS     R4,R0,R4
    532              }
   \   00000322   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??Average_Filter_18: (+1)
   \   00000326   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   0000032A   0xF1B9 0x0F03      CMP      R9,#+3
   \   0000032E   0xDBF2             BLT.N    ??Average_Filter_19
    533              gi_image_center_ave = (int16)((sum_center / 3) + 10);//弥补中值去噪的误差
   \   00000330   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000332   0x2003             MOVS     R0,#+3
   \   00000334   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   00000338   0x300A             ADDS     R0,R0,#+10
   \   0000033A   0x....             LDR.N    R1,??DataTable10_31
   \   0000033C   0x8008             STRH     R0,[R1, #+0]
    534          }
   \   0000033E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .bss, align 4
   \                     `Average_Filter::last_img_center`:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     `Average_Filter::last_img_vertical`:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     `Average_Filter::last_img_area`:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
   \                     `Average_Filter::last_img_right`:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     `Average_Filter::last_img_left`:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     `Average_Filter::last_img_start_line`:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     `Average_Filter::last_img_end_line`:
   \   00000000                      DS8 8
    535          
    536          /*===============================================================
    537          	@brief     切灯系数标定
    538          	@function  根据与信标灯的距离不断更定切灯位置距图像中心的比例
    539          	@note      使用matlab拟合，使轨迹尽量为一条直线，前期使用图像面积
    540                             后期使用超声波测得的距离
    541          ==================================================================*/
    542          

   \                                 In section .text, align 2, keep-with-next
    543          void Track_Liner()
    544          {
    545              if(gi_image_vertical_ave < 10)
   \                     Track_Liner: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_29
   \   00000002   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000006   0x280A             CMP      R0,#+10
   \   00000008   0xDA03             BGE.N    ??Track_Liner_0
    546              {
    547                  gf_beacon_offset_P = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x....             LDR.N    R1,??DataTable10_32
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0xE014             B.N      ??Track_Liner_1
    548              }
    549              else if((gi_image_vertical_ave >= 10)&&(gi_image_vertical_ave < 14))
   \                     ??Track_Liner_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable10_29
   \   00000014   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000018   0x380A             SUBS     R0,R0,#+10
   \   0000001A   0x2804             CMP      R0,#+4
   \   0000001C   0xD204             BCS.N    ??Track_Liner_2
    550              {
    551                  gf_beacon_offset_P = 0.5;
   \   0000001E   0xF05F 0x507C      MOVS     R0,#+1056964608
   \   00000022   0x....             LDR.N    R1,??DataTable10_32
   \   00000024   0x6008             STR      R0,[R1, #+0]
   \   00000026   0xE009             B.N      ??Track_Liner_1
    552              }
    553              else if((gi_image_vertical_ave >= 14)&&(gi_image_vertical_ave < 64))
   \                     ??Track_Liner_2: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable10_29
   \   0000002A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000002E   0x380E             SUBS     R0,R0,#+14
   \   00000030   0x2832             CMP      R0,#+50
   \   00000032   0xD203             BCS.N    ??Track_Liner_1
    554              {
    555                  gf_beacon_offset_P = 1;
   \   00000034   0xF05F 0x507E      MOVS     R0,#+1065353216
   \   00000038   0x....             LDR.N    R1,??DataTable10_32
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    556              }
    557          }
   \                     ??Track_Liner_1: (+1)
   \   0000003C   0x4770             BX       LR               ;; return
    558          
    559          /*===============================================================
    560          	@brief     无视野寻灯次数判断
    561          	@function  连续采集多少次无图像判断为失去视野
    562          	@note      使用y轴坐标判断，低于一定值直接降为1，减少因判断延时带来的滑动
    563                             前期使用图像面积检测
    564          ==================================================================*/
    565          

   \                                 In section .text, align 2, keep-with-next
    566          void Horizon_Count()
    567          {
    568              if(gi_image_area_ave < 1)
   \                     Horizon_Count: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_23
   \   00000002   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xDA03             BGE.N    ??Horizon_Count_0
    569              {
    570                  gc_not_found_count = 4;
   \   0000000A   0x2004             MOVS     R0,#+4
   \   0000000C   0x....             LDR.N    R1,??DataTable10_13
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
   \   00000010   0xE012             B.N      ??Horizon_Count_1
    571              }
    572              else if(gi_image_area_ave >= 1)
   \                     ??Horizon_Count_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable10_23
   \   00000014   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xDB03             BLT.N    ??Horizon_Count_2
    573              {
    574                  gc_not_found_count = 3;
   \   0000001C   0x2003             MOVS     R0,#+3
   \   0000001E   0x....             LDR.N    R1,??DataTable10_13
   \   00000020   0x7008             STRB     R0,[R1, #+0]
   \   00000022   0xE009             B.N      ??Horizon_Count_1
    575              }
    576              else if(gi_image_vertical_ave == NOT_FOUND)
   \                     ??Horizon_Count_2: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable10_29
   \   00000026   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000002A   0xF640 0x71FF      MOVW     R1,#+4095
   \   0000002E   0x4288             CMP      R0,R1
   \   00000030   0xD102             BNE.N    ??Horizon_Count_1
    577              {
    578                  gc_not_found_count = 4;
   \   00000032   0x2004             MOVS     R0,#+4
   \   00000034   0x....             LDR.N    R1,??DataTable10_13
   \   00000036   0x7008             STRB     R0,[R1, #+0]
    579              }
    580              
    581          //    if(gc_not_found_count == 1)
    582          //      Beep_On();
    583          //    else
    584          //      Beep_Off();
    585          //    else if((gi_image_vertical_ave >= 55)&&(gi_image_vertical_ave < 64))
    586          //    {
    587          //        gc_not_found_count = 1;
    588          //    }
    589          
    590          ////    if(!gi_image_area_ave)
    591          ////    {
    592          ////        gc_not_found_count = 7;
    593          ////    }
    594          //    if(gi_image_area_ave > 600)
    595          //    {
    596          //        gc_not_found_count = 4;
    597          //    }
    598          //    else if(gi_image_area_ave >= 150)
    599          //    {
    600          //        gc_not_found_count = 4;
    601          //    }
    602          //    else if(gi_image_area_ave < 150)
    603          //    {
    604          //        gc_not_found_count = 5;
    605          //    }
    606          
    607          }
   \                     ??Horizon_Count_1: (+1)
   \   00000038   0x4770             BX       LR               ;; return
    608          
    609          /*===============================================================
    610          	@brief     目标线定位
    611          	@function  信标灯旁侧切灯中心线定位，右灯左切，左灯右切
    612          ==================================================================*/
    613          

   \                                 In section .text, align 2, keep-with-next
    614          void Image_Center()
    615          {
   \                     Image_Center: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    616              int16 image_center_temp;
    617              int16 image_semi_width;
    618          //    static int16 si_image_width_temp = 0;
    619              
    620              gf_beacon_offset_P = 1;
   \   00000002   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   00000006   0x....             LDR.N    R2,??DataTable10_32
   \   00000008   0x6011             STR      R1,[R2, #+0]
    621              
    622              image_semi_width = (gi_image_right_ave - gi_image_left_ave)/2;
   \   0000000A   0x....             LDR.N    R1,??DataTable10_24
   \   0000000C   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000010   0x....             LDR.N    R2,??DataTable10_25
   \   00000012   0xF9B2 0x2000      LDRSH    R2,[R2, #+0]
   \   00000016   0x1A89             SUBS     R1,R1,R2
   \   00000018   0x2202             MOVS     R2,#+2
   \   0000001A   0xFB91 0xF4F2      SDIV     R4,R1,R2
    623              
    624          //    if(!image_semi_width)
    625          //    {
    626          //        image_semi_width = si_image_width_temp;
    627          //    }
    628          
    629          
    630              if(gi_image_center_ave >= IMAGE_WIDTH/2)
   \   0000001E   0x....             LDR.N    R1,??DataTable10_31
   \   00000020   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000024   0x2940             CMP      R1,#+64
   \   00000026   0xDB22             BLT.N    ??Image_Center_0
    631              {
    632                  image_center_temp = (int16)(gi_image_center_ave + gc_right_offset - (float)(image_semi_width * gf_center_err_P * gf_beacon_offset_P /10));
   \   00000028   0x....             LDR.N    R0,??DataTable10_31
   \   0000002A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000002E   0x....             LDR.N    R1,??DataTable10_33
   \   00000030   0xF991 0x1000      LDRSB    R1,[R1, #+0]
   \   00000034   0x1808             ADDS     R0,R1,R0
   \   00000036   0x.... 0x....      BL       __aeabi_i2f
   \   0000003A   0x0005             MOVS     R5,R0
   \   0000003C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       __aeabi_i2f
   \   00000044   0x....             LDR.N    R1,??DataTable10_34
   \   00000046   0x6809             LDR      R1,[R1, #+0]
   \   00000048   0x.... 0x....      BL       __aeabi_fmul
   \   0000004C   0x....             LDR.N    R1,??DataTable10_32
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0x.... 0x....      BL       __aeabi_fmul
   \   00000054   0x....             LDR.N    R1,??DataTable10_35  ;; 0x41200000
   \   00000056   0x.... 0x....      BL       __aeabi_fdiv
   \   0000005A   0x0001             MOVS     R1,R0
   \   0000005C   0x0028             MOVS     R0,R5
   \   0000005E   0x.... 0x....      BL       __aeabi_fsub
   \   00000062   0x.... 0x....      BL       __aeabi_f2iz
    633                  guc_center_flag = RIGHT;
   \   00000066   0x2102             MOVS     R1,#+2
   \   00000068   0x....             LDR.N    R2,??DataTable10_36
   \   0000006A   0x7011             STRB     R1,[R2, #+0]
   \   0000006C   0xE02A             B.N      ??Image_Center_1
    634              }
    635              else if((gi_image_center_ave < IMAGE_WIDTH/2) && (gi_image_center > 0))
   \                     ??Image_Center_0: (+1)
   \   0000006E   0x....             LDR.N    R1,??DataTable10_31
   \   00000070   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000074   0x2940             CMP      R1,#+64
   \   00000076   0xDA25             BGE.N    ??Image_Center_1
   \   00000078   0x....             LDR.N    R1,??DataTable10_10
   \   0000007A   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000007E   0x2901             CMP      R1,#+1
   \   00000080   0xDB20             BLT.N    ??Image_Center_1
    636              {
    637                  image_center_temp = (int16)(gi_image_center_ave + gc_left_offset + (float)(image_semi_width * gf_center_err_P * gf_beacon_offset_P /10));
   \   00000082   0x....             LDR.N    R0,??DataTable10_31
   \   00000084   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000088   0x....             LDR.N    R1,??DataTable10_37
   \   0000008A   0xF991 0x1000      LDRSB    R1,[R1, #+0]
   \   0000008E   0x1808             ADDS     R0,R1,R0
   \   00000090   0x.... 0x....      BL       __aeabi_i2f
   \   00000094   0x0005             MOVS     R5,R0
   \   00000096   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000098   0x0020             MOVS     R0,R4
   \   0000009A   0x.... 0x....      BL       __aeabi_i2f
   \   0000009E   0x....             LDR.N    R1,??DataTable10_34
   \   000000A0   0x6809             LDR      R1,[R1, #+0]
   \   000000A2   0x.... 0x....      BL       __aeabi_fmul
   \   000000A6   0x....             LDR.N    R1,??DataTable10_32
   \   000000A8   0x6809             LDR      R1,[R1, #+0]
   \   000000AA   0x.... 0x....      BL       __aeabi_fmul
   \   000000AE   0x....             LDR.N    R1,??DataTable10_35  ;; 0x41200000
   \   000000B0   0x.... 0x....      BL       __aeabi_fdiv
   \   000000B4   0x0029             MOVS     R1,R5
   \   000000B6   0x.... 0x....      BL       __aeabi_fadd
   \   000000BA   0x.... 0x....      BL       __aeabi_f2iz
    638                  guc_center_flag = LEFT;
   \   000000BE   0x2101             MOVS     R1,#+1
   \   000000C0   0x....             LDR.N    R2,??DataTable10_36
   \   000000C2   0x7011             STRB     R1,[R2, #+0]
    639              }
    640              gi_image_err = image_center_temp - 64;
   \                     ??Image_Center_1: (+1)
   \   000000C4   0x3840             SUBS     R0,R0,#+64
   \   000000C6   0x....             LDR.N    R1,??DataTable10_38
   \   000000C8   0x8008             STRH     R0,[R1, #+0]
    641              
    642              if(gi_image_center_ave==10)
   \   000000CA   0x....             LDR.N    R0,??DataTable10_31
   \   000000CC   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000D0   0x280A             CMP      R0,#+10
   \   000000D2   0xD102             BNE.N    ??Image_Center_2
    643              {
    644                  gi_image_err = 0;
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0x....             LDR.N    R1,??DataTable10_38
   \   000000D8   0x8008             STRH     R0,[R1, #+0]
    645              }
    646          //    si_image_width_temp = image_semi_width;
    647          }
   \                     ??Image_Center_2: (+1)
   \   000000DA   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    648          
    649          //#endif
    650          //
    651          //#ifndef  BEACON_STANDBY
    652          //
    653          ///*===============================================================
    654          //	@brief     图像处理
    655          //	@function  所有图像处理函数调用函数
    656          //	@note      可外部调用
    657          //==================================================================*/
    658          //
    659          //void Image_Process()
    660          //{
    661          //    Image_Filter();//二值图像去噪
    662          //    
    663          //    guc_cur_image = guc_corrected_image;//保存去噪后的图像数组
    664          //    
    665          //    Image_Get_Edge(guc_cur_image, gi_edge_left, gi_edge_right);//信标边线提取
    666          //    
    667          //    Image_Get_Vertical(gi_edge_left);//纵向边线提取
    668          //
    669          //    Image_Pre_Process(gi_edge_left,gi_edge_right);//预处理矩形矫正
    670          //    
    671          //    Image_Area();//面积计算及连续采集
    672          //    
    673          //    Average_Filter();//均值滤波
    674          //    
    675          ////    Track_Liner();//切灯系数调整
    676          //    
    677          //    Horizon_Count();//无视野判断延时调整
    678          //    
    679          //    Image_Center();//旁侧切灯中心线定位
    680          //    
    681          //    Route_Planning();//路径规划
    682          //    
    683          ////    Direction_Control();
    684          //
    685          //}
    686          //
    687          ///*===============================================================
    688          //	@brief     图像去噪
    689          //	@function  二值图像处理椒盐噪声
    690          //	@note      相对于对原始灰度图进行中值滤波，采用这种滤波方法
    691          //                   简洁有效，处理速度快
    692          //==================================================================*/
    693          //
    694          //void Image_Filter()
    695          //{
    696          //    int16 i,j;
    697          //    //连续采集三个点,三个点均为白点则认为采集到三个白点
    698          //    for(i=0; i<IMAGE_HEIGHT; i++)
    699          //    {
    700          //        for(j=1; j< IMAGE_WIDTH-1; j++)
    701          //        {
    702          ////            if(j < IMAGE_WIDTH-1)
    703          ////            {
    704          ////                if(guc_corrected_image[i][j]==1&&guc_corrected_image[i][j+1]==1&&guc_corrected_image[i][j+2]==1)
    705          ////                {
    706          ////                    guc_corrected_image[i][j]=1;
    707          ////                    guc_corrected_image[i][j+1]=1;
    708          ////                    guc_corrected_image[i][j+2]=1;
    709          //////                    guc_corrected_image[i][j+3]=1;
    710          //////                    guc_corrected_image[i][j+4]=1;
    711          ////                    j+=2;
    712          ////                }
    713          ////                else 
    714          ////                    guc_corrected_image[i][j]=0;
    715          ////            
    716          ////            }
    717          ////            if(j == IMAGE_WIDTH-1)
    718          ////            {
    719          ////                if(guc_corrected_image[i][j-2]==1&&guc_corrected_image[i][j-1]==1&&guc_corrected_image[i][j]==1)
    720          ////                {
    721          ////                    guc_corrected_image[i][j]=1;
    722          ////                }
    723          ////                else 
    724          ////                    guc_corrected_image[i][j]=0;
    725          ////            
    726          ////            }      
    727          //          
    728          //              if(guc_corrected_image[i][j]==1)
    729          //              {   
    730          //                  if((guc_corrected_image[i][j-1] == 1) || (guc_corrected_image[i][j+1] == 1))
    731          //                  {
    732          //                      guc_corrected_image[i][j]=1;
    733          //                  }
    734          //                  else 
    735          //                  guc_corrected_image[i][j]=0;
    736          //              }
    737          //        }
    738          //    }
    739          //}
    740          //
    741          ///*===============================================================
    742          //	@brief      边线提取
    743          //	@function   去噪后二值化图像边线提取   
    744          //	@parameter1 图像接收数组
    745          //	@parameter2 左边线存储数组
    746          //	@parameter3 右边线存储数组
    747          //	@note       个人感觉还能继续优化，提高处理速度
    748          //==================================================================*/
    749          //
    750          //void Image_Get_Edge(vuint8 cameraimage[IMAGE_HEIGHT][IMAGE_WIDTH], int16 *left_edge, int16 *right_edge)
    751          //{
    752          //    int linecount;
    753          //    int pointcount;
    754          //    uint8 last_point=0;
    755          //    int left_start_point;//寻找左边界扫描起始行
    756          //    int right_start_point;//寻找右边界扫描起始行
    757          //    int left_end_point;//寻找左边界扫描结束行
    758          //    int right_end_point;//寻找右边界扫描结束行
    759          //    
    760          //    vuint8 *image_line;
    761          //
    762          //    image_line = cameraimage[0];
    763          //    guc_cur_image = cameraimage;
    764          //
    765          //    for(linecount = 0;linecount < IMAGE_HEIGHT; linecount++)
    766          //    {
    767          //        image_line = cameraimage[linecount];
    768          //        if(linecount < 1)
    769          //        {
    770          //            left_start_point = 0;
    771          //            right_start_point = IMAGE_WIDTH-1;
    772          //            left_end_point = IMAGE_WIDTH-1;
    773          //            right_end_point = 0;
    774          //        }
    775          //        else if((left_edge[linecount-1] == NOT_FOUND)||(right_edge[linecount-1] == NOT_FOUND))
    776          //        {
    777          //            left_start_point = 0;
    778          //            right_start_point = IMAGE_WIDTH-1;
    779          //            left_end_point = IMAGE_WIDTH-1;
    780          //            right_end_point = 0;
    781          //        }
    782          //        else if(linecount < IMAGE_HEIGHT)
    783          //        {
    784          //            left_start_point = (int)Limiter(left_edge[linecount-1]-10,0,IMAGE_WIDTH-1);
    785          //            right_start_point = (int)Limiter(right_edge[linecount-1]+10,0,IMAGE_WIDTH-1);
    786          //            left_end_point = IMAGE_WIDTH-1;
    787          //            right_end_point = 0;
    788          //        }
    789          //        //从左向右搜寻左边界
    790          //        for(pointcount = left_start_point, last_point = 0;pointcount < left_end_point; pointcount++)
    791          //        {
    792          //            if((last_point==1)&&(image_line[pointcount]==1))
    793          //            {
    794          //                left_edge[linecount] = pointcount;
    795          //                {
    796          //                  break;
    797          //                }    
    798          //            }
    799          //            last_point = image_line[pointcount];
    800          //        }
    801          //        if(pointcount==left_end_point)
    802          //        {
    803          //            if(last_point == 0)
    804          //            {
    805          //                 left_edge[linecount] = NOT_FOUND;
    806          //            }
    807          //            else if(last_point == 1)
    808          //            {
    809          //                 left_edge[linecount] = left_end_point;
    810          //            }
    811          //        }
    812          //        //从右向左搜右边界 
    813          //        for(pointcount = right_start_point,last_point = 0;pointcount > right_end_point;pointcount--)
    814          //        {
    815          //            if((last_point==1)&&(image_line[pointcount]==1))
    816          //            {
    817          //                right_edge[linecount] = pointcount;
    818          //                {
    819          //                  break;
    820          //                }
    821          //            }
    822          //            last_point = image_line[pointcount];
    823          //        }
    824          //        if(pointcount==right_end_point)
    825          //        {
    826          //            if(last_point == 0)
    827          //            {
    828          //               right_edge[linecount] = NOT_FOUND;
    829          //            }
    830          //            else if(last_point == 1)
    831          //            {
    832          //                right_edge[linecount] = right_end_point;
    833          //            }
    834          //        }
    835          //    } 
    836          //}
    837          //
    838          ///*===============================================================
    839          //	@brief     纵向边线提取
    840          //	@function  将传回来的不规则图像进行矫正使之为矩形
    841          //	@note      由于摄像头以一定角度俯视并为广角镜头，因此信标形状不规则
    842          //                   通过加权平均可以矫正为矩形便于后续处理
    843          //==================================================================*/
    844          //
    845          //void Image_Get_Vertical(int16 *left_edge)
    846          //{
    847          //    int i;
    848          //    
    849          //    for(i=0; i<IMAGE_HEIGHT; i++)
    850          //    {
    851          //        if(i == 0)
    852          //        {
    853          //            if((left_edge[i] != NOT_FOUND) && (left_edge[i+1] != NOT_FOUND) && (left_edge[i+2] != NOT_FOUND))
    854          //            {
    855          //                gi_start_line = i;
    856          //                break;
    857          //            }
    858          //        }
    859          //        else if(i == 1)
    860          //        {
    861          //            if((left_edge[i-1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND) && (left_edge[i+1] != NOT_FOUND) && (left_edge[i+2] != NOT_FOUND))
    862          //            {
    863          //                gi_start_line = i;
    864          //                break;
    865          //            }
    866          //        }
    867          //        else if((i >= 2) && (i <= IMAGE_HEIGHT-3))
    868          //        {
    869          //            if((left_edge[i-2] == NOT_FOUND) && (left_edge[i-1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND) && (left_edge[i+1] != NOT_FOUND) && (left_edge[i+2] != NOT_FOUND))
    870          //            {
    871          //                gi_start_line = i;
    872          //                break;
    873          //            }
    874          //        }
    875          //        else if(i == IMAGE_HEIGHT-2)
    876          //        {
    877          //            if((left_edge[i-2] == NOT_FOUND) && (left_edge[i-1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND) && (left_edge[i+1] != NOT_FOUND))
    878          //            {
    879          //                gi_start_line = i;
    880          //                break;
    881          //            }
    882          //        }
    883          //        else if(i == IMAGE_HEIGHT-1)
    884          //        {
    885          //            if((left_edge[i-2] == NOT_FOUND) && (left_edge[i-1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND))
    886          //            {
    887          //                gi_start_line = i;
    888          //                break;
    889          //            }
    890          //            else
    891          //              gi_start_line = NOT_FOUND;
    892          //        }
    893          //    }
    894          //    
    895          //    for(i=IMAGE_HEIGHT-1; i>=0; i--)
    896          //    {
    897          //        if(i == IMAGE_HEIGHT-1)
    898          //        {
    899          //            if((left_edge[i] != NOT_FOUND) && (left_edge[i-1] != NOT_FOUND) && (left_edge[i-2] != NOT_FOUND))
    900          //            {
    901          //                gi_end_line = i;
    902          //                break;
    903          //            }
    904          //        }
    905          //        else if(i == IMAGE_HEIGHT-2)
    906          //        {
    907          //            if((left_edge[i+1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND) && (left_edge[i-1] != NOT_FOUND) && (left_edge[i-2] != NOT_FOUND))
    908          //            {
    909          //                gi_end_line = i;
    910          //                break;
    911          //            }
    912          //        }
    913          //        else if((i >= 2) && (i <= IMAGE_HEIGHT-3))
    914          //        {
    915          //            if((left_edge[i+2] == NOT_FOUND) && (left_edge[i+1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND) && (left_edge[i-1] != NOT_FOUND) && (left_edge[i-2] != NOT_FOUND))
    916          //            {
    917          //                gi_end_line = i;
    918          //                break;
    919          //            }
    920          //        }
    921          //        else if(i == 1)
    922          //        {
    923          //            if((left_edge[i+2] == NOT_FOUND) && (left_edge[i+1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND) && (left_edge[i-1] != NOT_FOUND))
    924          //            {
    925          //                gi_end_line = i;
    926          //                break;
    927          //            }
    928          //        }
    929          //        else if(i == 0)
    930          //        {
    931          //            if((left_edge[i+2] == NOT_FOUND) && (left_edge[i+1] == NOT_FOUND) && (left_edge[i] != NOT_FOUND))
    932          //            {
    933          //                gi_end_line = i;
    934          //                break;
    935          //            }
    936          //            else
    937          //              gi_end_line = NOT_FOUND;
    938          //        }
    939          //    }
    940          //}
    941          //
    942          ///*===============================================================
    943          //	@brief     矩形矫正
    944          //	@function  将传回来的不规则图像进行矫正使之为矩形
    945          //	@note      由于摄像头以一定角度俯视并为广角镜头，因此信标形状不规则
    946          //                   通过加权平均可以矫正为矩形便于后续处理
    947          //==================================================================*/
    948          //
    949          //void Image_Pre_Process(int16 *left_edge, int16 *right_edge)
    950          //{
    951          //    uint32 leftweight=0,rightweight=0;//左右边界权重和
    952          //    int i;
    953          //    gi_left_count = 1;
    954          //    gi_right_count = 1;
    955          //    
    956          //    for(i=0; i<IMAGE_HEIGHT; i++)
    957          //    {
    958          //        if(left_edge[i] != NOT_FOUND)
    959          //        {
    960          //            leftweight += left_edge[i];
    961          //            //leftweight += left_edge[i] * err_weight[IMAGE_HEIGHT-1-i];
    962          //            gi_left_count++;
    963          //        }
    964          //        if(right_edge[i] != NOT_FOUND)
    965          //        {
    966          //            rightweight += right_edge[i];
    967          //            //rightweight += right_edge[i] * err_weight[IMAGE_HEIGHT-1-i];
    968          //            gi_right_count++;
    969          //        }
    970          //    }
    971          //    
    972          //    gi_edge_left_value = (int16)(leftweight / gi_left_count);
    973          //    gi_edge_right_value = (int16)(rightweight / gi_right_count);
    974          //}
    975          //
    976          ///*===============================================================
    977          //	@brief     面积计算及连续采集
    978          //	@function  对识别的信标图像面积进行计算，方便估算距离，连续采集防闪烁
    979          //	@note      两种思路，一种是对检测的边界进行计算，另一种是数像素点
    980          //                   前者速度相对较快，但可能不如后者精确
    981          //                   如果连续采集三次仍未得到图像则认为失去视野
    982          //==================================================================*/
    983          //
    984          //void Image_Area()
    985          //{
    986          //    int16 leftcount,rightcount;
    987          //    int16 leftedge,rightedge;
    988          //    static uint8 suc_image_count = 0;
    989          //    static int16 si_image_area_temp = 0;//储存检测到信标灯时的面积
    990          //    static int16 si_image_center_temp = 0;//储存检测到信标灯时的中心线
    991          //    static int16 si_image_vertical_temp = 0;//储存检测到信标灯时的纵坐标
    992          //    
    993          //    leftcount = gi_left_count;
    994          //    rightcount = gi_right_count;
    995          //    leftedge = gi_edge_left_value;
    996          //    rightedge = gi_edge_right_value;
    997          //    
    998          //    gi_image_area = (int16)((leftcount + rightcount)* (rightedge - leftedge)/2);
    999          //    gi_image_center = (int16)((rightedge + leftedge)/2);
   1000          //    gi_image_vertical = (int16)((gi_end_line + gi_start_line)/2);
   1001          //    
   1002          ////    if((rightedge == leftedge) && (!rightedge) && (!leftedge))
   1003          ////      gi_image_area =1;
   1004          //    
   1005          //    if((gi_image_area == 0)&&(gi_image_center == 0))
   1006          //    {
   1007          //        suc_image_count++;
   1008          //        if(suc_image_count == gc_not_found_count)
   1009          //        {
   1010          //            guc_find_image_flag = NOT_FOUND_IMAGE;
   1011          //            suc_image_count = 0;
   1012          //            gc_not_found_count = 3;
   1013          //        }
   1014          //        if(guc_find_image_flag != NOT_FOUND_IMAGE)
   1015          //        {
   1016          //            gi_image_center = si_image_center_temp;
   1017          //            gi_image_area = si_image_area_temp;
   1018          //            gi_image_vertical = si_image_vertical_temp;
   1019          //        }
   1020          //    }
   1021          //    else
   1022          //    {
   1023          //        si_image_center_temp = gi_image_center;
   1024          //        si_image_area_temp = gi_image_area;
   1025          //        si_image_vertical_temp = gi_image_vertical;
   1026          //        guc_find_image_flag = FOUND_IMAGE;
   1027          //        suc_image_count = 0;
   1028          //    }
   1029          //}
   1030          //
   1031          ///*===============================================================
   1032          //	@brief     中心线及面积均值滤波
   1033          //	@function  对中心线及面积取n次均值后平滑输出克服图像畸变
   1034          //                   测试图像处理中断最大为12ms，小车速度即使达到3m/s以上
   1035          //==================================================================*/
   1036          //
   1037          //void Average_Filter()
   1038          //{
   1039          //    static int16 last_img_center[3];
   1040          //    static int16 last_img_vertical[3];
   1041          //    static int16 last_img_area[8]; 
   1042          //    static int16 last_img_right[3];
   1043          //    static int16 last_img_left[3];
   1044          //    static int16 last_img_start_line[3];
   1045          //    static int16 last_img_end_line[3];
   1046          //    
   1047          //    int8 i;
   1048          //    int8 count_left = 0;
   1049          //    int8 count_right = 0;
   1050          //    int8 count_start_line = 0;
   1051          //    int8 count_end_line = 0;    
   1052          //    int16 sum_center = 0;
   1053          //    int16 sum_vertical = 0;
   1054          //    int32 sum_area = 0;
   1055          //    int16 sum_right = 0;
   1056          //    int16 sum_left = 0;
   1057          //    int16 sum_start_line = 0;
   1058          //    int16 sum_end_line = 0;        
   1059          //
   1060          //    last_img_area[0] = last_img_area[1];
   1061          //    last_img_area[1] = last_img_area[2];
   1062          //    last_img_area[2] = last_img_area[3];
   1063          //    last_img_area[3] = last_img_area[4];
   1064          //    last_img_area[4] = last_img_area[5];
   1065          //    last_img_area[5] = last_img_area[6];
   1066          //    last_img_area[6] = last_img_area[7];
   1067          //    last_img_area[7] = gi_image_area;
   1068          //
   1069          //    last_img_right[0] = last_img_right[1];
   1070          //    last_img_right[1] = last_img_right[2];
   1071          //    last_img_right[2] = gi_edge_right_value;
   1072          //    
   1073          //    last_img_left[0] = last_img_left[1];
   1074          //    last_img_left[1] = last_img_left[2];
   1075          //    last_img_left[2] = gi_edge_left_value;
   1076          //    
   1077          //    last_img_start_line[0] = last_img_start_line[1];
   1078          //    last_img_start_line[1] = last_img_start_line[2];
   1079          //    last_img_start_line[2] = gi_start_line;
   1080          //    
   1081          //    last_img_end_line[0] = last_img_end_line[1];
   1082          //    last_img_end_line[1] = last_img_end_line[2];
   1083          //    last_img_end_line[2] = gi_end_line;    
   1084          //    
   1085          //    for(i=0; i<3; i++)
   1086          //    {
   1087          ////      sum_center += last_img_center[i];
   1088          //      //sum_area += last_img_area[i];
   1089          //        if(last_img_right[i])
   1090          //        {
   1091          //            sum_right += last_img_right[i];
   1092          //            count_right++;
   1093          //        }
   1094          //        if(last_img_left[i])
   1095          //        {
   1096          //            sum_left += last_img_left[i];
   1097          //            count_left++;
   1098          //        }
   1099          //        if(last_img_start_line[i] != NOT_FOUND)
   1100          //        {
   1101          //            sum_start_line += last_img_start_line[i];
   1102          //            count_start_line++;
   1103          //        }
   1104          //        if(last_img_end_line[i] != NOT_FOUND)
   1105          //        {
   1106          //            sum_end_line += last_img_end_line[i];
   1107          //            count_end_line++;
   1108          //        }
   1109          //    }
   1110          //    
   1111          //    for(i=0; i<8; i++)
   1112          //    {
   1113          //        sum_area += last_img_area[i];
   1114          //    }
   1115          //    
   1116          //    gi_image_area_ave = (int16)(sum_area / 8);
   1117          //    
   1118          //    if(!count_right)
   1119          //    {
   1120          //        gi_image_right_ave = 0;
   1121          //    }
   1122          //    else
   1123          //       gi_image_right_ave = (int16)((sum_right / count_right));
   1124          //    
   1125          //    
   1126          //    if(!count_left)
   1127          //    {
   1128          //      gi_image_left_ave = 0;
   1129          //    }
   1130          //    else
   1131          //       gi_image_left_ave = (int16)((sum_left / count_left)); 
   1132          //    
   1133          //    if(!count_start_line)
   1134          //    {
   1135          //        gi_image_start_ave = 0;
   1136          //    }
   1137          //    else
   1138          //       gi_image_start_ave = (int16)((sum_start_line / count_start_line));
   1139          //    
   1140          //    if(!count_end_line)
   1141          //    {
   1142          //      gi_image_end_ave = 0;
   1143          //    }
   1144          //    else
   1145          //       gi_image_end_ave = (int16)((sum_end_line / count_end_line)); 
   1146          //    
   1147          //    last_img_vertical[0] = last_img_vertical[1];
   1148          //    last_img_vertical[1] = last_img_vertical[2];
   1149          //    last_img_vertical[2] = gi_image_vertical;
   1150          //    
   1151          //    for(i=0; i<3; i++)
   1152          //    {
   1153          //      sum_vertical += last_img_vertical[i]; 
   1154          //    }
   1155          //    gi_image_vertical_ave = (int16)((sum_vertical / 3));
   1156          //    
   1157          //    last_img_center[0] = last_img_center[1];
   1158          //    last_img_center[1] = last_img_center[2];
   1159          //    last_img_center[2] = gi_image_center;
   1160          //    
   1161          //    for(i=0; i<3; i++)
   1162          //    {
   1163          //      sum_center += last_img_center[i]; 
   1164          //    }
   1165          //    gi_image_center_ave = (int16)((sum_center / 3) + 3);//弥补中值去噪的误差
   1166          //}
   1167          //
   1168          ///*===============================================================
   1169          //	@brief     切灯系数标定
   1170          //	@function  根据与信标灯的距离不断更定切灯位置距图像中心的比例
   1171          //	@note      使用matlab拟合，使轨迹尽量为一条直线，前期使用图像面积
   1172          //                   后期使用超声波测得的距离
   1173          //==================================================================*/
   1174          //
   1175          //void Track_Liner()
   1176          //{
   1177          //    if(gi_image_vertical_ave < 10)
   1178          //    {
   1179          //        gf_beacon_offset_P = 0;
   1180          //    }
   1181          //    else if((gi_image_vertical_ave >= 10)&&(gi_image_vertical_ave < 14))
   1182          //    {
   1183          //        gf_beacon_offset_P = 0.5;
   1184          //    }
   1185          //    else if((gi_image_vertical_ave >= 14)&&(gi_image_vertical_ave < 64))
   1186          //    {
   1187          //        gf_beacon_offset_P = 1;
   1188          //    }
   1189          //}
   1190          //
   1191          ///*===============================================================
   1192          //	@brief     无视野寻灯次数判断
   1193          //	@function  连续采集多少次无图像判断为失去视野
   1194          //	@note      使用y轴坐标判断，低于一定值直接降为1，减少因判断延时带来的滑动
   1195          //                   前期使用图像面积检测
   1196          //==================================================================*/
   1197          //
   1198          //void Horizon_Count()
   1199          //{
   1200          //    if(gi_image_vertical_ave < 28)
   1201          //    {
   1202          //        gc_not_found_count = 4;
   1203          //    }
   1204          //    else if((gi_image_vertical_ave >= 28)&&(gi_image_vertical_ave < 64))
   1205          //    {
   1206          //        gc_not_found_count = 4;
   1207          //    }
   1208          //    else if(gi_image_vertical_ave == NOT_FOUND)
   1209          //    {
   1210          //        gc_not_found_count = 4;
   1211          //    }
   1212          //    
   1213          ////    if(gc_not_found_count == 1)
   1214          ////      Beep_On();
   1215          ////    else
   1216          ////      Beep_Off();
   1217          ////    else if((gi_image_vertical_ave >= 55)&&(gi_image_vertical_ave < 64))
   1218          ////    {
   1219          ////        gc_not_found_count = 1;
   1220          ////    }
   1221          //
   1222          //////    if(!gi_image_area_ave)
   1223          //////    {
   1224          //////        gc_not_found_count = 7;
   1225          //////    }
   1226          ////    if(gi_image_area_ave > 600)
   1227          ////    {
   1228          ////        gc_not_found_count = 4;
   1229          ////    }
   1230          ////    else if(gi_image_area_ave >= 150)
   1231          ////    {
   1232          ////        gc_not_found_count = 4;
   1233          ////    }
   1234          ////    else if(gi_image_area_ave < 150)
   1235          ////    {
   1236          ////        gc_not_found_count = 5;
   1237          ////    }
   1238          //
   1239          //}
   1240          //
   1241          ///*===============================================================
   1242          //	@brief     目标线定位
   1243          //	@function  信标灯旁侧切灯中心线定位，右灯左切，左灯右切
   1244          //==================================================================*/
   1245          //
   1246          //void Image_Center()
   1247          //{
   1248          //    int16 image_center_temp;
   1249          //    int16 image_semi_width;
   1250          ////    static int16 si_image_width_temp = 0;
   1251          //    
   1252          //    gf_beacon_offset_P = 1;
   1253          //    
   1254          //    image_semi_width = (gi_image_right_ave - gi_image_left_ave)/2;
   1255          //    
   1256          ////    if(!image_semi_width)
   1257          ////    {
   1258          ////        image_semi_width = si_image_width_temp;
   1259          ////    }
   1260          //
   1261          //
   1262          //    if(gi_image_center_ave >= IMAGE_WIDTH/2)
   1263          //    {
   1264          //        image_center_temp = (int16)(gi_image_center_ave + 5 - (float)(image_semi_width * gf_center_err_P * gf_beacon_offset_P /10));
   1265          //        guc_center_flag = RIGHT;
   1266          //    }
   1267          //    else if((gi_image_center_ave < IMAGE_WIDTH/2) && (gi_image_center > 0))
   1268          //    {
   1269          //        image_center_temp = (int16)(gi_image_center_ave + 9 + (float)(image_semi_width * gf_center_err_P * gf_beacon_offset_P /10));
   1270          //        guc_center_flag = LEFT;
   1271          //    }
   1272          //    gi_image_err = image_center_temp - 64;
   1273          //    
   1274          //    if(gi_image_center_ave==3)
   1275          //    {
   1276          //        gi_image_err = 0;
   1277          //    }
   1278          ////    si_image_width_temp = image_semi_width;
   1279          //}
   1280          
   1281          
   1282          /*===============================================================
   1283          	@brief     图像显示
   1284          ==================================================================*/
   1285          

   \                                 In section .text, align 2, keep-with-next
   1286          void Show_Image_Process()
   1287          {
   \                     Show_Image_Process: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1288              uint8 num, row;
   1289              for(row=0; row<IMAGE_HEIGHT; row++)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xE031             B.N      ??Show_Image_Process_0
   1290              {
   1291                  for(num=0; num<IMAGE_WIDTH; num++)
   1292                  {
   1293                      if(row == img_furthest_line)
   1294                      {
   1295                          imageshow[row][num]=1;
   1296                      }
   1297                      else
   1298                      {
   1299                          imageshow[row][num]=0;		//缓存数组清0
   1300                      }
   1301          
   1302                  }
   1303                  if((gi_edge_left[row]!=NOT_FOUND)&&(gi_edge_right[row]!=NOT_FOUND))
   \                     ??Show_Image_Process_1: (+1)
   \   00000006   0x....             LDR.N    R1,??DataTable10_1
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xF931 0x1010      LDRSH    R1,[R1, R0, LSL #+1]
   \   0000000E   0xF640 0x72FF      MOVW     R2,#+4095
   \   00000012   0x4291             CMP      R1,R2
   \   00000014   0xD028             BEQ.N    ??Show_Image_Process_2
   \   00000016   0x....             LDR.N    R1,??DataTable10_39
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0xF931 0x1010      LDRSH    R1,[R1, R0, LSL #+1]
   \   0000001E   0xF640 0x72FF      MOVW     R2,#+4095
   \   00000022   0x4291             CMP      R1,R2
   \   00000024   0xD020             BEQ.N    ??Show_Image_Process_2
   1304                  {
   1305                      imageshow[row][gi_edge_left[row]]=1;
   \   00000026   0x....             LDR.N    R1,??DataTable10_40
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x2280             MOVS     R2,#+128
   \   0000002C   0xFB02 0xF200      MUL      R2,R2,R0
   \   00000030   0x4411             ADD      R1,R1,R2
   \   00000032   0x....             LDR.N    R2,??DataTable10_1
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0xF932 0x2010      LDRSH    R2,[R2, R0, LSL #+1]
   \   0000003A   0x2301             MOVS     R3,#+1
   \   0000003C   0x548B             STRB     R3,[R1, R2]
   1306                      imageshow[row][gi_edge_right[row]]=1;
   \   0000003E   0x....             LDR.N    R1,??DataTable10_40
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0x2280             MOVS     R2,#+128
   \   00000044   0xFB02 0xF200      MUL      R2,R2,R0
   \   00000048   0x4411             ADD      R1,R1,R2
   \   0000004A   0x....             LDR.N    R2,??DataTable10_39
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0xF932 0x2010      LDRSH    R2,[R2, R0, LSL #+1]
   \   00000052   0x2301             MOVS     R3,#+1
   \   00000054   0x548B             STRB     R3,[R1, R2]
   1307                      imageshow[row][IMAGE_WIDTH/2]=1;		//显示中线
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x....             LDR.N    R2,??DataTable10_40
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x2380             MOVS     R3,#+128
   \   0000005E   0xFB03 0xF300      MUL      R3,R3,R0
   \   00000062   0x441A             ADD      R2,R2,R3
   \   00000064   0xF882 0x1040      STRB     R1,[R2, #+64]
   1308                  }
   \                     ??Show_Image_Process_2: (+1)
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \                     ??Show_Image_Process_0: (+1)
   \   0000006A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   0x2840             CMP      R0,#+64
   \   0000006E   0xDA1D             BGE.N    ??Show_Image_Process_3
   \   00000070   0x2100             MOVS     R1,#+0
   \   00000072   0xE009             B.N      ??Show_Image_Process_4
   \                     ??Show_Image_Process_5: (+1)
   \   00000074   0x....             LDR.N    R2,??DataTable10_40
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x2380             MOVS     R3,#+128
   \   0000007A   0xFB03 0xF300      MUL      R3,R3,R0
   \   0000007E   0x441A             ADD      R2,R2,R3
   \   00000080   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000082   0x2300             MOVS     R3,#+0
   \   00000084   0x5453             STRB     R3,[R2, R1]
   \                     ??Show_Image_Process_6: (+1)
   \   00000086   0x1C49             ADDS     R1,R1,#+1
   \                     ??Show_Image_Process_4: (+1)
   \   00000088   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000008A   0x2980             CMP      R1,#+128
   \   0000008C   0xDABB             BGE.N    ??Show_Image_Process_1
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0x....             LDR.N    R2,??DataTable10_41
   \   00000092   0x6812             LDR      R2,[R2, #+0]
   \   00000094   0x4290             CMP      R0,R2
   \   00000096   0xD1ED             BNE.N    ??Show_Image_Process_5
   \   00000098   0x....             LDR.N    R2,??DataTable10_40
   \   0000009A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009C   0x2380             MOVS     R3,#+128
   \   0000009E   0xFB03 0xF300      MUL      R3,R3,R0
   \   000000A2   0x441A             ADD      R2,R2,R3
   \   000000A4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A6   0x2301             MOVS     R3,#+1
   \   000000A8   0x5453             STRB     R3,[R2, R1]
   \   000000AA   0xE7EC             B.N      ??Show_Image_Process_6
   1309              }
   1310              oled_print_mirror_image((uint8(*)[128])imageshow,IMAGE_HEIGHT,IMAGE_WIDTH);
   \                     ??Show_Image_Process_3: (+1)
   \   000000AC   0x2280             MOVS     R2,#+128
   \   000000AE   0x2140             MOVS     R1,#+64
   \   000000B0   0x....             LDR.N    R0,??DataTable10_40
   \   000000B2   0x.... 0x....      BL       oled_print_mirror_image
   1311          }
   \   000000B6   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     guc_cur_image

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     gi_edge_right

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     guc_corrected_image

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     gi_edge_left

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x42FE0000         DC32     0x42fe0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     gi_start_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     gi_end_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     gi_left_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x........         DC32     gi_right_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x........         DC32     gi_edge_left_value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x........         DC32     gi_edge_right_value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x........         DC32     gi_image_area

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x........         DC32     gi_image_center

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x........         DC32     gi_image_vertical

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x........         DC32     `Image_Area::suc_image_count`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x........         DC32     gc_not_found_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x........         DC32     guc_find_image_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x........         DC32     `Image_Area::si_image_center_temp`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x........         DC32     `Image_Area::si_image_area_temp`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x........         DC32     `Image_Area::si_image_vertical_temp`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x........         DC32     `Average_Filter::last_img_area`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x........         DC32     `Average_Filter::last_img_right`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_20:
   \   00000000   0x........         DC32     `Average_Filter::last_img_left`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_21:
   \   00000000   0x........         DC32     `Average_Filter::last_img_start_line`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_22:
   \   00000000   0x........         DC32     `Average_Filter::last_img_end_line`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_23:
   \   00000000   0x........         DC32     gi_image_area_ave

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_24:
   \   00000000   0x........         DC32     gi_image_right_ave

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_25:
   \   00000000   0x........         DC32     gi_image_left_ave

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_26:
   \   00000000   0x........         DC32     gi_image_start_ave

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_27:
   \   00000000   0x........         DC32     gi_image_end_ave

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_28:
   \   00000000   0x........         DC32     `Average_Filter::last_img_vertical`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_29:
   \   00000000   0x........         DC32     gi_image_vertical_ave

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_30:
   \   00000000   0x........         DC32     `Average_Filter::last_img_center`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_31:
   \   00000000   0x........         DC32     gi_image_center_ave

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_32:
   \   00000000   0x........         DC32     gf_beacon_offset_P

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_33:
   \   00000000   0x........         DC32     gc_right_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_34:
   \   00000000   0x........         DC32     gf_center_err_P

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_35:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_36:
   \   00000000   0x........         DC32     guc_center_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_37:
   \   00000000   0x........         DC32     gc_left_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_38:
   \   00000000   0x........         DC32     gi_image_err

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_39:
   \   00000000   0x........         DC32     gi_edge_right

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_40:
   \   00000000   0x........         DC32     imageshow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_41:
   \   00000000   0x........         DC32     img_furthest_line

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      36   Average_Filter
       0   Horizon_Count
       0   Image_Area
      16   Image_Center
        16   -> __aeabi_f2iz
        16   -> __aeabi_fadd
        16   -> __aeabi_fdiv
        16   -> __aeabi_fmul
        16   -> __aeabi_fsub
        16   -> __aeabi_i2f
       0   Image_Filter
      40   Image_Get_Edge
        40   -> Limiter
        40   -> __aeabi_f2iz
        40   -> __aeabi_i2f
       0   Image_Get_Vertical
      12   Image_Pre_Process
       8   Image_Process
         8   -> Average_Filter
         8   -> Horizon_Count
         8   -> Image_Area
         8   -> Image_Center
         8   -> Image_Filter
         8   -> Image_Get_Edge
         8   -> Image_Get_Vertical
         8   -> Image_Pre_Process
         8   -> Route_Planning
       8   Show_Image_Process
         8   -> oled_print_mirror_image
       0   Track_Liner


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_20
       4  ??DataTable10_21
       4  ??DataTable10_22
       4  ??DataTable10_23
       4  ??DataTable10_24
       4  ??DataTable10_25
       4  ??DataTable10_26
       4  ??DataTable10_27
       4  ??DataTable10_28
       4  ??DataTable10_29
       4  ??DataTable10_3
       4  ??DataTable10_30
       4  ??DataTable10_31
       4  ??DataTable10_32
       4  ??DataTable10_33
       4  ??DataTable10_34
       4  ??DataTable10_35
       4  ??DataTable10_36
       4  ??DataTable10_37
       4  ??DataTable10_38
       4  ??DataTable10_39
       4  ??DataTable10_4
       4  ??DataTable10_40
       4  ??DataTable10_41
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       4  ??DataTable9
       4  ??DataTable9_1
     834  Average_Filter
      58  Horizon_Count
     292  Image_Area
     220  Image_Center
     130  Image_Filter
     360  Image_Get_Edge
     762  Image_Get_Vertical
     136  Image_Pre_Process
      76  Image_Process
     184  Show_Image_Process
      62  Track_Liner
      16  last_img_area
       8  last_img_center
       8  last_img_end_line
       8  last_img_left
       8  last_img_right
       8  last_img_start_line
       8  last_img_vertical
       2  si_image_area_temp
       2  si_image_center_temp
       2  si_image_vertical_temp
       1  suc_image_count

 
    71 bytes in section .bss
 3 290 bytes in section .text
 
 3 290 bytes of CODE memory
    71 bytes of DATA memory

Errors: none
Warnings: none
